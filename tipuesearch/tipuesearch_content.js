var tipuesearch = {"pages":[{"title":" slsqp ","text":"slsqp Unofficial mirror of NOVAS: Naval Observatory Vector Astrometry Subroutines Status Documentation The latest API documentation can be found here . This was generated from the source code using FORD (note that the included build.sh script will also generate these files). Developer Info Jacob Williams","tags":"home","loc":"index.html"},{"title":"NOVAS_F3.1.f â€“ slsqp","text":"Contents Functions EECT2000 ANMP Subroutines PLACE PLACES MPSTAR SIDTIM CIORA TERCEL CELTER GETHIP CATRAN ZDAZ GCRSEQ EQECL EQEC ECEQ EQGAL VECTRS ANGLES PROPMO GEOCEN GEOPOS LITTIM DLIGHT GRVDEF GRVD ABERAT RADVL PRECES NUTATE SPIN WOBBLE FRAME TERRA TIMES ETILT FUNARG REFRAC LIMANG CIOLOC CIORD CIOBAS EROT EQXRA SETDT SETMOD GETVEC JULDAT CALDAT ASTCON NOD NU2000A NU2000K Source Code NOVAS_F3.1.f Source Code *  NOVAS FORTRAN VERS F3.1 of 2011 MARCH 21 ************************************************************************ *                                                                      * *                              N O V A S                               * *           NAVAL OBSERVATORY VECTOR ASTROMETRY SOFTWARE               * *                                                                      * *                            G. H. KAPLAN                              * *                        U.S. NAVAL OBSERVATORY                        * *                                                                      * ************************************************************************ SUBROUTINE PLACE ( TJD , OBJECT , LOCATN , ICOORD , STAR , OBSERV , . SKYPOS ) * *     THIS SUBROUTINE COMPUTES THE APPARENT DIRECTION OF A STAR OR SOLAR *     SYSTEM BODY AT A SPECIFIED TIME AND IN A SPECIFIED COORDINATE *     SYSTEM.  BASED ON KAPLAN, ET AL. (1989), ASTRONOMICAL JOURNAL 97, *     1197-1210, WITH SOME ENHANCEMENTS FROM KLIONER (2003), *     ASTRONOMICAL JOURNAL 125, 1580-1597. * *          TJD    = TT JULIAN DATE FOR PLACE (IN) *          OBJECT = CHARACTER STRING IDENTIFYING OBJECT OF INTEREST (IN) *                   FOR SOLAR SYSTEM *                   BODY,             SPECIFY THE NAME USING ALL UPPER- *                                     CASE LETTERS ('SUN', 'MOON', *                                     'JUPITER', ETC.), *                                     - OR - *                                     SPECIFY THE BODY ID NUMBER *                                     IN A 4-CHARACTER STRING OF THE *                                     FORM '=NNN', WHERE NNN IS THE *                                     BODY ID NUMBER *                   FOR STAR,         PROVIDE A BLANK STRING, THE WORD *                                     'STAR', OR ANY STRING BEGINNING *                                     WITH '*' *          LOCATN = INTEGER CODE SPECIFYING LOCATION OF OBSERVER (IN) *                   SET LOCATN=0 FOR OBSERVER AT GEOCENTER *                   SET LOCATN=1 FOR OBSERVER ON SURFACE OF EARTH *                   SET LOCATN=2 FOR OBSERVER ON NEAR-EARTH SPACECRAFT *          ICOORD = INTEGER CODE SPECIFYING COORDINATE SYSTEM OF OUTPUT *                   POSITION (IN) *                   SET ICOORD=0 FOR GCRS (OR 'LOCAL GCRS') *                   SET ICOORD=1 FOR TRUE EQUATOR AND EQUINOX OF DATE *                   SET ICOORD=2 FOR TRUE EQUATOR AND CIO OF DATE *                   SET ICOORD=3 FOR ASTROMETRIC COORDINATES, I.E., *                                WITHOUT LIGHT DEFLECTION OR ABERRATION *          STAR   = ARRAY OF CATALOG DATA FOR STAR (IN) *                   (NOT USED IF SOLAR SYSTEM BODY REQUESTED) *                   STAR(1) = ICRS RIGHT ASCENSION IN HOURS *                   STAR(2) = ICRS DECLINATION IN DEGREES *                   STAR(3) = ICRS PROPER MOTION IN RA IN *                             MILLIARCSECONDS/YEAR *                   STAR(4) = ICRS PROPER MOTION IN DEC IN *                             MILLIARCSECONDS/YEAR *                   STAR(5) = PARALLAX IN MILLIARCSECONDS *                   STAR(6) = RADIAL VELOCITY IN KILOMETERS/SECOND *                   FURTHER STAR ARRAY ELEMENTS ARE NOT USED HERE *                   BUT ARE RESERVED FOR FUTURE USE *          OBSERV = ARRAY OF DATA SPECIFYING LOCATION OF OBSERVER (IN) *                   (NOT USED IF LOCATN=0) *                   FOR LOCATN=1, *                   OBSERV(1) = GEODETIC LONGITUDE (WGS-84) OF OBSERVER *                               (EAST +) IN DEGREES *                   OBSERV(2) = GEODETIC LATITUDE (WGS-84) OF OBSERVER *                               (NORTH +) IN DEGREES *                   OBSERV(3) = HEIGHT OF OBSERVER ABOVE ELLIPSOID *                               IN METERS *                   OBSERV(4) = VALUE OF DELTA-T IN SECONDS *                               (DELTA-T=TT-UT1) *                   OBSERV(5) = (NOT USED, RESERVED FOR FUTURE USE) *                   OBSERV(6) = (NOT USED, RESERVED FOR FUTURE USE) *                   FOR LOCATN=2, *                   OBSERV(1) = GEOCENTRIC X IN KILOMETERS *                   OBSERV(2) = GEOCENTRIC Y IN KILOMETERS *                   OBSERV(3) = GEOCENTRIC Z IN KILOMETERS *                   OBSERV(4) = GEOCENTRIC X-DOT IN KILOMETERS/SECOND *                   OBSERV(5) = GEOCENTRIC Y-DOT IN KILOMETERS/SECOND *                   OBSERV(6) = GEOCENTRIC Z-DOT IN KILOMETERS/SECOND *                   WITH RESPECT TO TRUE EQUATOR AND EQUINOX OF DATE *          SKYPOS = ARRAY OF OUTPUT DATA SPECIFYING OBJECT'S PLACE *                   ON THE SKY AT TIME TJD, WITH RESPECT TO THE *                   SPECIFIED OUTPUT COORDINATE SYSTEM (OUT) *                   SKYPOS(1) = X, DIMENSIONLESS      UNIT VECTOR *                   SKYPOS(2) = Y, DIMENSIONLESS      TOWARD OBJECT *                   SKYPOS(3) = Z, DIMENSIONLESS *                   SKYPOS(4) = APPARENT, TOPOCENTRIC, OR ASTROMETRIC *                               RIGHT ASCENSION IN HOURS *                   SKYPOS(5) = APPARENT, TOPOCENTRIC, OR ASTROMETRIC *                               DECLINATION IN DEGREES *                   SKYPOS(6) = TRUE (GEOMETRIC, EUCLIDIAN) DISTANCE *                               TO SOLAR SYSTEM BODY IN AU AT TIME TJD, *                               OR 0.D0 FOR STAR *                   SKYPOS(7) = RADIAL VELOCITY IN KILOMETERS/SECOND *                   FURTHER SKYPOS ARRAY ELEMENTS ARE NOT USED HERE *                   BUT ARE RESERVED FOR FUTURE USE * *     NOTE 1: VALUES OF LOCATN AND ICOORD FOR VARIOUS STANDARD KINDS *     OF PLACE: *     LOCATN=0 AND ICOORD=1 APPARENT PLACE *     LOCATN=1 AND ICOORD=1 TOPOCENTRIC PLACE *     LOCATN=0 AND ICOORD=0 VIRTUAL PLACE *     LOCATN=1 AND ICOORD=0 LOCAL PLACE *     LOCATN=0 AND ICOORD=3 ASTROMETRIC PLACE *     LOCATN=1 AND ICOORD=3 TOPOCENTRIC ASTROMETRIC PLACE * *     NOTE 2: ARRAYS STAR AND SKYPOS MAY BE EXPANDED IN THE FUTURE, AND *     THIS CAN BE ALLOWED FOR IN THE CALLING CODE BY DIMENSIONING *     THESE ARRAYS WITH 20 AND 10 ELEMENTS, RESPECTIVELY, EVEN THOUGH *     ELEMENTS BEYOND STAR(6) AND SKYPOS(7) ARE NOT NOW REFERRED TO IN *     THIS SUBROUTINE. * *     NOTE 3: IF LOCATN=1 AND OBSERV(4)=0.D0, THE VALUE OF DELTA-T WILL *     BE OBTAINED FROM GETDT, WHICH PROVIDES THE LAST VALUE OF DELTA-T *     DEFINED BY THE USER VIA CALL TO SETDT. * *     NOTE 4: SKYPOS(7), THE RADIAL VELOCITY, IS THE PREDICTED *     RADIAL VELOCITY MEASURE (Z) TIMES THE SPEED OF LIGHT, AN *     INHERENTLY SPECTROSCOPIC MEASURE.  FOR A STAR, IT *     INCLUDES ALL EFFECTS, SUCH AS GRAVITATIONAL RED SHIFT, *     CONTAINED IN THE CATALOG BARYCENTRIC RADIAL VELOCITY MEASURE, *     WHICH IS ASSUMED GIVEN IN STAR(6).  FOR A SOLAR SYSTEM *     BODY, IT APPLIES TO A FICTITIOUS EMITTER AT THE CENTER OF THE *     OBSERVED OBJECT, ASSUMED MASSLESS (NO GRAVITATIONAL RED SHIFT), *     AND DOES NOT IN GENERAL APPLY TO REFLECTED LIGHT. * * * --- INITIAL DECLARATIONS--------------------------------------------- IMPLICIT NONE INTEGER LOCATN , ICOORD , NTIMES , IEARTH , ISUN , IDBODY , IERR , LOC , J , KCIO , . IDSS DOUBLE PRECISION TJD , STAR , OBSERV , SKYPOS , . T0 , TLAST1 , TLAST2 , TTJD , TDBJD , C , X , SECDIF , TLIGHT , DIS , DT , . FRLIMB , RCIO , PEB , VEB , PSB , VSB , POG , VOG , POB , VOB , . POS1 , VEL1 , POS2 , POS3 , POS4 , POS5 , POS6 , POS7 , POS8 , . PX , PY , PZ , RA , DEC , RVS , RVD , RV , DABS , DSQRT CHARACTER * ( * ) OBJECT DIMENSION STAR ( * ), OBSERV ( 6 ), SKYPOS ( * ), . PEB ( 3 ), VEB ( 3 ), PSB ( 3 ), VSB ( 3 ), . POG ( 3 ), VOG ( 3 ), POB ( 3 ), VOB ( 3 ), . POS1 ( 3 ), VEL1 ( 3 ), POS2 ( 3 ), POS3 ( 3 ), POS4 ( 3 ), POS5 ( 3 ), . POS6 ( 3 ), POS7 ( 3 ), POS8 ( 3 ), . PX ( 3 ), PY ( 3 ), PZ ( 3 ), RVS ( 3 ), RVD ( 3 ) SAVE *     T0 = TDB JULIAN DATE OF EPOCH J2000.0 (TT) DATA T0 / 245154 5.00000000D0 / DATA TLAST1 , TLAST2 / 0.D0 , 0.D0 / , NTIMES / 0 / 3 FORMAT ( ' PLACE: CANNOT OBTAIN COORDINATES OF ' , A , ' AT JD ' , . F10 . 1 ) 4 FORMAT ( ' PLACE: WILL NOT PROCESS EARTH AS OBSERVED OBJECT ' , . 'EXCEPT WHEN LOCATN=2' ) * --- GET CONSTANTS, FIRST TIME ONLY ---------------------------------- NTIMES = NTIMES + 1 IF ( NTIMES . EQ . 1 ) THEN IEARTH = IDSS ( 'EARTH' ) ISUN = IDSS ( 'SUN' ) *         GET C, THE SPEED OF LIGHT IN AU/DAY CALL ASTCON ( 'C(AU/DAY)' , 1.D0 , C ) END IF * --- CHECK ON EARTH AS AN OBSERVED OBJECT ---------------------------- IF ( OBJECT . EQ . 'EARTH' . AND . LOCATN . NE . 2 ) THEN WRITE ( * , 4 ) GO TO 70 END IF * --- GET POSITION AND VELOCITY OF EARTH (GEOCENTER) AND SUN ---------- IF ( DABS ( TJD - TLAST1 ) . GT . 1.D-8 ) THEN *         COMPUTE TDBJD, THE TDB JULIAN DATE CORRESPONDING TO TTJD TTJD = TJD TDBJD = TJD CALL TIMES ( TDBJD , X , SECDIF ) TDBJD = TTJD + SECDIF / 8640 0.D0 *         GET POSITION AND VELOCITY OF THE EARTH WRT BARYCENTER OF *         SOLAR SYSTEM, IN ICRS CALL SOLSYS ( TDBJD , IEARTH , 0 , PEB , VEB , IERR ) IF ( IERR . NE . 0 ) THEN WRITE ( * , 3 ) 'EARTH' , TJD GO TO 70 END IF *         GET POSITION AND VELOCITY OF THE SUN WRT BARYCENTER OF *         SOLAR SYSTEM, IN ICRS CALL SOLSYS ( TDBJD , ISUN , 0 , PSB , VSB , IERR ) IF ( IERR . NE . 0 ) THEN WRITE ( * , 3 ) 'SUN' , TJD GO TO 70 END IF TLAST1 = TJD END IF * --- GET POSITION AND VELOCITY OF OBSERVER --------------------------- IF ( LOCATN . EQ . 1 . OR . LOCATN . EQ . 2 ) THEN *         FOR TOPOCENTRIC PLACE, GET GEOCENTRIC POSITION AND VELOCITY *         VECTORS OF OBSERVER CALL GEOPOS ( TTJD , LOCATN , OBSERV , POG , VOG ) LOC = 1 ELSE *         FOR GEOCENTRIC PLACE, THERE IS NOTHING TO DO DO 25 J = 1 , 3 POG ( J ) = 0.D0 VOG ( J ) = 0.D0 25 CONTINUE LOC = 0 END IF *     COMPUTE POSITION AND VELOCITY OF OBSERVER WRT BARYCENTER OF *     SOLAR SYSTEM (GALILEAN TRANSFORMATION FROM GCRS tob~3 MICROARCSECONDS PER SECOND OF DELTA-T. *     THEREFORE, FOR MANY APPLICATIONS, THIS SUBROUTINE EITHER NEED NOT *     BE CALLED AT ALL, OR CAN BE CALLED JUST ONCE FOR A WIDE RANGE OF *     DATES (E.G., A YEAR).  IF THIS CALL IS NOT USED, A DEFAULT *     VALUE OF DELTA-T OF 64 SECONDS IS USED, WHICH IS APPROPRIATE TO *     2000.0. * *     NOTE 2:  THE INPUT TIME ARGUMENTS TO SIDTIM AND TERCEL (TJDH AND *     TJDL) ARE EXPRESSED IN UT1 REGARDLESS OF WHETHER THIS CALL IS *     USED. * * DOUBLE PRECISION DELTAT , DT , DELT SAVE DT *     DEFAULT VALUE OF DELTA-T IN DAYS, EQUIVALENT TO 64 SECONDS, *     THE APPROXIMATE VALUE AT 2000.0 DATA DT / 0.00074074D0 / DT = DELT / 8640 0.D0 RETURN ENTRY GETDT ( DELTAT ) *     THIS ENTRY RETURNS THE CURRENT VALUE OF DELTA-T *     (DELTA-T = TT - UT1), PREVIOUSLY SET BY THE USER.  THE VALUE *     RETURNED IS TO BE USED IN THE CALCULATION OF SIDEREAL TIME AND *     THE TERRESTRIAL-TO-CELESTIAL TRANSFORMATION.  IT ALLOWS THESE *     CALCULATIONS TO BE PERFORMED, CORRECTLY, USING UT1 AS THE TIME *     ARGUMENT FOR THE EARTH ROTATION ANGLE AND TDB AS THE TIME ARGUMENT *     FOR THE PRECESSION AND NUTATION COMPONENTS. * *          DELTAT = VALUE OF DELTA-T (TT-UT1) IN DAYS (OUT) DELTAT = DT RETURN END SUBROUTINE SETMOD ( MODE ) * *     THIS SUBROUTINE ALLOWS THE USER TO SPECIFY THE 'MODE' VALUE, *     WHICH DETERMINES THE METHOD USED FOR THE COMPUTATION OF SIDEREAL *     TIME AND THE TERRESTRIAL-TO-CELESTIAL TRANSFORMATION, AND THE *     ACCURACY OF NUTATION AND RELATED CALCULATIONS. * *          MODE   = SELECTION FOR METHOD AND ACCURACY (IN) *                   SET MODE=0 FOR CIO-BASED METHOD, FULL ACCURACY *                   SET MODE=1 FOR CIO-BASED METHOD, REDUCED ACCURACY *                   SET MODE=2 FOR EQUINOX-BASED METHOD, FULL ACCURACY *                   SET MODE=3 FOR EQUINOX-BASED METHOD, REDUCED *                                  ACCURACY * *     NOTE: OTHER ENTRY POINTS ARE PROVIDED TO ALLOW THE METHOD AND *     ACCURACY TO BE SPECIFIED IN A MORE OBVIOUS WAY: *     MODE=0 CAN BE SET BY CALL CIOTIO AND CALL HIACC *     MODE=1 CAN BE SET BY CALL CIOTIO AND CALL LOACC *     MODE=2 CAN BE SET BY CALL EQINOX AND CALL HIACC *     MODE=3 CAN BE SET BY CALL EQINOX AND CALL LOACC * * SAVE IMODE , LMODE DATA IMODE , LMODE / 2 , 2 / LMODE = IMODE IMODE = MODE RETURN ENTRY CIOTIO LMODE = IMODE IF ( IMODE . GE . 2 ) IMODE = IMODE - 2 RETURN ENTRY EQINOX LMODE = IMODE IF ( IMODE . LE . 1 ) IMODE = IMODE + 2 RETURN ENTRY LOACC LMODE = IMODE IF ( MOD ( IMODE , 2 ) . EQ . 0 ) IMODE = IMODE + 1 RETURN ENTRY HIACC LMODE = IMODE IF ( MOD ( IMODE , 2 ) . EQ . 1 ) IMODE = IMODE - 1 RETURN ENTRY RESUME IMODE = LMODE RETURN ENTRY GETMOD ( MODE ) * *     THIS SUBROUTINE RETURNS THE 'MODE' VALUE, WHICH *     DETERMINES THE METHOD USED FOR THE COMPUTATION OF SIDEREAL *     TIME AND THE TERRESTRIAL-TO-CELESTIAL TRANSFORMATION, AND THE *     ACCURACY OF NUTATION AND RELATED CALCULATIONS. * *          MODE   = SELECTION FOR METHOD AND ACCURACY (OUT) *                   MODE=0 MEANS CIO-BASED METHOD, FULL ACCURACY *                   MODE=1 MEANS CIO-BASED METHOD, REDUCED ACCURACY *                   MODE=2 MEANS EQUINOX-BASED METHOD, FULL ACCURACY *                   MODE=3 MEANS EQUINOX-BASED METHOD, REDUCED ACCURACY * * MODE = IMODE RETURN END SUBROUTINE GETVEC ( UNITV ) * *     THIS SUBROUTINE ALLOWS THE USER TO RETRIEVE THE LAST COMPUTED *     POSITION ON THE SKY AS A UNIT VECTOR. * *          UNITV  = UNIT VECTOR TOWARD LAST COMPUTED POSITION ON THE *                   SKY, IN THE COORDINATE SYSTEM USED FOR THAT *                   POSITION (OUT) * * DOUBLE PRECISION UNITV , P , POS , R , DSQRT DIMENSION UNITV ( 3 ), P ( 3 ), POS ( 3 ) SAVE P R = DSQRT ( P ( 1 ) ** 2 + P ( 2 ) ** 2 + P ( 3 ) ** 2 ) DO 20 J = 1 , 3 UNITV ( J ) = P ( J ) / R 20 CONTINUE RETURN ENTRY SETVEC ( POS ) * *     THIS ENTRY STORES THE LAST COMPUTED POSITION ON THE SKY. * *          POS    = VECTOR TOWARD LAST COMPUTED POSITION ON THE *                   SKY, IN THE COORDINATE SYSTEM USED FOR THAT *                   POSITION (IN) * * DO 30 J = 1 , 3 P ( J ) = POS ( J ) 30 CONTINUE RETURN END SUBROUTINE JULDAT ( I , M , K , H , TJD ) * *     THIS SUBROUTINE COMPUTES JULIAN DATE, GIVEN CALENDAR DATE AND *     TIME.  INPUT CALENDAR DATE MUST BE GREGORIAN.  INPUT TIME VALUE *     CAN BE IN ANY UT-LIKE TIME SCALE (UTC, UT1, TT, ETC.) - OUTPUT *     JULIAN DATE WILL HAVE SAME BASIS.  ALGORITHM BY FLIEGEL AND *     VAN FLANDERN. * *          I      = YEAR (IN) *          M      = MONTH NUMBER (IN) *          K      = DAY OF MONTH (IN) *          H      = UT HOURS (IN) *          TJD    = JULIAN DATE (OUT) * * DOUBLE PRECISION H , TJD *     JD=JULIAN DAY NO FOR DAY BEGINNING AT GREENWICH NOON ON GIVEN DATE JD = K - 32075 + 1461 * ( I + 4800 + ( M - 14 ) / 12 ) / 4 + 367 * ( M - 2 - ( M - 14 ) / 12 * 12 ) / 12 . - 3 * (( I + 4900 + ( M - 14 ) / 12 ) / 100 ) / 4 TJD = JD - 0.5D0 + H / 2 4.D0 RETURN END SUBROUTINE CALDAT ( TJD , I , M , K , H ) * *     THIS SUBROUTINE COMPUTES CALENDAR DATE AND TIME, GIVEN JULIAN *     DATE.  INPUT JULIAN DATE CAN BE BASED ON ANY UT-LIKE TIME SCALE *     (UTC, UT1, TT, ETC.) - OUTPUT TIME VALUE WILL HAVE SAME BASIS. *     OUTPUT CALENDAR DATE WILL BE GREGORIAN.  ALGORITHM BY FLIEGEL AND *     VAN FLANDERN. * *          TJD    = JULIAN DATE (IN) *          I      = YEAR (OUT) *          M      = MONTH NUMBER (OUT) *          K      = DAY OF MONTH (OUT) *          H      = UT HOURS (OUT) * * DOUBLE PRECISION TJD , H , DJD , DMOD DJD = TJD + 0.5D0 JD = DJD H = DMOD ( DJD , 1.D0 ) * 2 4.D0 *     JD=JULIAN DAY NO FOR DAY BEGINNING AT GREENWICH NOON ON GIVEN DATE L = JD + 68569 N = 4 * L / 146097 L = L - ( 146097 * N + 3 ) / 4 *     I=YEAR, M=MONTH, K=DAY I = 4000 * ( L + 1 ) / 1461001 L = L - 1461 * I / 4 + 31 M = 80 * L / 2447 K = L - 2447 * M / 80 L = M / 11 M = M + 2 - 12 * L I = 100 * ( N - 49 ) + I + L RETURN END SUBROUTINE ASTCON ( NAME , FACTOR , CONST ) * *     THIS SUBROUTINE SUPPLIES THE VALUES OF ASTRONOMICAL CONSTANTS. * *         NAME   = NAME OF CONSTANT WHOSE VALUE IS DESIRED (IN) *                  'C'         SPEED OF LIGHT IN METERS/SECOND *                  'C(AU/DAY)' SPEED OF LIGHT IN AU/DAY *                  'AU'        LENGTH OF ASTRONOMICAL UNIT IN METERS *                  'AU(SEC)'   LENGTH OF ASTRONOMICAL UNIT IN SECONDS *                  'GS'        HELIOCENTRIC GRAVITATIONAL CONSTANT *                                 IN METERS**3/SECOND**2 *                  'GE'        GEOCENTRIC GRAVITATIONAL CONSTANT *                                 IN METERS**3/SECOND**2 *                  'ERAD'      EQUATORIAL RADIUS OF EARTH IN METERS *                  'F'         FLATTENING FACTOR OF EARTH *                  'ANGVEL'    NOMINAL MEAN ROTATIONAL ANGULAR VELOCITY *                                 OF EARTH IN RADIANS/SECOND *                  'MASS_SUN'  RECIPROCAL MASS OF THE SUN *                  'MASS_EAR'  RECIPROCAL MASS OF THE EARTH *                  'MASS_MOO'  RECIPROCAL MASS OF THE MOON *                  'MASS_MER'  RECIPROCAL MASS OF MERCURY *                      :             :      :        : *                  'MASS_PLU'  RECIPROCAL MASS OF PLUTO *         FACTOR = FACTOR BY WHICH CONSTANT VALUE IS TO BE MULTIPLIED *                  (IN) *         CONST  = CONSTANT VALUE AFTER MULTIPLICATION BY FACTOR (OUT) * * DOUBLE PRECISION FACTOR , CONST , C , AUSEC CHARACTER NAME * ( * ) *     NOTE:  THESE CONSTANT VALUES ARE BASED ON THE TDB SECOND WHERE *     APPLICABLE. *     SPEED OF LIGHT IN METERS/SECOND IS A DEFINING PHYSICAL CONSTANT DATA C / 29979245 8.D0 / *     LIGHT-TIME FOR ONE ASTRONOMICAL UNIT IN SECONDS, FROM DE-405 DATA AUSEC / 49 9.0047838061D0 / *     SPEED OF LIGHT IN METERS/SECOND IF ( NAME . EQ . 'C' ) THEN CONST = C *     SPEED OF LIGHT IN AU/DAY ELSE IF ( NAME . EQ . 'C(AU/DAY)' ) THEN CONST = 8640 0.D0 / AUSEC *     LENGTH OF ASTRONOMICAL UNIT IN METERS ELSE IF ( NAME . EQ . 'AU' ) THEN CONST = AUSEC * C *     LENGTH OF ASTRONOMICAL UNIT IN SECONDS ELSE IF ( NAME . EQ . 'AU(SEC)' ) THEN CONST = AUSEC *     HELIOCENTRIC GRAVITATIONAL CONSTANT IN METERS**3/SECOND**2, FROM *     DE-405 ELSE IF ( NAME . EQ . 'GS' ) THEN CONST = 1.32712440017987D20 *     GEOCENTRIC GRAVITATIONAL CONSTANT IN METERS**3/SECOND**2, FROM *     DE-405 ELSE IF ( NAME . EQ . 'GE' ) THEN CONST = 3.98600433D14 *     EQUATORIAL RADIUS OF EARTH IN METERS, FROM IERS CONVENTIONS (2003) ELSE IF ( NAME . EQ . 'ERAD' ) THEN CONST = 637813 6.6D0 *     FLATTENING FACTOR OF EARTH, FROM IERS CONVENTIONS (2003) ELSE IF ( NAME . EQ . 'F' ) THEN CONST = 1.D0 / 29 8.25642D0 *     NOMINAL MEAN ROTATIONAL ANGULAR VELOCITY OF EARTH *     IN RADIANS/SECOND, FROM IERS CONVENTIONS (2003) ELSE IF ( NAME . EQ . 'ANGVEL' ) THEN CONST = 7.2921150D-5 *     RECIPROCAL MASSES OF SOLAR SYSTEM BODIES, FROM DE-405 *     (SUN MASS / BODY MASS) ELSE IF ( NAME ( 1 : 4 ) . EQ . 'MASS' ) THEN CONST = 1.D0 IF ( NAME ( 6 : 8 ) . EQ . 'SUN' ) CONST = 1.D0 IF ( NAME ( 6 : 8 ) . EQ . 'MOO' ) CONST = 2706870 0.387534D0 IF ( NAME ( 6 : 8 ) . EQ . 'MER' ) CONST = 602360 0.D0 IF ( NAME ( 6 : 8 ) . EQ . 'VEN' ) CONST = 40852 3.71D0 IF ( NAME ( 6 : 8 ) . EQ . 'EAR' ) CONST = 33294 6.050895D0 IF ( NAME ( 6 : 8 ) . EQ . 'MAR' ) CONST = 309870 8.D0 IF ( NAME ( 6 : 8 ) . EQ . 'JUP' ) CONST = 104 7.3486D0 IF ( NAME ( 6 : 8 ) . EQ . 'SAT' ) CONST = 349 7.898D0 IF ( NAME ( 6 : 8 ) . EQ . 'URA' ) CONST = 2290 2.98D0 IF ( NAME ( 6 : 8 ) . EQ . 'NEP' ) CONST = 1941 2.24D0 IF ( NAME ( 6 : 8 ) . EQ . 'PLU' ) CONST = 13520000 0.D0 IF ( NAME ( 6 : 8 ) . EQ . 'EMB' ) CONST = 32890 0.561400D0 END IF CONST = CONST * FACTOR RETURN END SUBROUTINE NOD ( T , DPSI , DEPS ) * *     THIS SUBROUTINE RETURNS THE VALUES FOR NUTATION IN LONGITUDE AND *     NUTATION IN OBLIQUITY FOR A GIVEN TDB JULIAN DATE. * *          T     = TDB TIME IN JULIAN CENTURIES SINCE J2000.0 (IN) *          DPSI  = NUTATION IN LONGITUDE IN ARCSECONDS (OUT) *          DEPS  = NUTATION IN OBLIQUITY IN ARCSECONDS (OUT) * * DOUBLE PRECISION T , DPSI , DEPS , PI , SECCON , T0 , T1 , DP , DE SAVE PARAMETER ( PI = 3.14159265358979324D0 ) PARAMETER ( SECCON = 18 0.D0 * 360 0.D0 / PI ) *     T0 = TDB JULIAN DATE OF EPOCH J2000.0 (TT) DATA T0 / 245154 5.00000000D0 / *     GET METHOD/ACCURACY MODE CALL GETMOD ( MODE ) T1 = T * 3652 5.D0 *     ================================================================= *     EVALUATE NUTATION SERIES *     RESULTING NUTATION IN LONGITUDE AND OBLIQUITY IN ARCSECONDS *     CALL SUBROUTINE TO EVALUATE NUTATION SERIES IF ( MOD ( MODE , 2 ) . EQ . 0 ) THEN *         HIGH ACCURACY MODE -- IERS SUBROUTINE CALL NU2000A ( T0 , T1 , DP , DE ) ELSE *         LOW ACCURACY MODE -- MODIFICATION OF IERS SUBROUTINE CALL NU2000K ( T0 , T1 , DP , DE ) END IF DPSI = DP * SECCON DEPS = DE * SECCON *     ================================================================= RETURN END SUBROUTINE NU2000A ( DATE1 , DATE2 , DPSI , DEPS ) *+ *  - - - - - - - - *   N U 2 0 0 0 A *  - - - - - - - - * *  Nutation, IAU 2000A model (MHB_2000 without FCN). * *  Annexe to IERS Conventions 2000, Chapter 5 * *  Given: *     DATE1,DATE2    d   TT date (JD = DATE1+DATE2) * *  Returned: *     DPSI,DEPS      d   nutation (luni-solar + planetary, radians) * *  This revision:  2002 November 25 * *----------------------------------------------------------------------- IMPLICIT NONE DOUBLE PRECISION DATE1 , DATE2 , DPSI , DEPS *  Arcseconds to radians DOUBLE PRECISION DAS2R PARAMETER ( DAS2R = 4.848136811095359935899141D-6 ) *  Milliarcseconds to radians DOUBLE PRECISION DMAS2R PARAMETER ( DMAS2R = DAS2R / 1 D3 ) *  Arc seconds in a full circle DOUBLE PRECISION TURNAS PARAMETER ( TURNAS = 1296000 D0 ) *  2Pi DOUBLE PRECISION D2PI PARAMETER ( D2PI = 6.283185307179586476925287D0 ) *  Units of 0.1 microarcsecond to radians DOUBLE PRECISION U2R PARAMETER ( U2R = DAS2R / 1 D7 ) *  Reference epoch (J2000), JD DOUBLE PRECISION DJ0 PARAMETER ( DJ0 = 2451545 D0 ) *  Days per Julian century DOUBLE PRECISION DJC PARAMETER ( DJC = 36525 D0 ) *  Miscellaneous DOUBLE PRECISION T , EL , ELP , F , D , OM , ARG , DP , DE , SARG , CARG , : DPSILS , DEPSLS , : AL , ALSU , AF , AD , AOM , ALME , ALVE , ALEA , ALMA , : ALJU , ALSA , ALUR , ALNE , APA , DPSIPL , DEPSPL INTEGER I , J *  ------------------------- *  Luni-Solar nutation model *  ------------------------- *  Number of terms in the luni-solar nutation model INTEGER NLS PARAMETER ( NLS = 678 ) *  Coefficients for fundamental arguments INTEGER NALS ( 5 , NLS ) *  Longitude and obliquity coefficients DOUBLE PRECISION CLS ( 6 , NLS ) *  --------------- *  Planetary terms *  --------------- *  Number of terms in the planetary nutation model INTEGER NPL PARAMETER ( NPL = 687 ) *  Coefficients for fundamental arguments INTEGER NAPL ( 14 , NPL ) *  Longitude and obliquity coefficients INTEGER ICPL ( 4 , NPL ) *  ---------------------------------------- *  Tables of argument and term coefficients *  ---------------------------------------- * *  Luni-Solar argument multipliers: *               L     L'    F     D     Om DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 1 , 10 ) / : 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 2 , - 2 , 2 , : 0 , 0 , 2 , 0 , 2 , : 0 , 0 , 0 , 0 , 2 , : 0 , 1 , 0 , 0 , 0 , : 0 , 1 , 2 , - 2 , 2 , : 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 1 , : 1 , 0 , 2 , 0 , 2 , : 0 , - 1 , 2 , - 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 11 , 20 ) / : 0 , 0 , 2 , - 2 , 1 , : - 1 , 0 , 2 , 0 , 2 , : - 1 , 0 , 0 , 2 , 0 , : 1 , 0 , 0 , 0 , 1 , : - 1 , 0 , 0 , 0 , 1 , : - 1 , 0 , 2 , 2 , 2 , : 1 , 0 , 2 , 0 , 1 , : - 2 , 0 , 2 , 0 , 1 , : 0 , 0 , 0 , 2 , 0 , : 0 , 0 , 2 , 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 21 , 30 ) / : 0 , - 2 , 2 , - 2 , 2 , : - 2 , 0 , 0 , 2 , 0 , : 2 , 0 , 2 , 0 , 2 , : 1 , 0 , 2 , - 2 , 2 , : - 1 , 0 , 2 , 0 , 1 , : 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 0 , : 0 , 1 , 0 , 0 , 1 , : - 1 , 0 , 0 , 2 , 1 , : 0 , 2 , 2 , - 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 31 , 40 ) / : 0 , 0 , - 2 , 2 , 0 , : 1 , 0 , 0 , - 2 , 1 , : 0 , - 1 , 0 , 0 , 1 , : - 1 , 0 , 2 , 2 , 1 , : 0 , 2 , 0 , 0 , 0 , : 1 , 0 , 2 , 2 , 2 , : - 2 , 0 , 2 , 0 , 0 , : 0 , 1 , 2 , 0 , 2 , : 0 , 0 , 2 , 2 , 1 , : 0 , - 1 , 2 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 41 , 50 ) / : 0 , 0 , 0 , 2 , 1 , : 1 , 0 , 2 , - 2 , 1 , : 2 , 0 , 2 , - 2 , 2 , : - 2 , 0 , 0 , 2 , 1 , : 2 , 0 , 2 , 0 , 1 , : 0 , - 1 , 2 , - 2 , 1 , : 0 , 0 , 0 , - 2 , 1 , : - 1 , - 1 , 0 , 2 , 0 , : 2 , 0 , 0 , - 2 , 1 , : 1 , 0 , 0 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 51 , 60 ) / : 0 , 1 , 2 , - 2 , 1 , : 1 , - 1 , 0 , 0 , 0 , : - 2 , 0 , 2 , 0 , 2 , : 3 , 0 , 2 , 0 , 2 , : 0 , - 1 , 0 , 2 , 0 , : 1 , - 1 , 2 , 0 , 2 , : 0 , 0 , 0 , 1 , 0 , : - 1 , - 1 , 2 , 2 , 2 , : - 1 , 0 , 2 , 0 , 0 , : 0 , - 1 , 2 , 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 61 , 70 ) / : - 2 , 0 , 0 , 0 , 1 , : 1 , 1 , 2 , 0 , 2 , : 2 , 0 , 0 , 0 , 1 , : - 1 , 1 , 0 , 1 , 0 , : 1 , 1 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 0 , : - 1 , 0 , 2 , - 2 , 1 , : 1 , 0 , 0 , 0 , 2 , : - 1 , 0 , 0 , 1 , 0 , : 0 , 0 , 2 , 1 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 71 , 80 ) / : - 1 , 0 , 2 , 4 , 2 , : - 1 , 1 , 0 , 1 , 1 , : 0 , - 2 , 2 , - 2 , 1 , : 1 , 0 , 2 , 2 , 1 , : - 2 , 0 , 2 , 2 , 2 , : - 1 , 0 , 0 , 0 , 2 , : 1 , 1 , 2 , - 2 , 2 , : - 2 , 0 , 2 , 4 , 2 , : - 1 , 0 , 4 , 0 , 2 , : 2 , 0 , 2 , - 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 81 , 90 ) / : 2 , 0 , 2 , 2 , 2 , : 1 , 0 , 0 , 2 , 1 , : 3 , 0 , 0 , 0 , 0 , : 3 , 0 , 2 , - 2 , 2 , : 0 , 0 , 4 , - 2 , 2 , : 0 , 1 , 2 , 0 , 1 , : 0 , 0 , - 2 , 2 , 1 , : 0 , 0 , 2 , - 2 , 3 , : - 1 , 0 , 0 , 4 , 0 , : 2 , 0 , - 2 , 0 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 91 , 100 ) / : - 2 , 0 , 0 , 4 , 0 , : - 1 , - 1 , 0 , 2 , 1 , : - 1 , 0 , 0 , 1 , 1 , : 0 , 1 , 0 , 0 , 2 , : 0 , 0 , - 2 , 0 , 1 , : 0 , - 1 , 2 , 0 , 1 , : 0 , 0 , 2 , - 1 , 2 , : 0 , 0 , 2 , 4 , 2 , : - 2 , - 1 , 0 , 2 , 0 , : 1 , 1 , 0 , - 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 101 , 110 ) / : - 1 , 1 , 0 , 2 , 0 , : - 1 , 1 , 0 , 1 , 2 , : 1 , - 1 , 0 , 0 , 1 , : 1 , - 1 , 2 , 2 , 2 , : - 1 , 1 , 2 , 2 , 2 , : 3 , 0 , 2 , 0 , 1 , : 0 , 1 , - 2 , 2 , 0 , : - 1 , 0 , 0 , - 2 , 1 , : 0 , 1 , 2 , 2 , 2 , : - 1 , - 1 , 2 , 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 111 , 120 ) / : 0 , - 1 , 0 , 0 , 2 , : 1 , 0 , 2 , - 4 , 1 , : - 1 , 0 , - 2 , 2 , 0 , : 0 , - 1 , 2 , 2 , 1 , : 2 , - 1 , 2 , 0 , 2 , : 0 , 0 , 0 , 2 , 2 , : 1 , - 1 , 2 , 0 , 1 , : - 1 , 1 , 2 , 0 , 2 , : 0 , 1 , 0 , 2 , 0 , : 0 , - 1 , - 2 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 121 , 130 ) / : 0 , 3 , 2 , - 2 , 2 , : 0 , 0 , 0 , 1 , 1 , : - 1 , 0 , 2 , 2 , 0 , : 2 , 1 , 2 , 0 , 2 , : 1 , 1 , 0 , 0 , 1 , : 1 , 1 , 2 , 0 , 1 , : 2 , 0 , 0 , 2 , 0 , : 1 , 0 , - 2 , 2 , 0 , : - 1 , 0 , 0 , 2 , 2 , : 0 , 1 , 0 , 1 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 131 , 140 ) / : 0 , 1 , 0 , - 2 , 1 , : - 1 , 0 , 2 , - 2 , 2 , : 0 , 0 , 0 , - 1 , 1 , : - 1 , 1 , 0 , 0 , 1 , : 1 , 0 , 2 , - 1 , 2 , : 1 , - 1 , 0 , 2 , 0 , : 0 , 0 , 0 , 4 , 0 , : 1 , 0 , 2 , 1 , 2 , : 0 , 0 , 2 , 1 , 1 , : 1 , 0 , 0 , - 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 141 , 150 ) / : - 1 , 0 , 2 , 4 , 1 , : 1 , 0 , - 2 , 0 , 1 , : 1 , 1 , 2 , - 2 , 1 , : 0 , 0 , 2 , 2 , 0 , : - 1 , 0 , 2 , - 1 , 1 , : - 2 , 0 , 2 , 2 , 1 , : 4 , 0 , 2 , 0 , 2 , : 2 , - 1 , 0 , 0 , 0 , : 2 , 1 , 2 , - 2 , 2 , : 0 , 1 , 2 , 1 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 151 , 160 ) / : 1 , 0 , 4 , - 2 , 2 , : - 1 , - 1 , 0 , 0 , 1 , : 0 , 1 , 0 , 2 , 1 , : - 2 , 0 , 2 , 4 , 1 , : 2 , 0 , 2 , 0 , 0 , : 1 , 0 , 0 , 1 , 0 , : - 1 , 0 , 0 , 4 , 1 , : - 1 , 0 , 4 , 0 , 1 , : 2 , 0 , 2 , 2 , 1 , : 0 , 0 , 2 , - 3 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 161 , 170 ) / : - 1 , - 2 , 0 , 2 , 0 , : 2 , 1 , 0 , 0 , 0 , : 0 , 0 , 4 , 0 , 2 , : 0 , 0 , 0 , 0 , 3 , : 0 , 3 , 0 , 0 , 0 , : 0 , 0 , 2 , - 4 , 1 , : 0 , - 1 , 0 , 2 , 1 , : 0 , 0 , 0 , 4 , 1 , : - 1 , - 1 , 2 , 4 , 2 , : 1 , 0 , 2 , 4 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 171 , 180 ) / : - 2 , 2 , 0 , 2 , 0 , : - 2 , - 1 , 2 , 0 , 1 , : - 2 , 0 , 0 , 2 , 2 , : - 1 , - 1 , 2 , 0 , 2 , : 0 , 0 , 4 , - 2 , 1 , : 3 , 0 , 2 , - 2 , 1 , : - 2 , - 1 , 0 , 2 , 1 , : 1 , 0 , 0 , - 1 , 1 , : 0 , - 2 , 0 , 2 , 0 , : - 2 , 0 , 0 , 4 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 181 , 190 ) / : - 3 , 0 , 0 , 0 , 1 , : 1 , 1 , 2 , 2 , 2 , : 0 , 0 , 2 , 4 , 1 , : 3 , 0 , 2 , 2 , 2 , : - 1 , 1 , 2 , - 2 , 1 , : 2 , 0 , 0 , - 4 , 1 , : 0 , 0 , 0 , - 2 , 2 , : 2 , 0 , 2 , - 4 , 1 , : - 1 , 1 , 0 , 2 , 1 , : 0 , 0 , 2 , - 1 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 191 , 200 ) / : 0 , - 2 , 2 , 2 , 2 , : 2 , 0 , 0 , 2 , 1 , : 4 , 0 , 2 , - 2 , 2 , : 2 , 0 , 0 , - 2 , 2 , : 0 , 2 , 0 , 0 , 1 , : 1 , 0 , 0 , - 4 , 1 , : 0 , 2 , 2 , - 2 , 1 , : - 3 , 0 , 0 , 4 , 0 , : - 1 , 1 , 2 , 0 , 1 , : - 1 , - 1 , 0 , 4 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 201 , 210 ) / : - 1 , - 2 , 2 , 2 , 2 , : - 2 , - 1 , 2 , 4 , 2 , : 1 , - 1 , 2 , 2 , 1 , : - 2 , 1 , 0 , 2 , 0 , : - 2 , 1 , 2 , 0 , 1 , : 2 , 1 , 0 , - 2 , 1 , : - 3 , 0 , 2 , 0 , 1 , : - 2 , 0 , 2 , - 2 , 1 , : - 1 , 1 , 0 , 2 , 2 , : 0 , - 1 , 2 , - 1 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 211 , 220 ) / : - 1 , 0 , 4 , - 2 , 2 , : 0 , - 2 , 2 , 0 , 2 , : - 1 , 0 , 2 , 1 , 2 , : 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 2 , 0 , 3 , : - 2 , 0 , 4 , 0 , 2 , : - 1 , 0 , - 2 , 0 , 1 , : - 1 , 1 , 2 , 2 , 1 , : 3 , 0 , 0 , 0 , 1 , : - 1 , 0 , 2 , 3 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 221 , 230 ) / : 2 , - 1 , 2 , 0 , 1 , : 0 , 1 , 2 , 2 , 1 , : 0 , - 1 , 2 , 4 , 2 , : 2 , - 1 , 2 , 2 , 2 , : 0 , 2 , - 2 , 2 , 0 , : - 1 , - 1 , 2 , - 1 , 1 , : 0 , - 2 , 0 , 0 , 1 , : 1 , 0 , 2 , - 4 , 2 , : 1 , - 1 , 0 , - 2 , 1 , : - 1 , - 1 , 2 , 0 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 231 , 240 ) / : 1 , - 1 , 2 , - 2 , 2 , : - 2 , - 1 , 0 , 4 , 0 , : - 1 , 0 , 0 , 3 , 0 , : - 2 , - 1 , 2 , 2 , 2 , : 0 , 2 , 2 , 0 , 2 , : 1 , 1 , 0 , 2 , 0 , : 2 , 0 , 2 , - 1 , 2 , : 1 , 0 , 2 , 1 , 1 , : 4 , 0 , 0 , 0 , 0 , : 2 , 1 , 2 , 0 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 241 , 250 ) / : 3 , - 1 , 2 , 0 , 2 , : - 2 , 2 , 0 , 2 , 1 , : 1 , 0 , 2 , - 3 , 1 , : 1 , 1 , 2 , - 4 , 1 , : - 1 , - 1 , 2 , - 2 , 1 , : 0 , - 1 , 0 , - 1 , 1 , : 0 , - 1 , 0 , - 2 , 1 , : - 2 , 0 , 0 , 0 , 2 , : - 2 , 0 , - 2 , 2 , 0 , : - 1 , 0 , - 2 , 4 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 251 , 260 ) / : 1 , - 2 , 0 , 0 , 0 , : 0 , 1 , 0 , 1 , 1 , : - 1 , 2 , 0 , 2 , 0 , : 1 , - 1 , 2 , - 2 , 1 , : 1 , 2 , 2 , - 2 , 2 , : 2 , - 1 , 2 , - 2 , 2 , : 1 , 0 , 2 , - 1 , 1 , : 2 , 1 , 2 , - 2 , 1 , : - 2 , 0 , 0 , - 2 , 1 , : 1 , - 2 , 2 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 261 , 270 ) / : 0 , 1 , 2 , 1 , 1 , : 1 , 0 , 4 , - 2 , 1 , : - 2 , 0 , 4 , 2 , 2 , : 1 , 1 , 2 , 1 , 2 , : 1 , 0 , 0 , 4 , 0 , : 1 , 0 , 2 , 2 , 0 , : 2 , 0 , 2 , 1 , 2 , : 3 , 1 , 2 , 0 , 2 , : 4 , 0 , 2 , 0 , 1 , : - 2 , - 1 , 2 , 0 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 271 , 280 ) / : 0 , 1 , - 2 , 2 , 1 , : 1 , 0 , - 2 , 1 , 0 , : 0 , - 1 , - 2 , 2 , 1 , : 2 , - 1 , 0 , - 2 , 1 , : - 1 , 0 , 2 , - 1 , 2 , : 1 , 0 , 2 , - 3 , 2 , : 0 , 1 , 2 , - 2 , 3 , : 0 , 0 , 2 , - 3 , 1 , : - 1 , 0 , - 2 , 2 , 1 , : 0 , 0 , 2 , - 4 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 281 , 290 ) / : - 2 , 1 , 0 , 0 , 1 , : - 1 , 0 , 0 , - 1 , 1 , : 2 , 0 , 2 , - 4 , 2 , : 0 , 0 , 4 , - 4 , 4 , : 0 , 0 , 4 , - 4 , 2 , : - 1 , - 2 , 0 , 2 , 1 , : - 2 , 0 , 0 , 3 , 0 , : 1 , 0 , - 2 , 2 , 1 , : - 3 , 0 , 2 , 2 , 2 , : - 3 , 0 , 2 , 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 291 , 300 ) / : - 2 , 0 , 2 , 2 , 0 , : 2 , - 1 , 0 , 0 , 1 , : - 2 , 1 , 2 , 2 , 2 , : 1 , 1 , 0 , 1 , 0 , : 0 , 1 , 4 , - 2 , 2 , : - 1 , 1 , 0 , - 2 , 1 , : 0 , 0 , 0 , - 4 , 1 , : 1 , - 1 , 0 , 2 , 1 , : 1 , 1 , 0 , 2 , 1 , : - 1 , 2 , 2 , 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 301 , 310 ) / : 3 , 1 , 2 , - 2 , 2 , : 0 , - 1 , 0 , 4 , 0 , : 2 , - 1 , 0 , 2 , 0 , : 0 , 0 , 4 , 0 , 1 , : 2 , 0 , 4 , - 2 , 2 , : - 1 , - 1 , 2 , 4 , 1 , : 1 , 0 , 0 , 4 , 1 , : 1 , - 2 , 2 , 2 , 2 , : 0 , 0 , 2 , 3 , 2 , : - 1 , 1 , 2 , 4 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 311 , 320 ) / : 3 , 0 , 0 , 2 , 0 , : - 1 , 0 , 4 , 2 , 2 , : 1 , 1 , 2 , 2 , 1 , : - 2 , 0 , 2 , 6 , 2 , : 2 , 1 , 2 , 2 , 2 , : - 1 , 0 , 2 , 6 , 2 , : 1 , 0 , 2 , 4 , 1 , : 2 , 0 , 2 , 4 , 2 , : 1 , 1 , - 2 , 1 , 0 , : - 3 , 1 , 2 , 1 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 321 , 330 ) / : 2 , 0 , - 2 , 0 , 2 , : - 1 , 0 , 0 , 1 , 2 , : - 4 , 0 , 2 , 2 , 1 , : - 1 , - 1 , 0 , 1 , 0 , : 0 , 0 , - 2 , 2 , 2 , : 1 , 0 , 0 , - 1 , 2 , : 0 , - 1 , 2 , - 2 , 3 , : - 2 , 1 , 2 , 0 , 0 , : 0 , 0 , 2 , - 2 , 4 , : - 2 , - 2 , 0 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 331 , 340 ) / : - 2 , 0 , - 2 , 4 , 0 , : 0 , - 2 , - 2 , 2 , 0 , : 1 , 2 , 0 , - 2 , 1 , : 3 , 0 , 0 , - 4 , 1 , : - 1 , 1 , 2 , - 2 , 2 , : 1 , - 1 , 2 , - 4 , 1 , : 1 , 1 , 0 , - 2 , 2 , : - 3 , 0 , 2 , 0 , 0 , : - 3 , 0 , 2 , 0 , 2 , : - 2 , 0 , 0 , 1 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 341 , 350 ) / : 0 , 0 , - 2 , 1 , 0 , : - 3 , 0 , 0 , 2 , 1 , : - 1 , - 1 , - 2 , 2 , 0 , : 0 , 1 , 2 , - 4 , 1 , : 2 , 1 , 0 , - 4 , 1 , : 0 , 2 , 0 , - 2 , 1 , : 1 , 0 , 0 , - 3 , 1 , : - 2 , 0 , 2 , - 2 , 2 , : - 2 , - 1 , 0 , 0 , 1 , : - 4 , 0 , 0 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 351 , 360 ) / : 1 , 1 , 0 , - 4 , 1 , : - 1 , 0 , 2 , - 4 , 1 , : 0 , 0 , 4 , - 4 , 1 , : 0 , 3 , 2 , - 2 , 2 , : - 3 , - 1 , 0 , 4 , 0 , : - 3 , 0 , 0 , 4 , 1 , : 1 , - 1 , - 2 , 2 , 0 , : - 1 , - 1 , 0 , 2 , 2 , : 1 , - 2 , 0 , 0 , 1 , : 1 , - 1 , 0 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 361 , 370 ) / : 0 , 0 , 0 , 1 , 2 , : - 1 , - 1 , 2 , 0 , 0 , : 1 , - 2 , 2 , - 2 , 2 , : 0 , - 1 , 2 , - 1 , 1 , : - 1 , 0 , 2 , 0 , 3 , : 1 , 1 , 0 , 0 , 2 , : - 1 , 1 , 2 , 0 , 0 , : 1 , 2 , 0 , 0 , 0 , : - 1 , 2 , 2 , 0 , 2 , : - 1 , 0 , 4 , - 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 371 , 380 ) / : 3 , 0 , 2 , - 4 , 2 , : 1 , 2 , 2 , - 2 , 1 , : 1 , 0 , 4 , - 4 , 2 , : - 2 , - 1 , 0 , 4 , 1 , : 0 , - 1 , 0 , 2 , 2 , : - 2 , 1 , 0 , 4 , 0 , : - 2 , - 1 , 2 , 2 , 1 , : 2 , 0 , - 2 , 2 , 0 , : 1 , 0 , 0 , 1 , 1 , : 0 , 1 , 0 , 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 381 , 390 ) / : 1 , - 1 , 2 , - 1 , 2 , : - 2 , 0 , 4 , 0 , 1 , : 2 , 1 , 0 , 0 , 1 , : 0 , 1 , 2 , 0 , 0 , : 0 , - 1 , 4 , - 2 , 2 , : 0 , 0 , 4 , - 2 , 4 , : 0 , 2 , 2 , 0 , 1 , : - 3 , 0 , 0 , 6 , 0 , : - 1 , - 1 , 0 , 4 , 1 , : 1 , - 2 , 0 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 391 , 400 ) / : - 1 , 0 , 0 , 4 , 2 , : - 1 , - 2 , 2 , 2 , 1 , : - 1 , 0 , 0 , - 2 , 2 , : 1 , 0 , - 2 , - 2 , 1 , : 0 , 0 , - 2 , - 2 , 1 , : - 2 , 0 , - 2 , 0 , 1 , : 0 , 0 , 0 , 3 , 1 , : 0 , 0 , 0 , 3 , 0 , : - 1 , 1 , 0 , 4 , 0 , : - 1 , - 1 , 2 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 401 , 410 ) / : - 2 , 0 , 2 , 3 , 2 , : 1 , 0 , 0 , 2 , 2 , : 0 , - 1 , 2 , 1 , 2 , : 3 , - 1 , 0 , 0 , 0 , : 2 , 0 , 0 , 1 , 0 , : 1 , - 1 , 2 , 0 , 0 , : 0 , 0 , 2 , 1 , 0 , : 1 , 0 , 2 , 0 , 3 , : 3 , 1 , 0 , 0 , 0 , : 3 , - 1 , 2 , - 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 411 , 420 ) / : 2 , 0 , 2 , - 1 , 1 , : 1 , 1 , 2 , 0 , 0 , : 0 , 0 , 4 , - 1 , 2 , : 1 , 2 , 2 , 0 , 2 , : - 2 , 0 , 0 , 6 , 0 , : 0 , - 1 , 0 , 4 , 1 , : - 2 , - 1 , 2 , 4 , 1 , : 0 , - 2 , 2 , 2 , 1 , : 0 , - 1 , 2 , 2 , 0 , : - 1 , 0 , 2 , 3 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 421 , 430 ) / : - 2 , 1 , 2 , 4 , 2 , : 2 , 0 , 0 , 2 , 2 , : 2 , - 2 , 2 , 0 , 2 , : - 1 , 1 , 2 , 3 , 2 , : 3 , 0 , 2 , - 1 , 2 , : 4 , 0 , 2 , - 2 , 1 , : - 1 , 0 , 0 , 6 , 0 , : - 1 , - 2 , 2 , 4 , 2 , : - 3 , 0 , 2 , 6 , 2 , : - 1 , 0 , 2 , 4 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 431 , 440 ) / : 3 , 0 , 0 , 2 , 1 , : 3 , - 1 , 2 , 0 , 1 , : 3 , 0 , 2 , 0 , 0 , : 1 , 0 , 4 , 0 , 2 , : 5 , 0 , 2 , - 2 , 2 , : 0 , - 1 , 2 , 4 , 1 , : 2 , - 1 , 2 , 2 , 1 , : 0 , 1 , 2 , 4 , 2 , : 1 , - 1 , 2 , 4 , 2 , : 3 , - 1 , 2 , 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 441 , 450 ) / : 3 , 0 , 2 , 2 , 1 , : 5 , 0 , 2 , 0 , 2 , : 0 , 0 , 2 , 6 , 2 , : 4 , 0 , 2 , 2 , 2 , : 0 , - 1 , 1 , - 1 , 1 , : - 1 , 0 , 1 , 0 , 3 , : 0 , - 2 , 2 , - 2 , 3 , : 1 , 0 , - 1 , 0 , 1 , : 2 , - 2 , 0 , - 2 , 1 , : - 1 , 0 , 1 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 451 , 460 ) / : - 1 , 0 , 1 , 0 , 1 , : - 1 , - 1 , 2 , - 1 , 2 , : - 2 , 2 , 0 , 2 , 2 , : - 1 , 0 , 1 , 0 , 0 , : - 4 , 1 , 2 , 2 , 2 , : - 3 , 0 , 2 , 1 , 1 , : - 2 , - 1 , 2 , 0 , 2 , : 1 , 0 , - 2 , 1 , 1 , : 2 , - 1 , - 2 , 0 , 1 , : - 4 , 0 , 2 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 461 , 470 ) / : - 3 , 1 , 0 , 3 , 0 , : - 1 , 0 , - 1 , 2 , 0 , : 0 , - 2 , 0 , 0 , 2 , : 0 , - 2 , 0 , 0 , 2 , : - 3 , 0 , 0 , 3 , 0 , : - 2 , - 1 , 0 , 2 , 2 , : - 1 , 0 , - 2 , 3 , 0 , : - 4 , 0 , 0 , 4 , 0 , : 2 , 1 , - 2 , 0 , 1 , : 2 , - 1 , 0 , - 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 471 , 480 ) / : 0 , 0 , 1 , - 1 , 0 , : - 1 , 2 , 0 , 1 , 0 , : - 2 , 1 , 2 , 0 , 2 , : 1 , 1 , 0 , - 1 , 1 , : 1 , 0 , 1 , - 2 , 1 , : 0 , 2 , 0 , 0 , 2 , : 1 , - 1 , 2 , - 3 , 1 , : - 1 , 1 , 2 , - 1 , 1 , : - 2 , 0 , 4 , - 2 , 2 , : - 2 , 0 , 4 , - 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 481 , 490 ) / : - 2 , - 2 , 0 , 2 , 1 , : - 2 , 0 , - 2 , 4 , 0 , : 1 , 2 , 2 , - 4 , 1 , : 1 , 1 , 2 , - 4 , 2 , : - 1 , 2 , 2 , - 2 , 1 , : 2 , 0 , 0 , - 3 , 1 , : - 1 , 2 , 0 , 0 , 1 , : 0 , 0 , 0 , - 2 , 0 , : - 1 , - 1 , 2 , - 2 , 2 , : - 1 , 1 , 0 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 491 , 500 ) / : 0 , 0 , 0 , - 1 , 2 , : - 2 , 1 , 0 , 1 , 0 , : 1 , - 2 , 0 , - 2 , 1 , : 1 , 0 , - 2 , 0 , 2 , : - 3 , 1 , 0 , 2 , 0 , : - 1 , 1 , - 2 , 2 , 0 , : - 1 , - 1 , 0 , 0 , 2 , : - 3 , 0 , 0 , 2 , 0 , : - 3 , - 1 , 0 , 2 , 0 , : 2 , 0 , 2 , - 6 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 501 , 510 ) / : 0 , 1 , 2 , - 4 , 2 , : 2 , 0 , 0 , - 4 , 2 , : - 2 , 1 , 2 , - 2 , 1 , : 0 , - 1 , 2 , - 4 , 1 , : 0 , 1 , 0 , - 2 , 2 , : - 1 , 0 , 0 , - 2 , 0 , : 2 , 0 , - 2 , - 2 , 1 , : - 4 , 0 , 2 , 0 , 1 , : - 1 , - 1 , 0 , - 1 , 1 , : 0 , 0 , - 2 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 511 , 520 ) / : - 3 , 0 , 0 , 1 , 0 , : - 1 , 0 , - 2 , 1 , 0 , : - 2 , 0 , - 2 , 2 , 1 , : 0 , 0 , - 4 , 2 , 0 , : - 2 , - 1 , - 2 , 2 , 0 , : 1 , 0 , 2 , - 6 , 1 , : - 1 , 0 , 2 , - 4 , 2 , : 1 , 0 , 0 , - 4 , 2 , : 2 , 1 , 2 , - 4 , 2 , : 2 , 1 , 2 , - 4 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 521 , 530 ) / : 0 , 1 , 4 , - 4 , 4 , : 0 , 1 , 4 , - 4 , 2 , : - 1 , - 1 , - 2 , 4 , 0 , : - 1 , - 3 , 0 , 2 , 0 , : - 1 , 0 , - 2 , 4 , 1 , : - 2 , - 1 , 0 , 3 , 0 , : 0 , 0 , - 2 , 3 , 0 , : - 2 , 0 , 0 , 3 , 1 , : 0 , - 1 , 0 , 1 , 0 , : - 3 , 0 , 2 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 531 , 540 ) / : 1 , 1 , - 2 , 2 , 0 , : - 1 , 1 , 0 , 2 , 2 , : 1 , - 2 , 2 , - 2 , 1 , : 0 , 0 , 1 , 0 , 2 , : 0 , 0 , 1 , 0 , 1 , : 0 , 0 , 1 , 0 , 0 , : - 1 , 2 , 0 , 2 , 1 , : 0 , 0 , 2 , 0 , 2 , : - 2 , 0 , 2 , 0 , 2 , : 2 , 0 , 0 , - 1 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 541 , 550 ) / : 3 , 0 , 0 , - 2 , 1 , : 1 , 0 , 2 , - 2 , 3 , : 1 , 2 , 0 , 0 , 1 , : 2 , 0 , 2 , - 3 , 2 , : - 1 , 1 , 4 , - 2 , 2 , : - 2 , - 2 , 0 , 4 , 0 , : 0 , - 3 , 0 , 2 , 0 , : 0 , 0 , - 2 , 4 , 0 , : - 1 , - 1 , 0 , 3 , 0 , : - 2 , 0 , 0 , 4 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 551 , 560 ) / : - 1 , 0 , 0 , 3 , 1 , : 2 , - 2 , 0 , 0 , 0 , : 1 , - 1 , 0 , 1 , 0 , : - 1 , 0 , 0 , 2 , 0 , : 0 , - 2 , 2 , 0 , 1 , : - 1 , 0 , 1 , 2 , 1 , : - 1 , 1 , 0 , 3 , 0 , : - 1 , - 1 , 2 , 1 , 2 , : 0 , - 1 , 2 , 0 , 0 , : - 2 , 1 , 2 , 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 561 , 570 ) / : 2 , - 2 , 2 , - 2 , 2 , : 1 , 1 , 0 , 1 , 1 , : 1 , 0 , 1 , 0 , 1 , : 1 , 0 , 1 , 0 , 0 , : 0 , 2 , 0 , 2 , 0 , : 2 , - 1 , 2 , - 2 , 1 , : 0 , - 1 , 4 , - 2 , 1 , : 0 , 0 , 4 , - 2 , 3 , : 0 , 1 , 4 , - 2 , 1 , : 4 , 0 , 2 , - 4 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 571 , 580 ) / : 2 , 2 , 2 , - 2 , 2 , : 2 , 0 , 4 , - 4 , 2 , : - 1 , - 2 , 0 , 4 , 0 , : - 1 , - 3 , 2 , 2 , 2 , : - 3 , 0 , 2 , 4 , 2 , : - 3 , 0 , 2 , - 2 , 1 , : - 1 , - 1 , 0 , - 2 , 1 , : - 3 , 0 , 0 , 0 , 2 , : - 3 , 0 , - 2 , 2 , 0 , : 0 , 1 , 0 , - 4 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 581 , 590 ) / : - 2 , 1 , 0 , - 2 , 1 , : - 4 , 0 , 0 , 0 , 1 , : - 1 , 0 , 0 , - 4 , 1 , : - 3 , 0 , 0 , - 2 , 1 , : 0 , 0 , 0 , 3 , 2 , : - 1 , 1 , 0 , 4 , 1 , : 1 , - 2 , 2 , 0 , 1 , : 0 , 1 , 0 , 3 , 0 , : - 1 , 0 , 2 , 2 , 3 , : 0 , 0 , 2 , 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 591 , 600 ) / : - 2 , 0 , 2 , 2 , 2 , : - 1 , 1 , 2 , 2 , 0 , : 3 , 0 , 0 , 0 , 2 , : 2 , 1 , 0 , 1 , 0 , : 2 , - 1 , 2 , - 1 , 2 , : 0 , 0 , 2 , 0 , 1 , : 0 , 0 , 3 , 0 , 3 , : 0 , 0 , 3 , 0 , 2 , : - 1 , 2 , 2 , 2 , 1 , : - 1 , 0 , 4 , 0 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 601 , 610 ) / : 1 , 2 , 2 , 0 , 1 , : 3 , 1 , 2 , - 2 , 1 , : 1 , 1 , 4 , - 2 , 2 , : - 2 , - 1 , 0 , 6 , 0 , : 0 , - 2 , 0 , 4 , 0 , : - 2 , 0 , 0 , 6 , 1 , : - 2 , - 2 , 2 , 4 , 2 , : 0 , - 3 , 2 , 2 , 2 , : 0 , 0 , 0 , 4 , 2 , : - 1 , - 1 , 2 , 3 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 611 , 620 ) / : - 2 , 0 , 2 , 4 , 0 , : 2 , - 1 , 0 , 2 , 1 , : 1 , 0 , 0 , 3 , 0 , : 0 , 1 , 0 , 4 , 1 , : 0 , 1 , 0 , 4 , 0 , : 1 , - 1 , 2 , 1 , 2 , : 0 , 0 , 2 , 2 , 3 , : 1 , 0 , 2 , 2 , 2 , : - 1 , 0 , 2 , 2 , 2 , : - 2 , 0 , 4 , 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 621 , 630 ) / : 2 , 1 , 0 , 2 , 1 , : 2 , 1 , 0 , 2 , 0 , : 2 , - 1 , 2 , 0 , 0 , : 1 , 0 , 2 , 1 , 0 , : 0 , 1 , 2 , 2 , 0 , : 2 , 0 , 2 , 0 , 3 , : 3 , 0 , 2 , 0 , 2 , : 1 , 0 , 2 , 0 , 2 , : 1 , 0 , 3 , 0 , 3 , : 1 , 1 , 2 , 1 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 631 , 640 ) / : 0 , 2 , 2 , 2 , 2 , : 2 , 1 , 2 , 0 , 0 , : 2 , 0 , 4 , - 2 , 1 , : 4 , 1 , 2 , - 2 , 2 , : - 1 , - 1 , 0 , 6 , 0 , : - 3 , - 1 , 2 , 6 , 2 , : - 1 , 0 , 0 , 6 , 1 , : - 3 , 0 , 2 , 6 , 1 , : 1 , - 1 , 0 , 4 , 1 , : 1 , - 1 , 0 , 4 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 641 , 650 ) / : - 2 , 0 , 2 , 5 , 2 , : 1 , - 2 , 2 , 2 , 1 , : 3 , - 1 , 0 , 2 , 0 , : 1 , - 1 , 2 , 2 , 0 , : 0 , 0 , 2 , 3 , 1 , : - 1 , 1 , 2 , 4 , 1 , : 0 , 1 , 2 , 3 , 2 , : - 1 , 0 , 4 , 2 , 1 , : 2 , 0 , 2 , 1 , 1 , : 5 , 0 , 0 , 0 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 651 , 660 ) / : 2 , 1 , 2 , 1 , 2 , : 1 , 0 , 4 , 0 , 1 , : 3 , 1 , 2 , 0 , 1 , : 3 , 0 , 4 , - 2 , 2 , : - 2 , - 1 , 2 , 6 , 2 , : 0 , 0 , 0 , 6 , 0 , : 0 , - 2 , 2 , 4 , 2 , : - 2 , 0 , 2 , 6 , 1 , : 2 , 0 , 0 , 4 , 1 , : 2 , 0 , 0 , 4 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 661 , 670 ) / : 2 , - 2 , 2 , 2 , 2 , : 0 , 0 , 2 , 4 , 0 , : 1 , 0 , 2 , 3 , 2 , : 4 , 0 , 0 , 2 , 0 , : 2 , 0 , 2 , 2 , 0 , : 0 , 0 , 4 , 2 , 2 , : 4 , - 1 , 2 , 0 , 2 , : 3 , 0 , 2 , 1 , 2 , : 2 , 1 , 2 , 2 , 1 , : 4 , 1 , 2 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 671 , 678 ) / : - 1 , - 1 , 2 , 6 , 2 , : - 1 , 0 , 2 , 6 , 1 , : 1 , - 1 , 2 , 4 , 1 , : 1 , 1 , 2 , 4 , 2 , : 3 , 1 , 2 , 2 , 2 , : 5 , 0 , 2 , 0 , 1 , : 2 , - 1 , 2 , 4 , 2 , : 2 , 0 , 2 , 4 , 1 / * *  Luni-Solar nutation coefficients, unit 1e-7 arcsec: *  longitude (sin, t*sin, cos), obliquity (cos, t*cos, sin) * DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 1 , 10 ) / : - 172064161 D0 , - 174666 D0 , 33386 D0 , 92052331 D0 , 9086 D0 , 15377 D0 , : - 13170906 D0 , - 1675 D0 , - 13696 D0 , 5730336 D0 , - 3015 D0 , - 4587 D0 , : - 2276413 D0 , - 234 D0 , 2796 D0 , 978459 D0 , - 485 D0 , 1374 D0 , : 2074554 D0 , 207 D0 , - 698 D0 , - 897492 D0 , 470 D0 , - 291 D0 , : 1475877 D0 , - 3633 D0 , 11817 D0 , 73871 D0 , - 184 D0 , - 1924 D0 , : - 516821 D0 , 1226 D0 , - 524 D0 , 224386 D0 , - 677 D0 , - 174 D0 , : 711159 D0 , 73 D0 , - 872 D0 , - 6750 D0 , 0 D0 , 358 D0 , : - 387298 D0 , - 367 D0 , 380 D0 , 200728 D0 , 18 D0 , 318 D0 , : - 301461 D0 , - 36 D0 , 816 D0 , 129025 D0 , - 63 D0 , 367 D0 , : 215829 D0 , - 494 D0 , 111 D0 , - 95929 D0 , 299 D0 , 132 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 11 , 20 ) / : 128227 D0 , 137 D0 , 181 D0 , - 68982 D0 , - 9 D0 , 39 D0 , : 123457 D0 , 11 D0 , 19 D0 , - 53311 D0 , 32 D0 , - 4 D0 , : 156994 D0 , 10 D0 , - 168 D0 , - 1235 D0 , 0 D0 , 82 D0 , : 63110 D0 , 63 D0 , 27 D0 , - 33228 D0 , 0 D0 , - 9 D0 , : - 57976 D0 , - 63 D0 , - 189 D0 , 31429 D0 , 0 D0 , - 75 D0 , : - 59641 D0 , - 11 D0 , 149 D0 , 25543 D0 , - 11 D0 , 66 D0 , : - 51613 D0 , - 42 D0 , 129 D0 , 26366 D0 , 0 D0 , 78 D0 , : 45893 D0 , 50 D0 , 31 D0 , - 24236 D0 , - 10 D0 , 20 D0 , : 63384 D0 , 11 D0 , - 150 D0 , - 1220 D0 , 0 D0 , 29 D0 , : - 38571 D0 , - 1 D0 , 158 D0 , 16452 D0 , - 11 D0 , 68 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 21 , 30 ) / : 32481 D0 , 0 D0 , 0 D0 , - 13870 D0 , 0 D0 , 0 D0 , : - 47722 D0 , 0 D0 , - 18 D0 , 477 D0 , 0 D0 , - 25 D0 , : - 31046 D0 , - 1 D0 , 131 D0 , 13238 D0 , - 11 D0 , 59 D0 , : 28593 D0 , 0 D0 , - 1 D0 , - 12338 D0 , 10 D0 , - 3 D0 , : 20441 D0 , 21 D0 , 10 D0 , - 10758 D0 , 0 D0 , - 3 D0 , : 29243 D0 , 0 D0 , - 74 D0 , - 609 D0 , 0 D0 , 13 D0 , : 25887 D0 , 0 D0 , - 66 D0 , - 550 D0 , 0 D0 , 11 D0 , : - 14053 D0 , - 25 D0 , 79 D0 , 8551 D0 , - 2 D0 , - 45 D0 , : 15164 D0 , 10 D0 , 11 D0 , - 8001 D0 , 0 D0 , - 1 D0 , : - 15794 D0 , 72 D0 , - 16 D0 , 6850 D0 , - 42 D0 , - 5 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 31 , 40 ) / : 21783 D0 , 0 D0 , 13 D0 , - 167 D0 , 0 D0 , 13 D0 , : - 12873 D0 , - 10 D0 , - 37 D0 , 6953 D0 , 0 D0 , - 14 D0 , : - 12654 D0 , 11 D0 , 63 D0 , 6415 D0 , 0 D0 , 26 D0 , : - 10204 D0 , 0 D0 , 25 D0 , 5222 D0 , 0 D0 , 15 D0 , : 16707 D0 , - 85 D0 , - 10 D0 , 168 D0 , - 1 D0 , 10 D0 , : - 7691 D0 , 0 D0 , 44 D0 , 3268 D0 , 0 D0 , 19 D0 , : - 11024 D0 , 0 D0 , - 14 D0 , 104 D0 , 0 D0 , 2 D0 , : 7566 D0 , - 21 D0 , - 11 D0 , - 3250 D0 , 0 D0 , - 5 D0 , : - 6637 D0 , - 11 D0 , 25 D0 , 3353 D0 , 0 D0 , 14 D0 , : - 7141 D0 , 21 D0 , 8 D0 , 3070 D0 , 0 D0 , 4 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 41 , 50 ) / : - 6302 D0 , - 11 D0 , 2 D0 , 3272 D0 , 0 D0 , 4 D0 , : 5800 D0 , 10 D0 , 2 D0 , - 3045 D0 , 0 D0 , - 1 D0 , : 6443 D0 , 0 D0 , - 7 D0 , - 2768 D0 , 0 D0 , - 4 D0 , : - 5774 D0 , - 11 D0 , - 15 D0 , 3041 D0 , 0 D0 , - 5 D0 , : - 5350 D0 , 0 D0 , 21 D0 , 2695 D0 , 0 D0 , 12 D0 , : - 4752 D0 , - 11 D0 , - 3 D0 , 2719 D0 , 0 D0 , - 3 D0 , : - 4940 D0 , - 11 D0 , - 21 D0 , 2720 D0 , 0 D0 , - 9 D0 , : 7350 D0 , 0 D0 , - 8 D0 , - 51 D0 , 0 D0 , 4 D0 , : 4065 D0 , 0 D0 , 6 D0 , - 2206 D0 , 0 D0 , 1 D0 , : 6579 D0 , 0 D0 , - 24 D0 , - 199 D0 , 0 D0 , 2 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 51 , 60 ) / : 3579 D0 , 0 D0 , 5 D0 , - 1900 D0 , 0 D0 , 1 D0 , : 4725 D0 , 0 D0 , - 6 D0 , - 41 D0 , 0 D0 , 3 D0 , : - 3075 D0 , 0 D0 , - 2 D0 , 1313 D0 , 0 D0 , - 1 D0 , : - 2904 D0 , 0 D0 , 15 D0 , 1233 D0 , 0 D0 , 7 D0 , : 4348 D0 , 0 D0 , - 10 D0 , - 81 D0 , 0 D0 , 2 D0 , : - 2878 D0 , 0 D0 , 8 D0 , 1232 D0 , 0 D0 , 4 D0 , : - 4230 D0 , 0 D0 , 5 D0 , - 20 D0 , 0 D0 , - 2 D0 , : - 2819 D0 , 0 D0 , 7 D0 , 1207 D0 , 0 D0 , 3 D0 , : - 4056 D0 , 0 D0 , 5 D0 , 40 D0 , 0 D0 , - 2 D0 , : - 2647 D0 , 0 D0 , 11 D0 , 1129 D0 , 0 D0 , 5 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 61 , 70 ) / : - 2294 D0 , 0 D0 , - 10 D0 , 1266 D0 , 0 D0 , - 4 D0 , : 2481 D0 , 0 D0 , - 7 D0 , - 1062 D0 , 0 D0 , - 3 D0 , : 2179 D0 , 0 D0 , - 2 D0 , - 1129 D0 , 0 D0 , - 2 D0 , : 3276 D0 , 0 D0 , 1 D0 , - 9 D0 , 0 D0 , 0 D0 , : - 3389 D0 , 0 D0 , 5 D0 , 35 D0 , 0 D0 , - 2 D0 , : 3339 D0 , 0 D0 , - 13 D0 , - 107 D0 , 0 D0 , 1 D0 , : - 1987 D0 , 0 D0 , - 6 D0 , 1073 D0 , 0 D0 , - 2 D0 , : - 1981 D0 , 0 D0 , 0 D0 , 854 D0 , 0 D0 , 0 D0 , : 4026 D0 , 0 D0 , - 353 D0 , - 553 D0 , 0 D0 , - 139 D0 , : 1660 D0 , 0 D0 , - 5 D0 , - 710 D0 , 0 D0 , - 2 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 71 , 80 ) / : - 1521 D0 , 0 D0 , 9 D0 , 647 D0 , 0 D0 , 4 D0 , : 1314 D0 , 0 D0 , 0 D0 , - 700 D0 , 0 D0 , 0 D0 , : - 1283 D0 , 0 D0 , 0 D0 , 672 D0 , 0 D0 , 0 D0 , : - 1331 D0 , 0 D0 , 8 D0 , 663 D0 , 0 D0 , 4 D0 , : 1383 D0 , 0 D0 , - 2 D0 , - 594 D0 , 0 D0 , - 2 D0 , : 1405 D0 , 0 D0 , 4 D0 , - 610 D0 , 0 D0 , 2 D0 , : 1290 D0 , 0 D0 , 0 D0 , - 556 D0 , 0 D0 , 0 D0 , : - 1214 D0 , 0 D0 , 5 D0 , 518 D0 , 0 D0 , 2 D0 , : 1146 D0 , 0 D0 , - 3 D0 , - 490 D0 , 0 D0 , - 1 D0 , : 1019 D0 , 0 D0 , - 1 D0 , - 527 D0 , 0 D0 , - 1 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 81 , 90 ) / : - 1100 D0 , 0 D0 , 9 D0 , 465 D0 , 0 D0 , 4 D0 , : - 970 D0 , 0 D0 , 2 D0 , 496 D0 , 0 D0 , 1 D0 , : 1575 D0 , 0 D0 , - 6 D0 , - 50 D0 , 0 D0 , 0 D0 , : 934 D0 , 0 D0 , - 3 D0 , - 399 D0 , 0 D0 , - 1 D0 , : 922 D0 , 0 D0 , - 1 D0 , - 395 D0 , 0 D0 , - 1 D0 , : 815 D0 , 0 D0 , - 1 D0 , - 422 D0 , 0 D0 , - 1 D0 , : 834 D0 , 0 D0 , 2 D0 , - 440 D0 , 0 D0 , 1 D0 , : 1248 D0 , 0 D0 , 0 D0 , - 170 D0 , 0 D0 , 1 D0 , : 1338 D0 , 0 D0 , - 5 D0 , - 39 D0 , 0 D0 , 0 D0 , : 716 D0 , 0 D0 , - 2 D0 , - 389 D0 , 0 D0 , - 1 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 91 , 100 ) / : 1282 D0 , 0 D0 , - 3 D0 , - 23 D0 , 0 D0 , 1 D0 , : 742 D0 , 0 D0 , 1 D0 , - 391 D0 , 0 D0 , 0 D0 , : 1020 D0 , 0 D0 , - 25 D0 , - 495 D0 , 0 D0 , - 10 D0 , : 715 D0 , 0 D0 , - 4 D0 , - 326 D0 , 0 D0 , 2 D0 , : - 666 D0 , 0 D0 , - 3 D0 , 369 D0 , 0 D0 , - 1 D0 , : - 667 D0 , 0 D0 , 1 D0 , 346 D0 , 0 D0 , 1 D0 , : - 704 D0 , 0 D0 , 0 D0 , 304 D0 , 0 D0 , 0 D0 , : - 694 D0 , 0 D0 , 5 D0 , 294 D0 , 0 D0 , 2 D0 , : - 1014 D0 , 0 D0 , - 1 D0 , 4 D0 , 0 D0 , - 1 D0 , : - 585 D0 , 0 D0 , - 2 D0 , 316 D0 , 0 D0 , - 1 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 101 , 110 ) / : - 949 D0 , 0 D0 , 1 D0 , 8 D0 , 0 D0 , - 1 D0 , : - 595 D0 , 0 D0 , 0 D0 , 258 D0 , 0 D0 , 0 D0 , : 528 D0 , 0 D0 , 0 D0 , - 279 D0 , 0 D0 , 0 D0 , : - 590 D0 , 0 D0 , 4 D0 , 252 D0 , 0 D0 , 2 D0 , : 570 D0 , 0 D0 , - 2 D0 , - 244 D0 , 0 D0 , - 1 D0 , : - 502 D0 , 0 D0 , 3 D0 , 250 D0 , 0 D0 , 2 D0 , : - 875 D0 , 0 D0 , 1 D0 , 29 D0 , 0 D0 , 0 D0 , : - 492 D0 , 0 D0 , - 3 D0 , 275 D0 , 0 D0 , - 1 D0 , : 535 D0 , 0 D0 , - 2 D0 , - 228 D0 , 0 D0 , - 1 D0 , : - 467 D0 , 0 D0 , 1 D0 , 240 D0 , 0 D0 , 1 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 111 , 120 ) / : 591 D0 , 0 D0 , 0 D0 , - 253 D0 , 0 D0 , 0 D0 , : - 453 D0 , 0 D0 , - 1 D0 , 244 D0 , 0 D0 , - 1 D0 , : 766 D0 , 0 D0 , 1 D0 , 9 D0 , 0 D0 , 0 D0 , : - 446 D0 , 0 D0 , 2 D0 , 225 D0 , 0 D0 , 1 D0 , : - 488 D0 , 0 D0 , 2 D0 , 207 D0 , 0 D0 , 1 D0 , : - 468 D0 , 0 D0 , 0 D0 , 201 D0 , 0 D0 , 0 D0 , : - 421 D0 , 0 D0 , 1 D0 , 216 D0 , 0 D0 , 1 D0 , : 463 D0 , 0 D0 , 0 D0 , - 200 D0 , 0 D0 , 0 D0 , : - 673 D0 , 0 D0 , 2 D0 , 14 D0 , 0 D0 , 0 D0 , : 658 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 121 , 130 ) / : - 438 D0 , 0 D0 , 0 D0 , 188 D0 , 0 D0 , 0 D0 , : - 390 D0 , 0 D0 , 0 D0 , 205 D0 , 0 D0 , 0 D0 , : 639 D0 , - 11 D0 , - 2 D0 , - 19 D0 , 0 D0 , 0 D0 , : 412 D0 , 0 D0 , - 2 D0 , - 176 D0 , 0 D0 , - 1 D0 , : - 361 D0 , 0 D0 , 0 D0 , 189 D0 , 0 D0 , 0 D0 , : 360 D0 , 0 D0 , - 1 D0 , - 185 D0 , 0 D0 , - 1 D0 , : 588 D0 , 0 D0 , - 3 D0 , - 24 D0 , 0 D0 , 0 D0 , : - 578 D0 , 0 D0 , 1 D0 , 5 D0 , 0 D0 , 0 D0 , : - 396 D0 , 0 D0 , 0 D0 , 171 D0 , 0 D0 , 0 D0 , : 565 D0 , 0 D0 , - 1 D0 , - 6 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 131 , 140 ) / : - 335 D0 , 0 D0 , - 1 D0 , 184 D0 , 0 D0 , - 1 D0 , : 357 D0 , 0 D0 , 1 D0 , - 154 D0 , 0 D0 , 0 D0 , : 321 D0 , 0 D0 , 1 D0 , - 174 D0 , 0 D0 , 0 D0 , : - 301 D0 , 0 D0 , - 1 D0 , 162 D0 , 0 D0 , 0 D0 , : - 334 D0 , 0 D0 , 0 D0 , 144 D0 , 0 D0 , 0 D0 , : 493 D0 , 0 D0 , - 2 D0 , - 15 D0 , 0 D0 , 0 D0 , : 494 D0 , 0 D0 , - 2 D0 , - 19 D0 , 0 D0 , 0 D0 , : 337 D0 , 0 D0 , - 1 D0 , - 143 D0 , 0 D0 , - 1 D0 , : 280 D0 , 0 D0 , - 1 D0 , - 144 D0 , 0 D0 , 0 D0 , : 309 D0 , 0 D0 , 1 D0 , - 134 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 141 , 150 ) / : - 263 D0 , 0 D0 , 2 D0 , 131 D0 , 0 D0 , 1 D0 , : 253 D0 , 0 D0 , 1 D0 , - 138 D0 , 0 D0 , 0 D0 , : 245 D0 , 0 D0 , 0 D0 , - 128 D0 , 0 D0 , 0 D0 , : 416 D0 , 0 D0 , - 2 D0 , - 17 D0 , 0 D0 , 0 D0 , : - 229 D0 , 0 D0 , 0 D0 , 128 D0 , 0 D0 , 0 D0 , : 231 D0 , 0 D0 , 0 D0 , - 120 D0 , 0 D0 , 0 D0 , : - 259 D0 , 0 D0 , 2 D0 , 109 D0 , 0 D0 , 1 D0 , : 375 D0 , 0 D0 , - 1 D0 , - 8 D0 , 0 D0 , 0 D0 , : 252 D0 , 0 D0 , 0 D0 , - 108 D0 , 0 D0 , 0 D0 , : - 245 D0 , 0 D0 , 1 D0 , 104 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 151 , 160 ) / : 243 D0 , 0 D0 , - 1 D0 , - 104 D0 , 0 D0 , 0 D0 , : 208 D0 , 0 D0 , 1 D0 , - 112 D0 , 0 D0 , 0 D0 , : 199 D0 , 0 D0 , 0 D0 , - 102 D0 , 0 D0 , 0 D0 , : - 208 D0 , 0 D0 , 1 D0 , 105 D0 , 0 D0 , 0 D0 , : 335 D0 , 0 D0 , - 2 D0 , - 14 D0 , 0 D0 , 0 D0 , : - 325 D0 , 0 D0 , 1 D0 , 7 D0 , 0 D0 , 0 D0 , : - 187 D0 , 0 D0 , 0 D0 , 96 D0 , 0 D0 , 0 D0 , : 197 D0 , 0 D0 , - 1 D0 , - 100 D0 , 0 D0 , 0 D0 , : - 192 D0 , 0 D0 , 2 D0 , 94 D0 , 0 D0 , 1 D0 , : - 188 D0 , 0 D0 , 0 D0 , 83 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 161 , 170 ) / : 276 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 286 D0 , 0 D0 , 1 D0 , 6 D0 , 0 D0 , 0 D0 , : 186 D0 , 0 D0 , - 1 D0 , - 79 D0 , 0 D0 , 0 D0 , : - 219 D0 , 0 D0 , 0 D0 , 43 D0 , 0 D0 , 0 D0 , : 276 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 153 D0 , 0 D0 , - 1 D0 , 84 D0 , 0 D0 , 0 D0 , : - 156 D0 , 0 D0 , 0 D0 , 81 D0 , 0 D0 , 0 D0 , : - 154 D0 , 0 D0 , 1 D0 , 78 D0 , 0 D0 , 0 D0 , : - 174 D0 , 0 D0 , 1 D0 , 75 D0 , 0 D0 , 0 D0 , : - 163 D0 , 0 D0 , 2 D0 , 69 D0 , 0 D0 , 1 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 171 , 180 ) / : - 228 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 91 D0 , 0 D0 , - 4 D0 , - 54 D0 , 0 D0 , - 2 D0 , : 175 D0 , 0 D0 , 0 D0 , - 75 D0 , 0 D0 , 0 D0 , : - 159 D0 , 0 D0 , 0 D0 , 69 D0 , 0 D0 , 0 D0 , : 141 D0 , 0 D0 , 0 D0 , - 72 D0 , 0 D0 , 0 D0 , : 147 D0 , 0 D0 , 0 D0 , - 75 D0 , 0 D0 , 0 D0 , : - 132 D0 , 0 D0 , 0 D0 , 69 D0 , 0 D0 , 0 D0 , : 159 D0 , 0 D0 , - 28 D0 , - 54 D0 , 0 D0 , 11 D0 , : 213 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : 123 D0 , 0 D0 , 0 D0 , - 64 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 181 , 190 ) / : - 118 D0 , 0 D0 , - 1 D0 , 66 D0 , 0 D0 , 0 D0 , : 144 D0 , 0 D0 , - 1 D0 , - 61 D0 , 0 D0 , 0 D0 , : - 121 D0 , 0 D0 , 1 D0 , 60 D0 , 0 D0 , 0 D0 , : - 134 D0 , 0 D0 , 1 D0 , 56 D0 , 0 D0 , 1 D0 , : - 105 D0 , 0 D0 , 0 D0 , 57 D0 , 0 D0 , 0 D0 , : - 102 D0 , 0 D0 , 0 D0 , 56 D0 , 0 D0 , 0 D0 , : 120 D0 , 0 D0 , 0 D0 , - 52 D0 , 0 D0 , 0 D0 , : 101 D0 , 0 D0 , 0 D0 , - 54 D0 , 0 D0 , 0 D0 , : - 113 D0 , 0 D0 , 0 D0 , 59 D0 , 0 D0 , 0 D0 , : - 106 D0 , 0 D0 , 0 D0 , 61 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 191 , 200 ) / : - 129 D0 , 0 D0 , 1 D0 , 55 D0 , 0 D0 , 0 D0 , : - 114 D0 , 0 D0 , 0 D0 , 57 D0 , 0 D0 , 0 D0 , : 113 D0 , 0 D0 , - 1 D0 , - 49 D0 , 0 D0 , 0 D0 , : - 102 D0 , 0 D0 , 0 D0 , 44 D0 , 0 D0 , 0 D0 , : - 94 D0 , 0 D0 , 0 D0 , 51 D0 , 0 D0 , 0 D0 , : - 100 D0 , 0 D0 , - 1 D0 , 56 D0 , 0 D0 , 0 D0 , : 87 D0 , 0 D0 , 0 D0 , - 47 D0 , 0 D0 , 0 D0 , : 161 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 96 D0 , 0 D0 , 0 D0 , - 50 D0 , 0 D0 , 0 D0 , : 151 D0 , 0 D0 , - 1 D0 , - 5 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 201 , 210 ) / : - 104 D0 , 0 D0 , 0 D0 , 44 D0 , 0 D0 , 0 D0 , : - 110 D0 , 0 D0 , 0 D0 , 48 D0 , 0 D0 , 0 D0 , : - 100 D0 , 0 D0 , 1 D0 , 50 D0 , 0 D0 , 0 D0 , : 92 D0 , 0 D0 , - 5 D0 , 12 D0 , 0 D0 , - 2 D0 , : 82 D0 , 0 D0 , 0 D0 , - 45 D0 , 0 D0 , 0 D0 , : 82 D0 , 0 D0 , 0 D0 , - 45 D0 , 0 D0 , 0 D0 , : - 78 D0 , 0 D0 , 0 D0 , 41 D0 , 0 D0 , 0 D0 , : - 77 D0 , 0 D0 , 0 D0 , 43 D0 , 0 D0 , 0 D0 , : 2 D0 , 0 D0 , 0 D0 , 54 D0 , 0 D0 , 0 D0 , : 94 D0 , 0 D0 , 0 D0 , - 40 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 211 , 220 ) / : - 93 D0 , 0 D0 , 0 D0 , 40 D0 , 0 D0 , 0 D0 , : - 83 D0 , 0 D0 , 10 D0 , 40 D0 , 0 D0 , - 2 D0 , : 83 D0 , 0 D0 , 0 D0 , - 36 D0 , 0 D0 , 0 D0 , : - 91 D0 , 0 D0 , 0 D0 , 39 D0 , 0 D0 , 0 D0 , : 128 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 79 D0 , 0 D0 , 0 D0 , 34 D0 , 0 D0 , 0 D0 , : - 83 D0 , 0 D0 , 0 D0 , 47 D0 , 0 D0 , 0 D0 , : 84 D0 , 0 D0 , 0 D0 , - 44 D0 , 0 D0 , 0 D0 , : 83 D0 , 0 D0 , 0 D0 , - 43 D0 , 0 D0 , 0 D0 , : 91 D0 , 0 D0 , 0 D0 , - 39 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 221 , 230 ) / : - 77 D0 , 0 D0 , 0 D0 , 39 D0 , 0 D0 , 0 D0 , : 84 D0 , 0 D0 , 0 D0 , - 43 D0 , 0 D0 , 0 D0 , : - 92 D0 , 0 D0 , 1 D0 , 39 D0 , 0 D0 , 0 D0 , : - 92 D0 , 0 D0 , 1 D0 , 39 D0 , 0 D0 , 0 D0 , : - 94 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 68 D0 , 0 D0 , 0 D0 , - 36 D0 , 0 D0 , 0 D0 , : - 61 D0 , 0 D0 , 0 D0 , 32 D0 , 0 D0 , 0 D0 , : 71 D0 , 0 D0 , 0 D0 , - 31 D0 , 0 D0 , 0 D0 , : 62 D0 , 0 D0 , 0 D0 , - 34 D0 , 0 D0 , 0 D0 , : - 63 D0 , 0 D0 , 0 D0 , 33 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 231 , 240 ) / : - 73 D0 , 0 D0 , 0 D0 , 32 D0 , 0 D0 , 0 D0 , : 115 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 103 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 63 D0 , 0 D0 , 0 D0 , - 28 D0 , 0 D0 , 0 D0 , : 74 D0 , 0 D0 , 0 D0 , - 32 D0 , 0 D0 , 0 D0 , : - 103 D0 , 0 D0 , - 3 D0 , 3 D0 , 0 D0 , - 1 D0 , : - 69 D0 , 0 D0 , 0 D0 , 30 D0 , 0 D0 , 0 D0 , : 57 D0 , 0 D0 , 0 D0 , - 29 D0 , 0 D0 , 0 D0 , : 94 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : 64 D0 , 0 D0 , 0 D0 , - 33 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 241 , 250 ) / : - 63 D0 , 0 D0 , 0 D0 , 26 D0 , 0 D0 , 0 D0 , : - 38 D0 , 0 D0 , 0 D0 , 20 D0 , 0 D0 , 0 D0 , : - 43 D0 , 0 D0 , 0 D0 , 24 D0 , 0 D0 , 0 D0 , : - 45 D0 , 0 D0 , 0 D0 , 23 D0 , 0 D0 , 0 D0 , : 47 D0 , 0 D0 , 0 D0 , - 24 D0 , 0 D0 , 0 D0 , : - 48 D0 , 0 D0 , 0 D0 , 25 D0 , 0 D0 , 0 D0 , : 45 D0 , 0 D0 , 0 D0 , - 26 D0 , 0 D0 , 0 D0 , : 56 D0 , 0 D0 , 0 D0 , - 25 D0 , 0 D0 , 0 D0 , : 88 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 75 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 251 , 260 ) / : 85 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 49 D0 , 0 D0 , 0 D0 , - 26 D0 , 0 D0 , 0 D0 , : - 74 D0 , 0 D0 , - 3 D0 , - 1 D0 , 0 D0 , - 1 D0 , : - 39 D0 , 0 D0 , 0 D0 , 21 D0 , 0 D0 , 0 D0 , : 45 D0 , 0 D0 , 0 D0 , - 20 D0 , 0 D0 , 0 D0 , : 51 D0 , 0 D0 , 0 D0 , - 22 D0 , 0 D0 , 0 D0 , : - 40 D0 , 0 D0 , 0 D0 , 21 D0 , 0 D0 , 0 D0 , : 41 D0 , 0 D0 , 0 D0 , - 21 D0 , 0 D0 , 0 D0 , : - 42 D0 , 0 D0 , 0 D0 , 24 D0 , 0 D0 , 0 D0 , : - 51 D0 , 0 D0 , 0 D0 , 22 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 261 , 270 ) / : - 42 D0 , 0 D0 , 0 D0 , 22 D0 , 0 D0 , 0 D0 , : 39 D0 , 0 D0 , 0 D0 , - 21 D0 , 0 D0 , 0 D0 , : 46 D0 , 0 D0 , 0 D0 , - 18 D0 , 0 D0 , 0 D0 , : - 53 D0 , 0 D0 , 0 D0 , 22 D0 , 0 D0 , 0 D0 , : 82 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : 81 D0 , 0 D0 , - 1 D0 , - 4 D0 , 0 D0 , 0 D0 , : 47 D0 , 0 D0 , 0 D0 , - 19 D0 , 0 D0 , 0 D0 , : 53 D0 , 0 D0 , 0 D0 , - 23 D0 , 0 D0 , 0 D0 , : - 45 D0 , 0 D0 , 0 D0 , 22 D0 , 0 D0 , 0 D0 , : - 44 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 271 , 280 ) / : - 33 D0 , 0 D0 , 0 D0 , 16 D0 , 0 D0 , 0 D0 , : - 61 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 28 D0 , 0 D0 , 0 D0 , - 15 D0 , 0 D0 , 0 D0 , : - 38 D0 , 0 D0 , 0 D0 , 19 D0 , 0 D0 , 0 D0 , : - 33 D0 , 0 D0 , 0 D0 , 21 D0 , 0 D0 , 0 D0 , : - 60 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 48 D0 , 0 D0 , 0 D0 , - 10 D0 , 0 D0 , 0 D0 , : 27 D0 , 0 D0 , 0 D0 , - 14 D0 , 0 D0 , 0 D0 , : 38 D0 , 0 D0 , 0 D0 , - 20 D0 , 0 D0 , 0 D0 , : 31 D0 , 0 D0 , 0 D0 , - 13 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 281 , 290 ) / : - 29 D0 , 0 D0 , 0 D0 , 15 D0 , 0 D0 , 0 D0 , : 28 D0 , 0 D0 , 0 D0 , - 15 D0 , 0 D0 , 0 D0 , : - 32 D0 , 0 D0 , 0 D0 , 15 D0 , 0 D0 , 0 D0 , : 45 D0 , 0 D0 , 0 D0 , - 8 D0 , 0 D0 , 0 D0 , : - 44 D0 , 0 D0 , 0 D0 , 19 D0 , 0 D0 , 0 D0 , : 28 D0 , 0 D0 , 0 D0 , - 15 D0 , 0 D0 , 0 D0 , : - 51 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 36 D0 , 0 D0 , 0 D0 , 20 D0 , 0 D0 , 0 D0 , : 44 D0 , 0 D0 , 0 D0 , - 19 D0 , 0 D0 , 0 D0 , : 26 D0 , 0 D0 , 0 D0 , - 14 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 291 , 300 ) / : - 60 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 35 D0 , 0 D0 , 0 D0 , - 18 D0 , 0 D0 , 0 D0 , : - 27 D0 , 0 D0 , 0 D0 , 11 D0 , 0 D0 , 0 D0 , : 47 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 36 D0 , 0 D0 , 0 D0 , - 15 D0 , 0 D0 , 0 D0 , : - 36 D0 , 0 D0 , 0 D0 , 20 D0 , 0 D0 , 0 D0 , : - 35 D0 , 0 D0 , 0 D0 , 19 D0 , 0 D0 , 0 D0 , : - 37 D0 , 0 D0 , 0 D0 , 19 D0 , 0 D0 , 0 D0 , : 32 D0 , 0 D0 , 0 D0 , - 16 D0 , 0 D0 , 0 D0 , : 35 D0 , 0 D0 , 0 D0 , - 14 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 301 , 310 ) / : 32 D0 , 0 D0 , 0 D0 , - 13 D0 , 0 D0 , 0 D0 , : 65 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 47 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 32 D0 , 0 D0 , 0 D0 , - 16 D0 , 0 D0 , 0 D0 , : 37 D0 , 0 D0 , 0 D0 , - 16 D0 , 0 D0 , 0 D0 , : - 30 D0 , 0 D0 , 0 D0 , 15 D0 , 0 D0 , 0 D0 , : - 32 D0 , 0 D0 , 0 D0 , 16 D0 , 0 D0 , 0 D0 , : - 31 D0 , 0 D0 , 0 D0 , 13 D0 , 0 D0 , 0 D0 , : 37 D0 , 0 D0 , 0 D0 , - 16 D0 , 0 D0 , 0 D0 , : 31 D0 , 0 D0 , 0 D0 , - 13 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 311 , 320 ) / : 49 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 32 D0 , 0 D0 , 0 D0 , - 13 D0 , 0 D0 , 0 D0 , : 23 D0 , 0 D0 , 0 D0 , - 12 D0 , 0 D0 , 0 D0 , : - 43 D0 , 0 D0 , 0 D0 , 18 D0 , 0 D0 , 0 D0 , : 26 D0 , 0 D0 , 0 D0 , - 11 D0 , 0 D0 , 0 D0 , : - 32 D0 , 0 D0 , 0 D0 , 14 D0 , 0 D0 , 0 D0 , : - 29 D0 , 0 D0 , 0 D0 , 14 D0 , 0 D0 , 0 D0 , : - 27 D0 , 0 D0 , 0 D0 , 12 D0 , 0 D0 , 0 D0 , : 30 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 11 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 321 , 330 ) / : - 21 D0 , 0 D0 , 0 D0 , 10 D0 , 0 D0 , 0 D0 , : - 34 D0 , 0 D0 , 0 D0 , 15 D0 , 0 D0 , 0 D0 , : - 10 D0 , 0 D0 , 0 D0 , 6 D0 , 0 D0 , 0 D0 , : - 36 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 9 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : - 12 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , : - 21 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , : - 29 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 15 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : - 20 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 331 , 340 ) / : 28 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , - 2 D0 , : 17 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 22 D0 , 0 D0 , 0 D0 , 12 D0 , 0 D0 , 0 D0 , : - 14 D0 , 0 D0 , 0 D0 , 7 D0 , 0 D0 , 0 D0 , : 24 D0 , 0 D0 , 0 D0 , - 11 D0 , 0 D0 , 0 D0 , : 11 D0 , 0 D0 , 0 D0 , - 6 D0 , 0 D0 , 0 D0 , : 14 D0 , 0 D0 , 0 D0 , - 6 D0 , 0 D0 , 0 D0 , : 24 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 18 D0 , 0 D0 , 0 D0 , - 8 D0 , 0 D0 , 0 D0 , : - 38 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 341 , 350 ) / : - 31 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 16 D0 , 0 D0 , 0 D0 , 8 D0 , 0 D0 , 0 D0 , : 29 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 18 D0 , 0 D0 , 0 D0 , 10 D0 , 0 D0 , 0 D0 , : - 10 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , : - 17 D0 , 0 D0 , 0 D0 , 10 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : 16 D0 , 0 D0 , 0 D0 , - 6 D0 , 0 D0 , 0 D0 , : 22 D0 , 0 D0 , 0 D0 , - 12 D0 , 0 D0 , 0 D0 , : 20 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 351 , 360 ) / : - 13 D0 , 0 D0 , 0 D0 , 6 D0 , 0 D0 , 0 D0 , : - 17 D0 , 0 D0 , 0 D0 , 9 D0 , 0 D0 , 0 D0 , : - 14 D0 , 0 D0 , 0 D0 , 8 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , 0 D0 , - 7 D0 , 0 D0 , 0 D0 , : 14 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 19 D0 , 0 D0 , 0 D0 , - 10 D0 , 0 D0 , 0 D0 , : - 34 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 20 D0 , 0 D0 , 0 D0 , 8 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , - 5 D0 , 0 D0 , 0 D0 , : - 18 D0 , 0 D0 , 0 D0 , 7 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 361 , 370 ) / : 13 D0 , 0 D0 , 0 D0 , - 6 D0 , 0 D0 , 0 D0 , : 17 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 12 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , : 15 D0 , 0 D0 , 0 D0 , - 8 D0 , 0 D0 , 0 D0 , : - 11 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : 13 D0 , 0 D0 , 0 D0 , - 5 D0 , 0 D0 , 0 D0 , : - 18 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 35 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : - 19 D0 , 0 D0 , 0 D0 , 10 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 371 , 380 ) / : - 26 D0 , 0 D0 , 0 D0 , 11 D0 , 0 D0 , 0 D0 , : 8 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : - 10 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : 10 D0 , 0 D0 , 0 D0 , - 6 D0 , 0 D0 , 0 D0 , : - 21 D0 , 0 D0 , 0 D0 , 9 D0 , 0 D0 , 0 D0 , : - 15 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , - 5 D0 , 0 D0 , 0 D0 , : - 29 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 19 D0 , 0 D0 , 0 D0 , 10 D0 , 0 D0 , 0 D0 , : 12 D0 , 0 D0 , 0 D0 , - 5 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 381 , 390 ) / : 22 D0 , 0 D0 , 0 D0 , - 9 D0 , 0 D0 , 0 D0 , : - 10 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , : - 20 D0 , 0 D0 , 0 D0 , 11 D0 , 0 D0 , 0 D0 , : - 20 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 17 D0 , 0 D0 , 0 D0 , 7 D0 , 0 D0 , 0 D0 , : 15 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 8 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : 14 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 12 D0 , 0 D0 , 0 D0 , 6 D0 , 0 D0 , 0 D0 , : 25 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 391 , 400 ) / : - 13 D0 , 0 D0 , 0 D0 , 6 D0 , 0 D0 , 0 D0 , : - 14 D0 , 0 D0 , 0 D0 , 8 D0 , 0 D0 , 0 D0 , : 13 D0 , 0 D0 , 0 D0 , - 5 D0 , 0 D0 , 0 D0 , : - 17 D0 , 0 D0 , 0 D0 , 9 D0 , 0 D0 , 0 D0 , : - 12 D0 , 0 D0 , 0 D0 , 6 D0 , 0 D0 , 0 D0 , : - 10 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , : 10 D0 , 0 D0 , 0 D0 , - 6 D0 , 0 D0 , 0 D0 , : - 15 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 22 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 28 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 401 , 410 ) / : 15 D0 , 0 D0 , 0 D0 , - 7 D0 , 0 D0 , 0 D0 , : 23 D0 , 0 D0 , 0 D0 , - 10 D0 , 0 D0 , 0 D0 , : 12 D0 , 0 D0 , 0 D0 , - 5 D0 , 0 D0 , 0 D0 , : 29 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 25 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 22 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 18 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 15 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : - 23 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 12 D0 , 0 D0 , 0 D0 , - 5 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 411 , 420 ) / : - 8 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : - 19 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 10 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : 21 D0 , 0 D0 , 0 D0 , - 9 D0 , 0 D0 , 0 D0 , : 23 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 16 D0 , 0 D0 , 0 D0 , 8 D0 , 0 D0 , 0 D0 , : - 19 D0 , 0 D0 , 0 D0 , 9 D0 , 0 D0 , 0 D0 , : - 22 D0 , 0 D0 , 0 D0 , 10 D0 , 0 D0 , 0 D0 , : 27 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 16 D0 , 0 D0 , 0 D0 , - 8 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 421 , 430 ) / : 19 D0 , 0 D0 , 0 D0 , - 8 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : - 9 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : - 9 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : - 8 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : 18 D0 , 0 D0 , 0 D0 , - 9 D0 , 0 D0 , 0 D0 , : 16 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 10 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : - 23 D0 , 0 D0 , 0 D0 , 9 D0 , 0 D0 , 0 D0 , : 16 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 431 , 440 ) / : - 12 D0 , 0 D0 , 0 D0 , 6 D0 , 0 D0 , 0 D0 , : - 8 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : 30 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 24 D0 , 0 D0 , 0 D0 , - 10 D0 , 0 D0 , 0 D0 , : 10 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : - 16 D0 , 0 D0 , 0 D0 , 7 D0 , 0 D0 , 0 D0 , : - 16 D0 , 0 D0 , 0 D0 , 7 D0 , 0 D0 , 0 D0 , : 17 D0 , 0 D0 , 0 D0 , - 7 D0 , 0 D0 , 0 D0 , : - 24 D0 , 0 D0 , 0 D0 , 10 D0 , 0 D0 , 0 D0 , : - 12 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 441 , 450 ) / : - 24 D0 , 0 D0 , 0 D0 , 11 D0 , 0 D0 , 0 D0 , : - 23 D0 , 0 D0 , 0 D0 , 9 D0 , 0 D0 , 0 D0 , : - 13 D0 , 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , : - 15 D0 , 0 D0 , 0 D0 , 7 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , - 1988 D0 , 0 D0 , 0 D0 , - 1679 D0 , : 0 D0 , 0 D0 , - 63 D0 , 0 D0 , 0 D0 , - 27 D0 , : - 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , 4 D0 , : 5 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , 364 D0 , 0 D0 , 0 D0 , 176 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 451 , 460 ) / : 0 D0 , 0 D0 , - 1044 D0 , 0 D0 , 0 D0 , - 891 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , 330 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 461 , 470 ) / : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , 5 D0 , 0 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 12 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 471 , 480 ) / : - 5 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : 7 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , - 12 D0 , 0 D0 , 0 D0 , - 10 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 481 , 490 ) / : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 7 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 491 , 500 ) / : - 8 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 501 , 510 ) / : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 511 , 520 ) / : - 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 8 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 521 , 530 ) / : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : - 13 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 531 , 540 ) / : 10 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 10 D0 , 0 D0 , 13 D0 , 6 D0 , 0 D0 , - 5 D0 , : 0 D0 , 0 D0 , 30 D0 , 0 D0 , 0 D0 , 14 D0 , : 0 D0 , 0 D0 , - 162 D0 , 0 D0 , 0 D0 , - 138 D0 , : 0 D0 , 0 D0 , 75 D0 , 0 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 541 , 550 ) / : 5 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 9 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 551 , 560 ) / : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 7 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 6 D0 , 0 D0 , - 3 D0 , 3 D0 , 0 D0 , 1 D0 , : 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , - 2 D0 , : 11 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 11 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 561 , 570 ) / : - 1 D0 , 0 D0 , 3 D0 , 3 D0 , 0 D0 , - 1 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , - 13 D0 , 0 D0 , 0 D0 , - 11 D0 , : 3 D0 , 0 D0 , 6 D0 , 0 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 571 , 580 ) / : 8 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 11 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 8 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 11 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 6 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 581 , 590 ) / : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 8 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 6 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 591 , 600 ) / : - 5 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , - 26 D0 , 0 D0 , 0 D0 , - 11 D0 , : 0 D0 , 0 D0 , - 10 D0 , 0 D0 , 0 D0 , - 5 D0 , : 5 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 13 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 601 , 610 ) / : 3 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 7 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 6 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 7 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 611 , 620 ) / : 13 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 11 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 621 , 630 ) / : 3 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 12 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : 0 D0 , 0 D0 , - 5 D0 , 0 D0 , 0 D0 , - 2 D0 , : - 7 D0 , 0 D0 , 0 D0 , 4 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 631 , 640 ) / : 6 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 12 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 641 , 650 ) / : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 6 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 6 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 651 , 660 ) / : - 6 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 7 D0 , 0 D0 , 0 D0 , - 4 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 5 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : - 6 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : - 6 D0 , 0 D0 , 0 D0 , 3 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 10 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 661 , 670 ) / : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 7 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 7 D0 , 0 D0 , 0 D0 , - 3 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 11 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : - 6 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 5 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 671 , 678 ) / : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 4 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 , : 4 D0 , 0 D0 , 0 D0 , - 2 D0 , 0 D0 , 0 D0 , : 3 D0 , 0 D0 , 0 D0 , - 1 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 1 D0 , 0 D0 , 0 D0 , : - 3 D0 , 0 D0 , 0 D0 , 2 D0 , 0 D0 , 0 D0 / * *  Planetary argument multipliers: *              L   L'  F   D   Om  Me  Ve  E  Ma  Ju  Sa  Ur  Ne  pre DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 1 , 10 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 16 , 4 , 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 16 , - 4 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 16 , 4 , 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 2 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 8 , - 1 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , 3 , - 8 , 3 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 0 , 0 , 10 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 6 , - 3 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 11 , 20 ) / : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 5 , 8 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 8 , 1 , 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 6 , 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 5 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 2 , - 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 5 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , - 2 , 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 21 , 30 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 2 , : 2 , 0 , - 1 , - 1 , 0 , 0 , 0 , 3 , - 7 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 0 , 0 , 19 , - 21 , 3 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 2 , - 4 , 0 , - 3 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 1 , 1 , 0 , 0 , - 1 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , - 4 , 10 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 2 , 0 , 0 , - 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 7 , 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , - 1 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 31 , 40 ) / : - 1 , 0 , 0 , 0 , 0 , 0 , 18 , - 16 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 1 , 1 , 2 , 0 , 0 , 1 , 0 , - 2 , 0 , 0 , 0 , 0 , : - 1 , 0 , 1 , - 1 , 1 , 0 , 18 , - 17 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 1 , 1 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 13 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 2 , - 2 , 2 , 0 , - 8 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 13 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 8 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 13 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 8 , - 14 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 41 , 50 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 13 , 0 , 0 , 0 , 0 , 0 , 1 , : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 2 , 0 , - 4 , 5 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 2 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 3 , 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 3 , - 5 , 0 , 2 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 4 , 3 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 1 , 0 , 1 , 0 , 3 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 51 , 60 ) / : - 1 , 0 , 0 , 1 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 2 , - 2 , 0 , 0 , 0 , : - 2 , 0 , 2 , 0 , 2 , 0 , 0 , - 5 , 9 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , - 1 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , 0 , 2 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , : - 1 , 0 , 0 , 1 , 0 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 61 , 70 ) / : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , - 1 , 0 , 0 , 2 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 9 , 17 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 2 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , - 1 , 2 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 0 , 0 , 17 , - 16 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 1 , - 3 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 2 , 2 , 0 , 0 , 0 , 9 , - 13 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , - 1 , 0 , 0 , 1 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 71 , 80 ) / : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , : 0 , 0 , - 2 , 2 , 0 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 1 , 0 , 5 , - 7 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 6 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , 1 , - 3 , 1 , 0 , - 6 , 7 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , 2 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 81 , 90 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 15 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 15 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 9 , 15 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 15 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , - 1 , - 1 , 0 , 0 , 0 , 8 , - 15 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 0 , 0 , 2 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 5 , 5 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 1 , 0 , 0 , - 6 , 8 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 1 , 0 , 0 , - 2 , 0 , 3 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 91 , 100 ) / : - 2 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , - 3 , 0 , 0 , 0 , 0 , : - 2 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , - 3 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 6 , - 8 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 1 , - 5 , 0 , 0 , 0 , : - 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : - 1 , 0 , 1 , 1 , 1 , 0 , - 20 , 20 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 0 , 0 , 20 , - 21 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 8 , - 15 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 10 , 15 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 101 , 110 ) / : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , - 2 , 4 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 1 , 0 , - 6 , 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 2 , 2 , 1 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , - 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 1 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 111 , 120 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 9 , 13 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 7 , - 13 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 9 , - 17 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 17 , 0 , 0 , 0 , 0 , 2 , : 1 , 0 , 0 , - 1 , 1 , 0 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 1 , 1 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 2 , 0 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 121 , 130 ) / : 0 , 0 , - 1 , 1 , 1 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 2 , 2 , 0 , 1 , 0 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 5 , 0 , 2 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 2 , 0 , - 3 , 1 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 8 , - 13 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 8 , - 12 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , - 8 , 11 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 1 , 0 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 1 , 0 , 18 , - 16 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 131 , 140 ) / : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , - 1 , 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 3 , - 7 , 4 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 1 , 1 , 1 , 0 , 0 , - 3 , 7 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , - 1 , 0 , - 2 , 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , 0 , 1 , 0 , - 10 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 1 , 0 , 10 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 141 , 150 ) / : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 2 , - 5 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 2 , - 5 , 0 , 0 , 0 , : 2 , 0 , - 1 , - 1 , 1 , 0 , 0 , 3 , - 7 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 0 , - 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , - 3 , 7 , - 4 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , 0 , 1 , 0 , - 18 , 16 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , - 8 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , - 8 , 13 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 151 , 160 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , 0 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 1 , : - 1 , 0 , 0 , 1 , 1 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 1 , 1 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , - 2 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 2 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 161 , 170 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 2 , : 0 , 0 , 1 , - 1 , 0 , 0 , 3 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , - 5 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 5 , - 7 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 5 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 6 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 8 , 15 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 171 , 180 ) / : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 6 , - 8 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 1 , 1 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 5 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 181 , 190 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , - 1 , 0 , 0 , - 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 13 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , - 13 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 1 , 0 , 0 , - 5 , 6 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 8 , 11 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , - 1 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 191 , 200 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 3 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 2 , : - 2 , 0 , 0 , 2 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 2 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 2 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 1 , 0 , 0 , - 2 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , - 1 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , 0 , - 2 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 201 , 210 ) / : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , - 2 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 2 , 0 , 0 , 2 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 3 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 5 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 211 , 220 ) / : 0 , 0 , 2 , - 2 , 2 , 0 , - 3 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 4 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , 1 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 8 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 221 , 230 ) / : 0 , 0 , 2 , - 2 , 2 , 0 , - 5 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 8 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 8 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 5 , 7 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 8 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 2 , 0 , 0 , - 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 2 , 0 , 1 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 231 , 240 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 11 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 11 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 4 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 1 , 0 , - 3 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , 0 , - 2 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 7 , 9 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 241 , 250 ) / : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 2 , - 2 , 2 , 0 , 0 , - 2 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 1 , 0 , 3 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , - 3 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 4 , 4 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 251 , 260 ) / : 0 , 0 , 1 , - 1 , 2 , 0 , - 5 , 7 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 6 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 6 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 4 , 6 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 6 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 6 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , - 1 , 1 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 9 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 9 , 0 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 261 , 270 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 9 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 2 , 0 , 2 , 0 , 0 , 0 , 0 , : - 2 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 2 , 2 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 10 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 10 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 3 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 271 , 280 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 8 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 8 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , - 2 , 2 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 7 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 281 , 290 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 7 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 7 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , - 2 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 2 , 0 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 10 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 1 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 5 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 291 , 300 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 1 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 11 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 11 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , - 2 , 2 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , - 4 , 4 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 301 , 310 ) / : 0 , 0 , - 1 , 1 , 0 , 0 , 4 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 7 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 4 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 7 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 6 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 4 , 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 311 , 320 ) / : - 2 , 0 , 0 , 2 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 5 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 3 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 3 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 12 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 321 , 330 ) / : 0 , 0 , 1 , - 1 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 4 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 4 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , - 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 10 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 10 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 331 , 340 ) / : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 3 , 0 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 7 , 0 , 0 , 0 , 0 , 2 , : - 2 , 0 , 0 , 2 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 8 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 8 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 3 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 341 , 350 ) / : 0 , 0 , 1 , - 1 , 1 , 0 , - 2 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 9 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 9 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 9 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 6 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 6 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 351 , 360 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 9 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 361 , 370 ) / : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 1 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 3 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , - 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 3 , 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 2 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 371 , 380 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 14 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 2 , - 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 8 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 8 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 8 , 3 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 381 , 390 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 8 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 2 , 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 12 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , - 2 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 0 , 0 , 2 , : 0 , 0 , 2 , - 2 , 1 , 0 , - 5 , 5 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 391 , 400 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 6 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 7 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 7 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 5 , 6 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 401 , 410 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 7 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 6 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 1 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 9 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 9 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 411 , 420 ) / : 0 , 0 , 1 , - 1 , 1 , 0 , - 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 7 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 7 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 5 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 3 , 0 , 0 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 421 , 430 ) / : 0 , 0 , 1 , - 1 , 1 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 10 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 10 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 8 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 5 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 5 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 431 , 440 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 0 , 5 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 13 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 5 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 0 , 4 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 4 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 7 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 441 , 450 ) / : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 8 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 8 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 9 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 451 , 460 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 10 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 3 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , - 3 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 461 , 470 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 13 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , - 2 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , - 2 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , - 1 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 15 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 15 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 471 , 480 ) / : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 9 , - 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 2 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 8 , - 1 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 8 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 481 , 490 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 16 , - 4 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 8 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 8 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 8 , 1 , 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 2 , 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 5 , 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 11 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 11 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 11 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 11 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 491 , 500 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 3 , 0 , 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 7 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 6 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 501 , 510 ) / : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 6 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , - 9 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 1 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 7 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 5 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 511 , 520 ) / : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 4 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 4 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 9 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 9 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 3 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 1 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 4 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 521 , 530 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 0 , 5 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 12 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 4 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , - 8 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 3 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 531 , 540 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 6 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 7 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 7 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 6 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 2 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 541 , 550 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , - 2 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , - 1 , 0 , 0 , 2 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 16 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 2 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , - 8 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 16 , - 4 , - 5 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 551 , 560 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 8 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 10 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 10 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 10 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 8 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 5 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 561 , 570 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 5 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 5 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , - 7 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , - 7 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 5 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 7 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 3 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 571 , 580 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , 2 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 11 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 11 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , - 4 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , - 2 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 581 , 590 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 1 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 1 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , - 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , 0 , - 2 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 9 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 4 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 591 , 600 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 7 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 7 , - 7 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 2 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 2 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , 0 , - 4 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 601 , 610 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , 0 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , 0 , - 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 8 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 3 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 9 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 9 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 9 , 0 , 0 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 611 , 620 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 9 , - 9 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 4 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 621 , 630 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , : 1 , 0 , 0 , - 2 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 2 , 0 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 0 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 631 , 640 ) / : - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 2 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : - 1 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 641 , 650 ) / : - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 2 , 1 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 2 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 1 , 0 , 0 , - 2 , 0 , 2 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , - 2 , 2 , 0 , - 3 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , - 2 , 2 , 0 , 0 , - 2 , 0 , 2 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 651 , 660 ) / : 0 , 0 , 0 , - 2 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , - 2 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , - 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , - 2 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , 1 , 2 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 2 , 0 , 2 , 0 , 10 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 661 , 670 ) / : 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 0 , : - 1 , 0 , 2 , 0 , 2 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 0 , : 2 , 0 , 2 , - 2 , 2 , 0 , 0 , - 2 , 0 , 3 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 1 , 0 , 0 , - 2 , 0 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 2 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 2 , 2 , 2 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 671 , 680 ) / : 0 , 0 , 2 , 0 , 2 , 0 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 2 , 2 , 2 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 2 , 0 , - 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 2 , 2 , 2 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : 2 , 0 , 2 , 0 , 2 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 2 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 2 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 681 , 687 ) / : 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , 2 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 2 , 2 , 2 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : - 1 , 0 , 2 , 2 , 2 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 2 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 2 , 2 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 / * *  Planetary nutation coefficients, unit 1e-7 arcsec: *  longitude (sin, cos), obliquity (sin, cos) * DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 1 , 10 ) / : 1440 , 0 , 0 , 0 , : 56 , - 117 , - 42 , - 40 , : 125 , - 43 , 0 , - 54 , : 0 , 5 , 0 , 0 , : 3 , - 7 , - 3 , 0 , : 3 , 0 , 0 , - 2 , : - 114 , 0 , 0 , 61 , : - 219 , 89 , 0 , 0 , : - 3 , 0 , 0 , 0 , : - 462 , 1604 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 11 , 20 ) / : 99 , 0 , 0 , - 53 , : - 3 , 0 , 0 , 2 , : 0 , 6 , 2 , 0 , : 3 , 0 , 0 , 0 , : - 12 , 0 , 0 , 0 , : 14 , - 218 , 117 , 8 , : 31 , - 481 , - 257 , - 17 , : - 491 , 128 , 0 , 0 , : - 3084 , 5123 , 2735 , 1647 , : - 1444 , 2409 , - 1286 , - 771 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 21 , 30 ) / : 11 , - 24 , - 11 , - 9 , : 26 , - 9 , 0 , 0 , : 103 , - 60 , 0 , 0 , : 0 , - 13 , - 7 , 0 , : - 26 , - 29 , - 16 , 14 , : 9 , - 27 , - 14 , - 5 , : 12 , 0 , 0 , - 6 , : - 7 , 0 , 0 , 0 , : 0 , 24 , 0 , 0 , : 284 , 0 , 0 , - 151 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 31 , 40 ) / : 226 , 101 , 0 , 0 , : 0 , - 8 , - 2 , 0 , : 0 , - 6 , - 3 , 0 , : 5 , 0 , 0 , - 3 , : - 41 , 175 , 76 , 17 , : 0 , 15 , 6 , 0 , : 425 , 212 , - 133 , 269 , : 1200 , 598 , 319 , - 641 , : 235 , 334 , 0 , 0 , : 11 , - 12 , - 7 , - 6 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 41 , 50 ) / : 5 , - 6 , 3 , 3 , : - 5 , 0 , 0 , 3 , : 6 , 0 , 0 , - 3 , : 15 , 0 , 0 , 0 , : 13 , 0 , 0 , - 7 , : - 6 , - 9 , 0 , 0 , : 266 , - 78 , 0 , 0 , : - 460 , - 435 , - 232 , 246 , : 0 , 15 , 7 , 0 , : - 3 , 0 , 0 , 2 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 51 , 60 ) / : 0 , 131 , 0 , 0 , : 4 , 0 , 0 , 0 , : 0 , 3 , 0 , 0 , : 0 , 4 , 2 , 0 , : 0 , 3 , 0 , 0 , : - 17 , - 19 , - 10 , 9 , : - 9 , - 11 , 6 , - 5 , : - 6 , 0 , 0 , 3 , : - 16 , 8 , 0 , 0 , : 0 , 3 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 61 , 70 ) / : 11 , 24 , 11 , - 5 , : - 3 , - 4 , - 2 , 1 , : 3 , 0 , 0 , - 1 , : 0 , - 8 , - 4 , 0 , : 0 , 3 , 0 , 0 , : 0 , 5 , 0 , 0 , : 0 , 3 , 2 , 0 , : - 6 , 4 , 2 , 3 , : - 3 , - 5 , 0 , 0 , : - 5 , 0 , 0 , 2 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 71 , 80 ) / : 4 , 24 , 13 , - 2 , : - 42 , 20 , 0 , 0 , : - 10 , 233 , 0 , 0 , : - 3 , 0 , 0 , 1 , : 78 , - 18 , 0 , 0 , : 0 , 3 , 1 , 0 , : 0 , - 3 , - 1 , 0 , : 0 , - 4 , - 2 , 1 , : 0 , - 8 , - 4 , - 1 , : 0 , - 5 , 3 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 81 , 90 ) / : - 7 , 0 , 0 , 3 , : - 14 , 8 , 3 , 6 , : 0 , 8 , - 4 , 0 , : 0 , 19 , 10 , 0 , : 45 , - 22 , 0 , 0 , : - 3 , 0 , 0 , 0 , : 0 , - 3 , 0 , 0 , : 0 , 3 , 0 , 0 , : 3 , 5 , 3 , - 2 , : 89 , - 16 , - 9 , - 48 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 91 , 100 ) / : 0 , 3 , 0 , 0 , : - 3 , 7 , 4 , 2 , : - 349 , - 62 , 0 , 0 , : - 15 , 22 , 0 , 0 , : - 3 , 0 , 0 , 0 , : - 53 , 0 , 0 , 0 , : 5 , 0 , 0 , - 3 , : 0 , - 8 , 0 , 0 , : 15 , - 7 , - 4 , - 8 , : - 3 , 0 , 0 , 1 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 101 , 110 ) / : - 21 , - 78 , 0 , 0 , : 20 , - 70 , - 37 , - 11 , : 0 , 6 , 3 , 0 , : 5 , 3 , 2 , - 2 , : - 17 , - 4 , - 2 , 9 , : 0 , 6 , 3 , 0 , : 32 , 15 , - 8 , 17 , : 174 , 84 , 45 , - 93 , : 11 , 56 , 0 , 0 , : - 66 , - 12 , - 6 , 35 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 111 , 120 ) / : 47 , 8 , 4 , - 25 , : 0 , 8 , 4 , 0 , : 10 , - 22 , - 12 , - 5 , : - 3 , 0 , 0 , 2 , : - 24 , 12 , 0 , 0 , : 5 , - 6 , 0 , 0 , : 3 , 0 , 0 , - 2 , : 4 , 3 , 1 , - 2 , : 0 , 29 , 15 , 0 , : - 5 , - 4 , - 2 , 2 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 121 , 130 ) / : 8 , - 3 , - 1 , - 5 , : 0 , - 3 , 0 , 0 , : 10 , 0 , 0 , 0 , : 3 , 0 , 0 , - 2 , : - 5 , 0 , 0 , 3 , : 46 , 66 , 35 , - 25 , : - 14 , 7 , 0 , 0 , : 0 , 3 , 2 , 0 , : - 5 , 0 , 0 , 0 , : - 68 , - 34 , - 18 , 36 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 131 , 140 ) / : 0 , 14 , 7 , 0 , : 10 , - 6 , - 3 , - 5 , : - 5 , - 4 , - 2 , 3 , : - 3 , 5 , 2 , 1 , : 76 , 17 , 9 , - 41 , : 84 , 298 , 159 , - 45 , : 3 , 0 , 0 , - 1 , : - 3 , 0 , 0 , 2 , : - 3 , 0 , 0 , 1 , : - 82 , 292 , 156 , 44 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 141 , 150 ) / : - 73 , 17 , 9 , 39 , : - 9 , - 16 , 0 , 0 , : 3 , 0 , - 1 , - 2 , : - 3 , 0 , 0 , 0 , : - 9 , - 5 , - 3 , 5 , : - 439 , 0 , 0 , 0 , : 57 , - 28 , - 15 , - 30 , : 0 , - 6 , - 3 , 0 , : - 4 , 0 , 0 , 2 , : - 40 , 57 , 30 , 21 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 151 , 160 ) / : 23 , 7 , 3 , - 13 , : 273 , 80 , 43 , - 146 , : - 449 , 430 , 0 , 0 , : - 8 , - 47 , - 25 , 4 , : 6 , 47 , 25 , - 3 , : 0 , 23 , 13 , 0 , : - 3 , 0 , 0 , 2 , : 3 , - 4 , - 2 , - 2 , : - 48 , - 110 , - 59 , 26 , : 51 , 114 , 61 , - 27 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 161 , 170 ) / : - 133 , 0 , 0 , 57 , : 0 , 4 , 0 , 0 , : - 21 , - 6 , - 3 , 11 , : 0 , - 3 , - 1 , 0 , : - 11 , - 21 , - 11 , 6 , : - 18 , - 436 , - 233 , 9 , : 35 , - 7 , 0 , 0 , : 0 , 5 , 3 , 0 , : 11 , - 3 , - 1 , - 6 , : - 5 , - 3 , - 1 , 3 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 171 , 180 ) / : - 53 , - 9 , - 5 , 28 , : 0 , 3 , 2 , 1 , : 4 , 0 , 0 , - 2 , : 0 , - 4 , 0 , 0 , : - 50 , 194 , 103 , 27 , : - 13 , 52 , 28 , 7 , : - 91 , 248 , 0 , 0 , : 6 , 49 , 26 , - 3 , : - 6 , - 47 , - 25 , 3 , : 0 , 5 , 3 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 181 , 190 ) / : 52 , 23 , 10 , - 23 , : - 3 , 0 , 0 , 1 , : 0 , 5 , 3 , 0 , : - 4 , 0 , 0 , 0 , : - 4 , 8 , 3 , 2 , : 10 , 0 , 0 , 0 , : 3 , 0 , 0 , - 2 , : 0 , 8 , 4 , 0 , : 0 , 8 , 4 , 1 , : - 4 , 0 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 191 , 200 ) / : - 4 , 0 , 0 , 0 , : - 8 , 4 , 2 , 4 , : 8 , - 4 , - 2 , - 4 , : 0 , 15 , 7 , 0 , : - 138 , 0 , 0 , 0 , : 0 , - 7 , - 3 , 0 , : 0 , - 7 , - 3 , 0 , : 54 , 0 , 0 , - 29 , : 0 , 10 , 4 , 0 , : - 7 , 0 , 0 , 3 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 201 , 210 ) / : - 37 , 35 , 19 , 20 , : 0 , 4 , 0 , 0 , : - 4 , 9 , 0 , 0 , : 8 , 0 , 0 , - 4 , : - 9 , - 14 , - 8 , 5 , : - 3 , - 9 , - 5 , 3 , : - 145 , 47 , 0 , 0 , : - 10 , 40 , 21 , 5 , : 11 , - 49 , - 26 , - 7 , : - 2150 , 0 , 0 , 932 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 211 , 220 ) / : - 12 , 0 , 0 , 5 , : 85 , 0 , 0 , - 37 , : 4 , 0 , 0 , - 2 , : 3 , 0 , 0 , - 2 , : - 86 , 153 , 0 , 0 , : - 6 , 9 , 5 , 3 , : 9 , - 13 , - 7 , - 5 , : - 8 , 12 , 6 , 4 , : - 51 , 0 , 0 , 22 , : - 11 , - 268 , - 116 , 5 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 221 , 230 ) / : 0 , 12 , 5 , 0 , : 0 , 7 , 3 , 0 , : 31 , 6 , 3 , - 17 , : 140 , 27 , 14 , - 75 , : 57 , 11 , 6 , - 30 , : - 14 , - 39 , 0 , 0 , : 0 , - 6 , - 2 , 0 , : 4 , 15 , 8 , - 2 , : 0 , 4 , 0 , 0 , : - 3 , 0 , 0 , 1 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 231 , 240 ) / : 0 , 11 , 5 , 0 , : 9 , 6 , 0 , 0 , : - 4 , 10 , 4 , 2 , : 5 , 3 , 0 , 0 , : 16 , 0 , 0 , - 9 , : - 3 , 0 , 0 , 0 , : 0 , 3 , 2 , - 1 , : 7 , 0 , 0 , - 3 , : - 25 , 22 , 0 , 0 , : 42 , 223 , 119 , - 22 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 241 , 250 ) / : - 27 , - 143 , - 77 , 14 , : 9 , 49 , 26 , - 5 , : - 1166 , 0 , 0 , 505 , : - 5 , 0 , 0 , 2 , : - 6 , 0 , 0 , 3 , : - 8 , 0 , 1 , 4 , : 0 , - 4 , 0 , 0 , : 117 , 0 , 0 , - 63 , : - 4 , 8 , 4 , 2 , : 3 , 0 , 0 , - 2 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 251 , 260 ) / : - 5 , 0 , 0 , 2 , : 0 , 31 , 0 , 0 , : - 5 , 0 , 1 , 3 , : 4 , 0 , 0 , - 2 , : - 4 , 0 , 0 , 2 , : - 24 , - 13 , - 6 , 10 , : 3 , 0 , 0 , 0 , : 0 , - 32 , - 17 , 0 , : 8 , 12 , 5 , - 3 , : 3 , 0 , 0 , - 1 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 261 , 270 ) / : 7 , 13 , 0 , 0 , : - 3 , 16 , 0 , 0 , : 50 , 0 , 0 , - 27 , : 0 , - 5 , - 3 , 0 , : 13 , 0 , 0 , 0 , : 0 , 5 , 3 , 1 , : 24 , 5 , 2 , - 11 , : 5 , - 11 , - 5 , - 2 , : 30 , - 3 , - 2 , - 16 , : 18 , 0 , 0 , - 9 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 271 , 280 ) / : 8 , 614 , 0 , 0 , : 3 , - 3 , - 1 , - 2 , : 6 , 17 , 9 , - 3 , : - 3 , - 9 , - 5 , 2 , : 0 , 6 , 3 , - 1 , : - 127 , 21 , 9 , 55 , : 3 , 5 , 0 , 0 , : - 6 , - 10 , - 4 , 3 , : 5 , 0 , 0 , 0 , : 16 , 9 , 4 , - 7 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 281 , 290 ) / : 3 , 0 , 0 , - 2 , : 0 , 22 , 0 , 0 , : 0 , 19 , 10 , 0 , : 7 , 0 , 0 , - 4 , : 0 , - 5 , - 2 , 0 , : 0 , 3 , 1 , 0 , : - 9 , 3 , 1 , 4 , : 17 , 0 , 0 , - 7 , : 0 , - 3 , - 2 , - 1 , : - 20 , 34 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 291 , 300 ) / : - 10 , 0 , 1 , 5 , : - 4 , 0 , 0 , 2 , : 22 , - 87 , 0 , 0 , : - 4 , 0 , 0 , 2 , : - 3 , - 6 , - 2 , 1 , : - 16 , - 3 , - 1 , 7 , : 0 , - 3 , - 2 , 0 , : 4 , 0 , 0 , 0 , : - 68 , 39 , 0 , 0 , : 27 , 0 , 0 , - 14 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 301 , 310 ) / : 0 , - 4 , 0 , 0 , : - 25 , 0 , 0 , 0 , : - 12 , - 3 , - 2 , 6 , : 3 , 0 , 0 , - 1 , : 3 , 66 , 29 , - 1 , : 490 , 0 , 0 , - 213 , : - 22 , 93 , 49 , 12 , : - 7 , 28 , 15 , 4 , : - 3 , 13 , 7 , 2 , : - 46 , 14 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 311 , 320 ) / : - 5 , 0 , 0 , 0 , : 2 , 1 , 0 , 0 , : 0 , - 3 , 0 , 0 , : - 28 , 0 , 0 , 15 , : 5 , 0 , 0 , - 2 , : 0 , 3 , 0 , 0 , : - 11 , 0 , 0 , 5 , : 0 , 3 , 1 , 0 , : - 3 , 0 , 0 , 1 , : 25 , 106 , 57 , - 13 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 321 , 330 ) / : 5 , 21 , 11 , - 3 , : 1485 , 0 , 0 , 0 , : - 7 , - 32 , - 17 , 4 , : 0 , 5 , 3 , 0 , : - 6 , - 3 , - 2 , 3 , : 30 , - 6 , - 2 , - 13 , : - 4 , 4 , 0 , 0 , : - 19 , 0 , 0 , 10 , : 0 , 4 , 2 , - 1 , : 0 , 3 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 331 , 340 ) / : 4 , 0 , 0 , - 2 , : 0 , - 3 , - 1 , 0 , : - 3 , 0 , 0 , 0 , : 5 , 3 , 1 , - 2 , : 0 , 11 , 0 , 0 , : 118 , 0 , 0 , - 52 , : 0 , - 5 , - 3 , 0 , : - 28 , 36 , 0 , 0 , : 5 , - 5 , 0 , 0 , : 14 , - 59 , - 31 , - 8 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 341 , 350 ) / : 0 , 9 , 5 , 1 , : - 458 , 0 , 0 , 198 , : 0 , - 45 , - 20 , 0 , : 9 , 0 , 0 , - 5 , : 0 , - 3 , 0 , 0 , : 0 , - 4 , - 2 , - 1 , : 11 , 0 , 0 , - 6 , : 6 , 0 , 0 , - 2 , : - 16 , 23 , 0 , 0 , : 0 , - 4 , - 2 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 351 , 360 ) / : - 5 , 0 , 0 , 2 , : - 166 , 269 , 0 , 0 , : 15 , 0 , 0 , - 8 , : 10 , 0 , 0 , - 4 , : - 78 , 45 , 0 , 0 , : 0 , - 5 , - 2 , 0 , : 7 , 0 , 0 , - 4 , : - 5 , 328 , 0 , 0 , : 3 , 0 , 0 , - 2 , : 5 , 0 , 0 , - 2 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 361 , 370 ) / : 0 , 3 , 1 , 0 , : - 3 , 0 , 0 , 0 , : - 3 , 0 , 0 , 0 , : 0 , - 4 , - 2 , 0 , : - 1223 , - 26 , 0 , 0 , : 0 , 7 , 3 , 0 , : 3 , 0 , 0 , 0 , : 0 , 3 , 2 , 0 , : - 6 , 20 , 0 , 0 , : - 368 , 0 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 371 , 380 ) / : - 75 , 0 , 0 , 0 , : 11 , 0 , 0 , - 6 , : 3 , 0 , 0 , - 2 , : - 3 , 0 , 0 , 1 , : - 13 , - 30 , 0 , 0 , : 21 , 3 , 0 , 0 , : - 3 , 0 , 0 , 1 , : - 4 , 0 , 0 , 2 , : 8 , - 27 , 0 , 0 , : - 19 , - 11 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 381 , 390 ) / : - 4 , 0 , 0 , 2 , : 0 , 5 , 2 , 0 , : - 6 , 0 , 0 , 2 , : - 8 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , : - 14 , 0 , 0 , 6 , : 6 , 0 , 0 , 0 , : - 74 , 0 , 0 , 32 , : 0 , - 3 , - 1 , 0 , : 4 , 0 , 0 , - 2 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 391 , 400 ) / : 8 , 11 , 0 , 0 , : 0 , 3 , 2 , 0 , : - 262 , 0 , 0 , 114 , : 0 , - 4 , 0 , 0 , : - 7 , 0 , 0 , 4 , : 0 , - 27 , - 12 , 0 , : - 19 , - 8 , - 4 , 8 , : 202 , 0 , 0 , - 87 , : - 8 , 35 , 19 , 5 , : 0 , 4 , 2 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 401 , 410 ) / : 16 , - 5 , 0 , 0 , : 5 , 0 , 0 , - 3 , : 0 , - 3 , 0 , 0 , : 1 , 0 , 0 , 0 , : - 35 , - 48 , - 21 , 15 , : - 3 , - 5 , - 2 , 1 , : 6 , 0 , 0 , - 3 , : 3 , 0 , 0 , - 1 , : 0 , - 5 , 0 , 0 , : 12 , 55 , 29 , - 6 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 411 , 420 ) / : 0 , 5 , 3 , 0 , : - 598 , 0 , 0 , 0 , : - 3 , - 13 , - 7 , 1 , : - 5 , - 7 , - 3 , 2 , : 3 , 0 , 0 , - 1 , : 5 , - 7 , 0 , 0 , : 4 , 0 , 0 , - 2 , : 16 , - 6 , 0 , 0 , : 8 , - 3 , 0 , 0 , : 8 , - 31 , - 16 , - 4 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 421 , 430 ) / : 0 , 3 , 1 , 0 , : 113 , 0 , 0 , - 49 , : 0 , - 24 , - 10 , 0 , : 4 , 0 , 0 , - 2 , : 27 , 0 , 0 , 0 , : - 3 , 0 , 0 , 1 , : 0 , - 4 , - 2 , 0 , : 5 , 0 , 0 , - 2 , : 0 , - 3 , 0 , 0 , : - 13 , 0 , 0 , 6 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 431 , 440 ) / : 5 , 0 , 0 , - 2 , : - 18 , - 10 , - 4 , 8 , : - 4 , - 28 , 0 , 0 , : - 5 , 6 , 3 , 2 , : - 3 , 0 , 0 , 1 , : - 5 , - 9 , - 4 , 2 , : 17 , 0 , 0 , - 7 , : 11 , 4 , 0 , 0 , : 0 , - 6 , - 2 , 0 , : 83 , 15 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 441 , 450 ) / : - 4 , 0 , 0 , 2 , : 0 , - 114 , - 49 , 0 , : 117 , 0 , 0 , - 51 , : - 5 , 19 , 10 , 2 , : - 3 , 0 , 0 , 0 , : - 3 , 0 , 0 , 2 , : 0 , - 3 , - 1 , 0 , : 3 , 0 , 0 , 0 , : 0 , - 6 , - 2 , 0 , : 393 , 3 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 451 , 460 ) / : - 4 , 21 , 11 , 2 , : - 6 , 0 , - 1 , 3 , : - 3 , 8 , 4 , 1 , : 8 , 0 , 0 , 0 , : 18 , - 29 , - 13 , - 8 , : 8 , 34 , 18 , - 4 , : 89 , 0 , 0 , 0 , : 3 , 12 , 6 , - 1 , : 54 , - 15 , - 7 , - 24 , : 0 , 3 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 461 , 470 ) / : 3 , 0 , 0 , - 1 , : 0 , 35 , 0 , 0 , : - 154 , - 30 , - 13 , 67 , : 15 , 0 , 0 , 0 , : 0 , 4 , 2 , 0 , : 0 , 9 , 0 , 0 , : 80 , - 71 , - 31 , - 35 , : 0 , - 20 , - 9 , 0 , : 11 , 5 , 2 , - 5 , : 61 , - 96 , - 42 , - 27 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 471 , 480 ) / : 14 , 9 , 4 , - 6 , : - 11 , - 6 , - 3 , 5 , : 0 , - 3 , - 1 , 0 , : 123 , - 415 , - 180 , - 53 , : 0 , 0 , 0 , - 35 , : - 5 , 0 , 0 , 0 , : 7 , - 32 , - 17 , - 4 , : 0 , - 9 , - 5 , 0 , : 0 , - 4 , 2 , 0 , : - 89 , 0 , 0 , 38 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 481 , 490 ) / : 0 , - 86 , - 19 , - 6 , : 0 , 0 , - 19 , 6 , : - 123 , - 416 , - 180 , 53 , : 0 , - 3 , - 1 , 0 , : 12 , - 6 , - 3 , - 5 , : - 13 , 9 , 4 , 6 , : 0 , - 15 , - 7 , 0 , : 3 , 0 , 0 , - 1 , : - 62 , - 97 , - 42 , 27 , : - 11 , 5 , 2 , 5 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 491 , 500 ) / : 0 , - 19 , - 8 , 0 , : - 3 , 0 , 0 , 1 , : 0 , 4 , 2 , 0 , : 0 , 3 , 0 , 0 , : 0 , 4 , 2 , 0 , : - 85 , - 70 , - 31 , 37 , : 163 , - 12 , - 5 , - 72 , : - 63 , - 16 , - 7 , 28 , : - 21 , - 32 , - 14 , 9 , : 0 , - 3 , - 1 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 501 , 510 ) / : 3 , 0 , 0 , - 2 , : 0 , 8 , 0 , 0 , : 3 , 10 , 4 , - 1 , : 3 , 0 , 0 , - 1 , : 0 , - 7 , - 3 , 0 , : 0 , - 4 , - 2 , 0 , : 6 , 19 , 0 , 0 , : 5 , - 173 , - 75 , - 2 , : 0 , - 7 , - 3 , 0 , : 7 , - 12 , - 5 , - 3 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 511 , 520 ) / : - 3 , 0 , 0 , 2 , : 3 , - 4 , - 2 , - 1 , : 74 , 0 , 0 , - 32 , : - 3 , 12 , 6 , 2 , : 26 , - 14 , - 6 , - 11 , : 19 , 0 , 0 , - 8 , : 6 , 24 , 13 , - 3 , : 83 , 0 , 0 , 0 , : 0 , - 10 , - 5 , 0 , : 11 , - 3 , - 1 , - 5 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 521 , 530 ) / : 3 , 0 , 1 , - 1 , : 3 , 0 , 0 , - 1 , : - 4 , 0 , 0 , 0 , : 5 , - 23 , - 12 , - 3 , : - 339 , 0 , 0 , 147 , : 0 , - 10 , - 5 , 0 , : 5 , 0 , 0 , 0 , : 3 , 0 , 0 , - 1 , : 0 , - 4 , - 2 , 0 , : 18 , - 3 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 531 , 540 ) / : 9 , - 11 , - 5 , - 4 , : - 8 , 0 , 0 , 4 , : 3 , 0 , 0 , - 1 , : 0 , 9 , 0 , 0 , : 6 , - 9 , - 4 , - 2 , : - 4 , - 12 , 0 , 0 , : 67 , - 91 , - 39 , - 29 , : 30 , - 18 , - 8 , - 13 , : 0 , 0 , 0 , 0 , : 0 , - 114 , - 50 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 541 , 550 ) / : 0 , 0 , 0 , 23 , : 517 , 16 , 7 , - 224 , : 0 , - 7 , - 3 , 0 , : 143 , - 3 , - 1 , - 62 , : 29 , 0 , 0 , - 13 , : - 4 , 0 , 0 , 2 , : - 6 , 0 , 0 , 3 , : 5 , 12 , 5 , - 2 , : - 25 , 0 , 0 , 11 , : - 3 , 0 , 0 , 1 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 551 , 560 ) / : 0 , 4 , 2 , 0 , : - 22 , 12 , 5 , 10 , : 50 , 0 , 0 , - 22 , : 0 , 7 , 4 , 0 , : 0 , 3 , 1 , 0 , : - 4 , 4 , 2 , 2 , : - 5 , - 11 , - 5 , 2 , : 0 , 4 , 2 , 0 , : 4 , 17 , 9 , - 2 , : 59 , 0 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 561 , 570 ) / : 0 , - 4 , - 2 , 0 , : - 8 , 0 , 0 , 4 , : - 3 , 0 , 0 , 0 , : 4 , - 15 , - 8 , - 2 , : 370 , - 8 , 0 , - 160 , : 0 , 0 , - 3 , 0 , : 0 , 3 , 1 , 0 , : - 6 , 3 , 1 , 3 , : 0 , 6 , 0 , 0 , : - 10 , 0 , 0 , 4 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 571 , 580 ) / : 0 , 9 , 4 , 0 , : 4 , 17 , 7 , - 2 , : 34 , 0 , 0 , - 15 , : 0 , 5 , 3 , 0 , : - 5 , 0 , 0 , 2 , : - 37 , - 7 , - 3 , 16 , : 3 , 13 , 7 , - 2 , : 40 , 0 , 0 , 0 , : 0 , - 3 , - 2 , 0 , : - 184 , - 3 , - 1 , 80 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 581 , 590 ) / : - 3 , 0 , 0 , 1 , : - 3 , 0 , 0 , 0 , : 0 , - 10 , - 6 , - 1 , : 31 , - 6 , 0 , - 13 , : - 3 , - 32 , - 14 , 1 , : - 7 , 0 , 0 , 3 , : 0 , - 8 , - 4 , 0 , : 3 , - 4 , 0 , 0 , : 0 , 4 , 0 , 0 , : 0 , 3 , 1 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 591 , 600 ) / : 19 , - 23 , - 10 , 2 , : 0 , 0 , 0 , - 10 , : 0 , 3 , 2 , 0 , : 0 , 9 , 5 , - 1 , : 28 , 0 , 0 , 0 , : 0 , - 7 , - 4 , 0 , : 8 , - 4 , 0 , - 4 , : 0 , 0 , - 2 , 0 , : 0 , 3 , 0 , 0 , : - 3 , 0 , 0 , 1 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 601 , 610 ) / : - 9 , 0 , 1 , 4 , : 3 , 12 , 5 , - 1 , : 17 , - 3 , - 1 , 0 , : 0 , 7 , 4 , 0 , : 19 , 0 , 0 , 0 , : 0 , - 5 , - 3 , 0 , : 14 , - 3 , 0 , - 1 , : 0 , 0 , - 1 , 0 , : 0 , 0 , 0 , - 5 , : 0 , 5 , 3 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 611 , 620 ) / : 13 , 0 , 0 , 0 , : 0 , - 3 , - 2 , 0 , : 2 , 9 , 4 , 3 , : 0 , 0 , 0 , - 4 , : 8 , 0 , 0 , 0 , : 0 , 4 , 2 , 0 , : 6 , 0 , 0 , - 3 , : 6 , 0 , 0 , 0 , : 0 , 3 , 1 , 0 , : 5 , 0 , 0 , - 2 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 621 , 630 ) / : 3 , 0 , 0 , - 1 , : - 3 , 0 , 0 , 0 , : 6 , 0 , 0 , 0 , : 7 , 0 , 0 , 0 , : - 4 , 0 , 0 , 0 , : 4 , 0 , 0 , 0 , : 6 , 0 , 0 , 0 , : 0 , - 4 , 0 , 0 , : 0 , - 4 , 0 , 0 , : 5 , 0 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 631 , 640 ) / : - 3 , 0 , 0 , 0 , : 4 , 0 , 0 , 0 , : - 5 , 0 , 0 , 0 , : 4 , 0 , 0 , 0 , : 0 , 3 , 0 , 0 , : 13 , 0 , 0 , 0 , : 21 , 11 , 0 , 0 , : 0 , - 5 , 0 , 0 , : 0 , - 5 , - 2 , 0 , : 0 , 5 , 3 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 641 , 650 ) / : 0 , - 5 , 0 , 0 , : - 3 , 0 , 0 , 2 , : 20 , 10 , 0 , 0 , : - 34 , 0 , 0 , 0 , : - 19 , 0 , 0 , 0 , : 3 , 0 , 0 , - 2 , : - 3 , 0 , 0 , 1 , : - 6 , 0 , 0 , 3 , : - 4 , 0 , 0 , 0 , : 3 , 0 , 0 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 651 , 660 ) / : 3 , 0 , 0 , 0 , : 4 , 0 , 0 , 0 , : 3 , 0 , 0 , - 1 , : 6 , 0 , 0 , - 3 , : - 8 , 0 , 0 , 3 , : 0 , 3 , 1 , 0 , : - 3 , 0 , 0 , 0 , : 0 , - 3 , - 2 , 0 , : 126 , - 63 , - 27 , - 55 , : - 5 , 0 , 1 , 2 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 661 , 670 ) / : - 3 , 28 , 15 , 2 , : 5 , 0 , 1 , - 2 , : 0 , 9 , 4 , 1 , : 0 , 9 , 4 , - 1 , : - 126 , - 63 , - 27 , 55 , : 3 , 0 , 0 , - 1 , : 21 , - 11 , - 6 , - 11 , : 0 , - 4 , 0 , 0 , : - 21 , - 11 , - 6 , 11 , : - 3 , 0 , 0 , 1 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 671 , 680 ) / : 0 , 3 , 1 , 0 , : 8 , 0 , 0 , - 4 , : - 6 , 0 , 0 , 3 , : - 3 , 0 , 0 , 1 , : 3 , 0 , 0 , - 1 , : - 3 , 0 , 0 , 1 , : - 5 , 0 , 0 , 2 , : 24 , - 12 , - 5 , - 11 , : 0 , 3 , 1 , 0 , : 0 , 3 , 1 , 0 / DATA ( ( ICPL ( I , J ), I = 1 , 4 ), J = 681 , 687 ) / : 0 , 3 , 2 , 0 , : - 24 , - 12 , - 5 , 10 , : 4 , 0 , - 1 , - 2 , : 13 , 0 , 0 , - 6 , : 7 , 0 , 0 , - 3 , : 3 , 0 , 0 , - 1 , : 3 , 0 , 0 , - 1 / * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *  Interval between fundamental epoch J2000.0 and given date (JC). T = ( ( DATE1 - DJ0 ) + DATE2 ) / DJC *  ------------------- *  LUNI-SOLAR NUTATION *  ------------------- * *  Fundamental (Delaunay) arguments from Simon et al. (1994) * *  Mean anomaly of the Moon. EL = MOD ( 48586 8.249036D0 + : T * ( 171791592 3.2178D0 + : T * ( 3 1.8792D0 + : T * ( 0.051635D0 + : T * ( - 0.00024470D0 )))), TURNAS ) * DAS2R *  Mean anomaly of the Sun. ELP = MOD ( 128710 4.79305D0 + : T * ( 12959658 1.0481D0 + : T * ( - 0.5532D0 + : T * ( 0.000136D0 + : T * ( - 0.00001149D0 )))), TURNAS ) * DAS2R *  Mean argument of the latitude of the Moon. F = MOD ( 33577 9.526232D0 + : T * ( 173952726 2.8478D0 + : T * ( - 1 2.7512D0 + : T * ( - 0.001037D0 + : T * ( 0.00000417D0 )))), TURNAS ) * DAS2R *  Mean elongation of the Moon from the Sun. D = MOD ( 107226 0.70369D0 + : T * ( 160296160 1.2090D0 + : T * ( - 6.3706D0 + : T * ( 0.006593D0 + : T * ( - 0.00003169D0 )))), TURNAS ) * DAS2R *  Mean longitude of the ascending node of the Moon. OM = MOD ( 45016 0.398036D0 + : T * ( - 696289 0.5431D0 + : T * ( 7.4722D0 + : T * ( 0.007702D0 + : T * ( - 0.00005939D0 )))), TURNAS ) * DAS2R *  Initialize the nutation values. DP = 0 D0 DE = 0 D0 *  Summation of luni-solar nutation series (in reverse order). DO 100 I = NLS , 1 , - 1 *     Argument and functions. ARG = MOD ( DBLE ( NALS ( 1 , I ) ) * EL + : DBLE ( NALS ( 2 , I ) ) * ELP + : DBLE ( NALS ( 3 , I ) ) * F + : DBLE ( NALS ( 4 , I ) ) * D + : DBLE ( NALS ( 5 , I ) ) * OM , D2PI ) SARG = SIN ( ARG ) CARG = COS ( ARG ) *     Term. DP = DP + ( CLS ( 1 , I ) + CLS ( 2 , I ) * T ) * SARG : + CLS ( 3 , I ) * CARG DE = DE + ( CLS ( 4 , I ) + CLS ( 5 , I ) * T ) * CARG : + CLS ( 6 , I ) * SARG 100 CONTINUE *  Convert from 0.1 microarcsec units to radians. DPSILS = DP * U2R DEPSLS = DE * U2R *  ------------------ *  PLANETARY NUTATION *  ------------------ *  Mean anomaly of the Moon. AL = MOD ( 2.35555598D0 + 832 8.6914269554D0 * T , D2PI ) *  Mean anomaly of the Sun. ALSU = MOD ( 6.24006013D0 + 62 8.301955D0 * T , D2PI ) *  Mean argument of the latitude of the Moon. AF = MOD ( 1.627905234D0 + 843 3.466158131D0 * T , D2PI ) *  Mean elongation of the Moon from the Sun. AD = MOD ( 5.198466741D0 + 777 1.3771468121D0 * T , D2PI ) *  Mean longitude of the ascending node of the Moon. AOM = MOD ( 2.18243920D0 - 3 3.757045D0 * T , D2PI ) *  General accumulated precession in longitude. APA = ( 0.02438175D0 + 0.00000538691D0 * T ) * T *  Planetary longitudes, Mercury through Neptune (Souchay et al. 1999). ALME = MOD ( 4.402608842D0 + 260 8.7903141574D0 * T , D2PI ) ALVE = MOD ( 3.176146697D0 + 102 1.3285546211D0 * T , D2PI ) ALEA = MOD ( 1.753470314D0 + 62 8.3075849991D0 * T , D2PI ) ALMA = MOD ( 6.203480913D0 + 33 4.0612426700D0 * T , D2PI ) ALJU = MOD ( 0.599546497D0 + 5 2.9690962641D0 * T , D2PI ) ALSA = MOD ( 0.874016757D0 + 2 1.3299104960D0 * T , D2PI ) ALUR = MOD ( 5.481293871D0 + 7.4781598567D0 * T , D2PI ) ALNE = MOD ( 5.321159000D0 + 3.8127774000D0 * T , D2PI ) *  Initialize the nutation values. DP = 0 D0 DE = 0 D0 *  Summation of planetary nutation series (in reverse order). DO 200 I = NPL , 1 , - 1 *     Argument and functions. ARG = MOD ( DBLE ( NAPL ( 1 , I ) ) * AL + : DBLE ( NAPL ( 2 , I ) ) * ALSU + : DBLE ( NAPL ( 3 , I ) ) * AF + : DBLE ( NAPL ( 4 , I ) ) * AD + : DBLE ( NAPL ( 5 , I ) ) * AOM + : DBLE ( NAPL ( 6 , I ) ) * ALME + : DBLE ( NAPL ( 7 , I ) ) * ALVE + : DBLE ( NAPL ( 8 , I ) ) * ALEA + : DBLE ( NAPL ( 9 , I ) ) * ALMA + : DBLE ( NAPL ( 10 , I ) ) * ALJU + : DBLE ( NAPL ( 11 , I ) ) * ALSA + : DBLE ( NAPL ( 12 , I ) ) * ALUR + : DBLE ( NAPL ( 13 , I ) ) * ALNE + : DBLE ( NAPL ( 14 , I ) ) * APA , D2PI ) SARG = SIN ( ARG ) CARG = COS ( ARG ) *     Term. DP = DP + DBLE ( ICPL ( 1 , I )) * SARG + DBLE ( ICPL ( 2 , I )) * CARG DE = DE + DBLE ( ICPL ( 3 , I )) * SARG + DBLE ( ICPL ( 4 , I )) * CARG 200 CONTINUE *  Convert from 0.1 microarcsec units to radians. DPSIPL = DP * U2R DEPSPL = DE * U2R *  ----- *  TOTAL *  ----- *  Add planetary and luni-solar components. DPSI = DPSIPL + DPSILS DEPS = DEPSPL + DEPSLS END SUBROUTINE NU2000K ( DATE1 , DATE2 , DPSI , DEPS ) *+ *  - - - - - - - - *   N U 2 0 0 0 K *  - - - - - - - - * *  Nutation, IAU 2000A model (MHB_2000 without FCN) MODIFIED.  Series *     truncated for speed of execution, and using Simon et al. (1994) *     fundamental arguments throughout.  Accuracy, compared to *     IAU 2000 A series, is 0.1 mas in delta psi and 0.04 mas in *     delta epsilon and delta psi sin(epsilon) over 6 centuries *     centered at year 2000 (99% of errors less than these values). * *  Modified form of NU2000A, by Pat Wallace, given in subroutine annex *  to Chapter 5 of IERS Conventions (2003). * *  Given: *     DATE1,DATE2    d   TT date (JD = DATE1+DATE2) * *  Returned: *     DPSI,DEPS      d   nutation (luni-solar + planetary, radians) * *  This revision:  2002 November 25 *                  2004 March 1     (by G. Kaplan) * *----------------------------------------------------------------------- IMPLICIT NONE DOUBLE PRECISION DATE1 , DATE2 , DPSI , DEPS *  Arcseconds to radians DOUBLE PRECISION DAS2R PARAMETER ( DAS2R = 4.848136811095359935899141D-6 ) *  Milliarcseconds to radians DOUBLE PRECISION DMAS2R PARAMETER ( DMAS2R = DAS2R / 1 D3 ) *  Arc seconds in a full circle DOUBLE PRECISION TURNAS PARAMETER ( TURNAS = 1296000 D0 ) *  2Pi DOUBLE PRECISION D2PI PARAMETER ( D2PI = 6.283185307179586476925287D0 ) *  Units of 0.1 microarcsecond to radians DOUBLE PRECISION U2R PARAMETER ( U2R = DAS2R / 1 D7 ) *  Reference epoch (J2000), JD DOUBLE PRECISION DJ0 PARAMETER ( DJ0 = 2451545 D0 ) *  Days per Julian century DOUBLE PRECISION DJC PARAMETER ( DJC = 36525 D0 ) *  Miscellaneous DOUBLE PRECISION T , EL , ELP , F , D , OM , ARG , DP , DE , SARG , CARG , : DPSILS , DEPSLS , : ALME , ALVE , ALEA , ALMA , ALJU , ALSA , ALUR , ALNE , : APA , : DPSIPL , DEPSPL INTEGER I , J *  ------------------------- *  Luni-Solar nutation model *  ------------------------- *  Number of terms in the luni-solar nutation model INTEGER NLS PARAMETER ( NLS = 323 ) *  Coefficients for fundamental arguments INTEGER NALS ( 5 , NLS ) *  Longitude and obliquity coefficients DOUBLE PRECISION CLS ( 6 , NLS ) *  --------------- *  Planetary terms *  --------------- *  Number of terms in the planetary nutation model INTEGER NPL PARAMETER ( NPL = 165 ) *  Coefficients for fundamental arguments INTEGER NAPL ( 14 , NPL ) *  Longitude and obliquity coefficients DOUBLE PRECISION CPL ( 4 , NPL ) *  ---------------------------------------- *  Tables of argument and term coefficients *  ---------------------------------------- * *  Luni-Solar argument multipliers: *               L     L'    F     D     Om * DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 1 , 20 ) / : 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 2 , - 2 , 2 , : 0 , 0 , 2 , 0 , 2 , : 0 , 0 , 0 , 0 , 2 , : 0 , 1 , 0 , 0 , 0 , : 0 , 1 , 2 , - 2 , 2 , : 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 1 , : 1 , 0 , 2 , 0 , 2 , : 0 , - 1 , 2 , - 2 , 2 , : 0 , 0 , 2 , - 2 , 1 , : - 1 , 0 , 2 , 0 , 2 , : - 1 , 0 , 0 , 2 , 0 , : 1 , 0 , 0 , 0 , 1 , : - 1 , 0 , 0 , 0 , 1 , : - 1 , 0 , 2 , 2 , 2 , : 1 , 0 , 2 , 0 , 1 , : - 2 , 0 , 2 , 0 , 1 , : 0 , 0 , 0 , 2 , 0 , : 0 , 0 , 2 , 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 21 , 40 ) / : 0 , - 2 , 2 , - 2 , 2 , : - 2 , 0 , 0 , 2 , 0 , : 2 , 0 , 2 , 0 , 2 , : 1 , 0 , 2 , - 2 , 2 , : - 1 , 0 , 2 , 0 , 1 , : 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 0 , : 0 , 1 , 0 , 0 , 1 , : - 1 , 0 , 0 , 2 , 1 , : 0 , 2 , 2 , - 2 , 2 , : 0 , 0 , - 2 , 2 , 0 , : 1 , 0 , 0 , - 2 , 1 , : 0 , - 1 , 0 , 0 , 1 , : - 1 , 0 , 2 , 2 , 1 , : 0 , 2 , 0 , 0 , 0 , : 1 , 0 , 2 , 2 , 2 , : - 2 , 0 , 2 , 0 , 0 , : 0 , 1 , 2 , 0 , 2 , : 0 , 0 , 2 , 2 , 1 , : 0 , - 1 , 2 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 41 , 60 ) / : 0 , 0 , 0 , 2 , 1 , : 1 , 0 , 2 , - 2 , 1 , : 2 , 0 , 2 , - 2 , 2 , : - 2 , 0 , 0 , 2 , 1 , : 2 , 0 , 2 , 0 , 1 , : 0 , - 1 , 2 , - 2 , 1 , : 0 , 0 , 0 , - 2 , 1 , : - 1 , - 1 , 0 , 2 , 0 , : 2 , 0 , 0 , - 2 , 1 , : 1 , 0 , 0 , 2 , 0 , : 0 , 1 , 2 , - 2 , 1 , : 1 , - 1 , 0 , 0 , 0 , : - 2 , 0 , 2 , 0 , 2 , : 3 , 0 , 2 , 0 , 2 , : 0 , - 1 , 0 , 2 , 0 , : 1 , - 1 , 2 , 0 , 2 , : 0 , 0 , 0 , 1 , 0 , : - 1 , - 1 , 2 , 2 , 2 , : - 1 , 0 , 2 , 0 , 0 , : 0 , - 1 , 2 , 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 61 , 80 ) / : - 2 , 0 , 0 , 0 , 1 , : 1 , 1 , 2 , 0 , 2 , : 2 , 0 , 0 , 0 , 1 , : - 1 , 1 , 0 , 1 , 0 , : 1 , 1 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 0 , : - 1 , 0 , 2 , - 2 , 1 , : 1 , 0 , 0 , 0 , 2 , : - 1 , 0 , 0 , 1 , 0 , : 0 , 0 , 2 , 1 , 2 , : - 1 , 0 , 2 , 4 , 2 , : - 1 , 1 , 0 , 1 , 1 , : 0 , - 2 , 2 , - 2 , 1 , : 1 , 0 , 2 , 2 , 1 , : - 2 , 0 , 2 , 2 , 2 , : - 1 , 0 , 0 , 0 , 2 , : 1 , 1 , 2 , - 2 , 2 , : - 2 , 0 , 2 , 4 , 2 , : - 1 , 0 , 4 , 0 , 2 , : 2 , 0 , 2 , - 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 81 , 100 ) / : 2 , 0 , 2 , 2 , 2 , : 1 , 0 , 0 , 2 , 1 , : 3 , 0 , 0 , 0 , 0 , : 3 , 0 , 2 , - 2 , 2 , : 0 , 0 , 4 , - 2 , 2 , : 0 , 1 , 2 , 0 , 1 , : 0 , 0 , - 2 , 2 , 1 , : 0 , 0 , 2 , - 2 , 3 , : - 1 , 0 , 0 , 4 , 0 , : 2 , 0 , - 2 , 0 , 1 , : - 2 , 0 , 0 , 4 , 0 , : - 1 , - 1 , 0 , 2 , 1 , : - 1 , 0 , 0 , 1 , 1 , : 0 , 1 , 0 , 0 , 2 , : 0 , 0 , - 2 , 0 , 1 , : 0 , - 1 , 2 , 0 , 1 , : 0 , 0 , 2 , - 1 , 2 , : 0 , 0 , 2 , 4 , 2 , : - 2 , - 1 , 0 , 2 , 0 , : 1 , 1 , 0 , - 2 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 101 , 120 ) / : - 1 , 1 , 0 , 2 , 0 , : - 1 , 1 , 0 , 1 , 2 , : 1 , - 1 , 0 , 0 , 1 , : 1 , - 1 , 2 , 2 , 2 , : - 1 , 1 , 2 , 2 , 2 , : 3 , 0 , 2 , 0 , 1 , : 0 , 1 , - 2 , 2 , 0 , : - 1 , 0 , 0 , - 2 , 1 , : 0 , 1 , 2 , 2 , 2 , : - 1 , - 1 , 2 , 2 , 1 , : 0 , - 1 , 0 , 0 , 2 , : 1 , 0 , 2 , - 4 , 1 , : - 1 , 0 , - 2 , 2 , 0 , : 0 , - 1 , 2 , 2 , 1 , : 2 , - 1 , 2 , 0 , 2 , : 0 , 0 , 0 , 2 , 2 , : 1 , - 1 , 2 , 0 , 1 , : - 1 , 1 , 2 , 0 , 2 , : 0 , 1 , 0 , 2 , 0 , : 0 , - 1 , - 2 , 2 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 121 , 140 ) / : 0 , 3 , 2 , - 2 , 2 , : 0 , 0 , 0 , 1 , 1 , : - 1 , 0 , 2 , 2 , 0 , : 2 , 1 , 2 , 0 , 2 , : 1 , 1 , 0 , 0 , 1 , : 1 , 1 , 2 , 0 , 1 , : 2 , 0 , 0 , 2 , 0 , : 1 , 0 , - 2 , 2 , 0 , : - 1 , 0 , 0 , 2 , 2 , : 0 , 1 , 0 , 1 , 0 , : 0 , 1 , 0 , - 2 , 1 , : - 1 , 0 , 2 , - 2 , 2 , : 0 , 0 , 0 , - 1 , 1 , : - 1 , 1 , 0 , 0 , 1 , : 1 , 0 , 2 , - 1 , 2 , : 1 , - 1 , 0 , 2 , 0 , : 0 , 0 , 0 , 4 , 0 , : 1 , 0 , 2 , 1 , 2 , : 0 , 0 , 2 , 1 , 1 , : 1 , 0 , 0 , - 2 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 141 , 160 ) / : - 1 , 0 , 2 , 4 , 1 , : 1 , 0 , - 2 , 0 , 1 , : 1 , 1 , 2 , - 2 , 1 , : 0 , 0 , 2 , 2 , 0 , : - 1 , 0 , 2 , - 1 , 1 , : - 2 , 0 , 2 , 2 , 1 , : 4 , 0 , 2 , 0 , 2 , : 2 , - 1 , 0 , 0 , 0 , : 2 , 1 , 2 , - 2 , 2 , : 0 , 1 , 2 , 1 , 2 , : 1 , 0 , 4 , - 2 , 2 , : - 1 , - 1 , 0 , 0 , 1 , : 0 , 1 , 0 , 2 , 1 , : - 2 , 0 , 2 , 4 , 1 , : 2 , 0 , 2 , 0 , 0 , : 1 , 0 , 0 , 1 , 0 , : - 1 , 0 , 0 , 4 , 1 , : - 1 , 0 , 4 , 0 , 1 , : 2 , 0 , 2 , 2 , 1 , : 0 , 0 , 2 , - 3 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 161 , 180 ) / : - 1 , - 2 , 0 , 2 , 0 , : 2 , 1 , 0 , 0 , 0 , : 0 , 0 , 4 , 0 , 2 , : 0 , 0 , 0 , 0 , 3 , : 0 , 3 , 0 , 0 , 0 , : 0 , 0 , 2 , - 4 , 1 , : 0 , - 1 , 0 , 2 , 1 , : 0 , 0 , 0 , 4 , 1 , : - 1 , - 1 , 2 , 4 , 2 , : 1 , 0 , 2 , 4 , 2 , : - 2 , 2 , 0 , 2 , 0 , : - 2 , - 1 , 2 , 0 , 1 , : - 2 , 0 , 0 , 2 , 2 , : - 1 , - 1 , 2 , 0 , 2 , : 0 , 0 , 4 , - 2 , 1 , : 3 , 0 , 2 , - 2 , 1 , : - 2 , - 1 , 0 , 2 , 1 , : 1 , 0 , 0 , - 1 , 1 , : 0 , - 2 , 0 , 2 , 0 , : - 2 , 0 , 0 , 4 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 181 , 200 ) / : - 3 , 0 , 0 , 0 , 1 , : 1 , 1 , 2 , 2 , 2 , : 0 , 0 , 2 , 4 , 1 , : 3 , 0 , 2 , 2 , 2 , : - 1 , 1 , 2 , - 2 , 1 , : 2 , 0 , 0 , - 4 , 1 , : 0 , 0 , 0 , - 2 , 2 , : 2 , 0 , 2 , - 4 , 1 , : - 1 , 1 , 0 , 2 , 1 , : 0 , 0 , 2 , - 1 , 1 , : 0 , - 2 , 2 , 2 , 2 , : 2 , 0 , 0 , 2 , 1 , : 4 , 0 , 2 , - 2 , 2 , : 2 , 0 , 0 , - 2 , 2 , : 0 , 2 , 0 , 0 , 1 , : 1 , 0 , 0 , - 4 , 1 , : 0 , 2 , 2 , - 2 , 1 , : - 3 , 0 , 0 , 4 , 0 , : - 1 , 1 , 2 , 0 , 1 , : - 1 , - 1 , 0 , 4 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 201 , 220 ) / : - 1 , - 2 , 2 , 2 , 2 , : - 2 , - 1 , 2 , 4 , 2 , : 1 , - 1 , 2 , 2 , 1 , : - 2 , 1 , 0 , 2 , 0 , : - 2 , 1 , 2 , 0 , 1 , : 2 , 1 , 0 , - 2 , 1 , : - 3 , 0 , 2 , 0 , 1 , : - 2 , 0 , 2 , - 2 , 1 , : - 1 , 1 , 0 , 2 , 2 , : 0 , - 1 , 2 , - 1 , 2 , : - 1 , 0 , 4 , - 2 , 2 , : 0 , - 2 , 2 , 0 , 2 , : - 1 , 0 , 2 , 1 , 2 , : 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 2 , 0 , 3 , : - 2 , 0 , 4 , 0 , 2 , : - 1 , 0 , - 2 , 0 , 1 , : - 1 , 1 , 2 , 2 , 1 , : 3 , 0 , 0 , 0 , 1 , : - 1 , 0 , 2 , 3 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 221 , 240 ) / : 2 , - 1 , 2 , 0 , 1 , : 0 , 1 , 2 , 2 , 1 , : 0 , - 1 , 2 , 4 , 2 , : 2 , - 1 , 2 , 2 , 2 , : 0 , 2 , - 2 , 2 , 0 , : - 1 , - 1 , 2 , - 1 , 1 , : 0 , - 2 , 0 , 0 , 1 , : 1 , 0 , 2 , - 4 , 2 , : 1 , - 1 , 0 , - 2 , 1 , : - 1 , - 1 , 2 , 0 , 1 , : 1 , - 1 , 2 , - 2 , 2 , : - 2 , - 1 , 0 , 4 , 0 , : - 1 , 0 , 0 , 3 , 0 , : - 2 , - 1 , 2 , 2 , 2 , : 0 , 2 , 2 , 0 , 2 , : 1 , 1 , 0 , 2 , 0 , : 2 , 0 , 2 , - 1 , 2 , : 1 , 0 , 2 , 1 , 1 , : 4 , 0 , 0 , 0 , 0 , : 2 , 1 , 2 , 0 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 241 , 260 ) / : 3 , - 1 , 2 , 0 , 2 , : - 2 , 2 , 0 , 2 , 1 , : 1 , 0 , 2 , - 3 , 1 , : 1 , 1 , 2 , - 4 , 1 , : - 1 , - 1 , 2 , - 2 , 1 , : 0 , - 1 , 0 , - 1 , 1 , : 0 , - 1 , 0 , - 2 , 1 , : - 2 , 0 , 0 , 0 , 2 , : - 2 , 0 , - 2 , 2 , 0 , : - 1 , 0 , - 2 , 4 , 0 , : 1 , - 2 , 0 , 0 , 0 , : 0 , 1 , 0 , 1 , 1 , : - 1 , 2 , 0 , 2 , 0 , : 1 , - 1 , 2 , - 2 , 1 , : 1 , 2 , 2 , - 2 , 2 , : 2 , - 1 , 2 , - 2 , 2 , : 1 , 0 , 2 , - 1 , 1 , : 2 , 1 , 2 , - 2 , 1 , : - 2 , 0 , 0 , - 2 , 1 , : 1 , - 2 , 2 , 0 , 2 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 261 , 280 ) / : 0 , 1 , 2 , 1 , 1 , : 1 , 0 , 4 , - 2 , 1 , : - 2 , 0 , 4 , 2 , 2 , : 1 , 1 , 2 , 1 , 2 , : 1 , 0 , 0 , 4 , 0 , : 1 , 0 , 2 , 2 , 0 , : 2 , 0 , 2 , 1 , 2 , : 3 , 1 , 2 , 0 , 2 , : 4 , 0 , 2 , 0 , 1 , : - 2 , - 1 , 2 , 0 , 0 , : 0 , 1 , - 2 , 2 , 1 , : 1 , 0 , - 2 , 1 , 0 , : 2 , - 1 , 0 , - 2 , 1 , : - 1 , 0 , 2 , - 1 , 2 , : 1 , 0 , 2 , - 3 , 2 , : 0 , 1 , 2 , - 2 , 3 , : - 1 , 0 , - 2 , 2 , 1 , : 0 , 0 , 2 , - 4 , 2 , : 2 , 0 , 2 , - 4 , 2 , : 0 , 0 , 4 , - 4 , 4 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 281 , 300 ) / : 0 , 0 , 4 , - 4 , 2 , : - 2 , 0 , 0 , 3 , 0 , : 1 , 0 , - 2 , 2 , 1 , : - 3 , 0 , 2 , 2 , 2 , : - 2 , 0 , 2 , 2 , 0 , : 2 , - 1 , 0 , 0 , 1 , : 1 , 1 , 0 , 1 , 0 , : 0 , 1 , 4 , - 2 , 2 , : - 1 , 1 , 0 , - 2 , 1 , : 0 , 0 , 0 , - 4 , 1 , : 1 , - 1 , 0 , 2 , 1 , : 1 , 1 , 0 , 2 , 1 , : - 1 , 2 , 2 , 2 , 2 , : 3 , 1 , 2 , - 2 , 2 , : 0 , - 1 , 0 , 4 , 0 , : 2 , - 1 , 0 , 2 , 0 , : 0 , 0 , 4 , 0 , 1 , : 2 , 0 , 4 , - 2 , 2 , : - 1 , - 1 , 2 , 4 , 1 , : 1 , 0 , 0 , 4 , 1 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 301 , 320 ) / : 1 , - 2 , 2 , 2 , 2 , : 0 , 0 , 2 , 3 , 2 , : - 1 , 1 , 2 , 4 , 2 , : 3 , 0 , 0 , 2 , 0 , : - 1 , 0 , 4 , 2 , 2 , : - 2 , 0 , 2 , 6 , 2 , : - 1 , 0 , 2 , 6 , 2 , : 1 , 1 , - 2 , 1 , 0 , : - 1 , 0 , 0 , 1 , 2 , : - 1 , - 1 , 0 , 1 , 0 , : - 2 , 0 , 0 , 1 , 0 , : 0 , 0 , - 2 , 1 , 0 , : 1 , - 1 , - 2 , 2 , 0 , : 1 , 2 , 0 , 0 , 0 , : 3 , 0 , 2 , 0 , 0 , : 0 , - 1 , 1 , - 1 , 1 , : - 1 , 0 , 1 , 0 , 3 , : - 1 , 0 , 1 , 0 , 2 , : - 1 , 0 , 1 , 0 , 1 , : - 1 , 0 , 1 , 0 , 0 / DATA ( ( NALS ( I , J ), I = 1 , 5 ), J = 321 , 323 ) / : 0 , 0 , 1 , 0 , 2 , : 0 , 0 , 1 , 0 , 1 , : 0 , 0 , 1 , 0 , 0 / * *  Luni-Solar nutation coefficients, unit 1e-7 arcsec: *  longitude (sin, t*sin, cos), obliquity (cos, t*cos, sin) * DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 1 , 20 ) / : - 17206416 1.D0 , - 17466 6.D0 , 3338 6.D0 , 9205233 1.D0 , 908 6.D0 , 1537 7.D0 , : - 1317090 6.D0 , - 167 5.D0 , - 1369 6.D0 , 573033 6.D0 , - 301 5.D0 , - 458 7.D0 , : - 227641 3.D0 , - 23 4.D0 , 279 6.D0 , 97845 9.D0 , - 48 5.D0 , 137 4.D0 , : 207455 4.D0 , 20 7.D0 , - 69 8.D0 , - 89749 2.D0 , 47 0.D0 , - 29 1.D0 , : 147587 7.D0 , - 363 3.D0 , 1181 7.D0 , 7387 1.D0 , - 18 4.D0 , - 192 4.D0 , : - 51682 1.D0 , 122 6.D0 , - 52 4.D0 , 22438 6.D0 , - 67 7.D0 , - 17 4.D0 , : 71115 9.D0 , 7 3.D0 , - 87 2.D0 , - 675 0.D0 , 0.D0 , 35 8.D0 , : - 38729 8.D0 , - 36 7.D0 , 38 0.D0 , 20072 8.D0 , 1 8.D0 , 31 8.D0 , : - 30146 1.D0 , - 3 6.D0 , 81 6.D0 , 12902 5.D0 , - 6 3.D0 , 36 7.D0 , : 21582 9.D0 , - 49 4.D0 , 11 1.D0 , - 9592 9.D0 , 29 9.D0 , 13 2.D0 , : 12822 7.D0 , 13 7.D0 , 18 1.D0 , - 6898 2.D0 , - 9.D0 , 3 9.D0 , : 12345 7.D0 , 1 1.D0 , 1 9.D0 , - 5331 1.D0 , 3 2.D0 , - 4.D0 , : 15699 4.D0 , 1 0.D0 , - 16 8.D0 , - 123 5.D0 , 0.D0 , 8 2.D0 , : 6311 0.D0 , 6 3.D0 , 2 7.D0 , - 3322 8.D0 , 0.D0 , - 9.D0 , : - 5797 6.D0 , - 6 3.D0 , - 18 9.D0 , 3142 9.D0 , 0.D0 , - 7 5.D0 , : - 5964 1.D0 , - 1 1.D0 , 14 9.D0 , 2554 3.D0 , - 1 1.D0 , 6 6.D0 , : - 5161 3.D0 , - 4 2.D0 , 12 9.D0 , 2636 6.D0 , 0.D0 , 7 8.D0 , : 4589 3.D0 , 5 0.D0 , 3 1.D0 , - 2423 6.D0 , - 1 0.D0 , 2 0.D0 , : 6338 4.D0 , 1 1.D0 , - 15 0.D0 , - 122 0.D0 , 0.D0 , 2 9.D0 , : - 3857 1.D0 , - 1.D0 , 15 8.D0 , 1645 2.D0 , - 1 1.D0 , 6 8.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 21 , 40 ) / : 3248 1.D0 , 0.D0 , 0.D0 , - 1387 0.D0 , 0.D0 , 0.D0 , : - 4772 2.D0 , 0.D0 , - 1 8.D0 , 47 7.D0 , 0.D0 , - 2 5.D0 , : - 3104 6.D0 , - 1.D0 , 13 1.D0 , 1323 8.D0 , - 1 1.D0 , 5 9.D0 , : 2859 3.D0 , 0.D0 , - 1.D0 , - 1233 8.D0 , 1 0.D0 , - 3.D0 , : 2044 1.D0 , 2 1.D0 , 1 0.D0 , - 1075 8.D0 , 0.D0 , - 3.D0 , : 2924 3.D0 , 0.D0 , - 7 4.D0 , - 60 9.D0 , 0.D0 , 1 3.D0 , : 2588 7.D0 , 0.D0 , - 6 6.D0 , - 55 0.D0 , 0.D0 , 1 1.D0 , : - 1405 3.D0 , - 2 5.D0 , 7 9.D0 , 855 1.D0 , - 2.D0 , - 4 5.D0 , : 1516 4.D0 , 1 0.D0 , 1 1.D0 , - 800 1.D0 , 0.D0 , - 1.D0 , : - 1579 4.D0 , 7 2.D0 , - 1 6.D0 , 685 0.D0 , - 4 2.D0 , - 5.D0 , : 2178 3.D0 , 0.D0 , 1 3.D0 , - 16 7.D0 , 0.D0 , 1 3.D0 , : - 1287 3.D0 , - 1 0.D0 , - 3 7.D0 , 695 3.D0 , 0.D0 , - 1 4.D0 , : - 1265 4.D0 , 1 1.D0 , 6 3.D0 , 641 5.D0 , 0.D0 , 2 6.D0 , : - 1020 4.D0 , 0.D0 , 2 5.D0 , 522 2.D0 , 0.D0 , 1 5.D0 , : 1670 7.D0 , - 8 5.D0 , - 1 0.D0 , 16 8.D0 , - 1.D0 , 1 0.D0 , : - 769 1.D0 , 0.D0 , 4 4.D0 , 326 8.D0 , 0.D0 , 1 9.D0 , : - 1102 4.D0 , 0.D0 , - 1 4.D0 , 10 4.D0 , 0.D0 , 2.D0 , : 756 6.D0 , - 2 1.D0 , - 1 1.D0 , - 325 0.D0 , 0.D0 , - 5.D0 , : - 663 7.D0 , - 1 1.D0 , 2 5.D0 , 335 3.D0 , 0.D0 , 1 4.D0 , : - 714 1.D0 , 2 1.D0 , 8.D0 , 307 0.D0 , 0.D0 , 4.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 41 , 60 ) / : - 630 2.D0 , - 1 1.D0 , 2.D0 , 327 2.D0 , 0.D0 , 4.D0 , : 580 0.D0 , 1 0.D0 , 2.D0 , - 304 5.D0 , 0.D0 , - 1.D0 , : 644 3.D0 , 0.D0 , - 7.D0 , - 276 8.D0 , 0.D0 , - 4.D0 , : - 577 4.D0 , - 1 1.D0 , - 1 5.D0 , 304 1.D0 , 0.D0 , - 5.D0 , : - 535 0.D0 , 0.D0 , 2 1.D0 , 269 5.D0 , 0.D0 , 1 2.D0 , : - 475 2.D0 , - 1 1.D0 , - 3.D0 , 271 9.D0 , 0.D0 , - 3.D0 , : - 494 0.D0 , - 1 1.D0 , - 2 1.D0 , 272 0.D0 , 0.D0 , - 9.D0 , : 735 0.D0 , 0.D0 , - 8.D0 , - 5 1.D0 , 0.D0 , 4.D0 , : 406 5.D0 , 0.D0 , 6.D0 , - 220 6.D0 , 0.D0 , 1.D0 , : 657 9.D0 , 0.D0 , - 2 4.D0 , - 19 9.D0 , 0.D0 , 2.D0 , : 357 9.D0 , 0.D0 , 5.D0 , - 190 0.D0 , 0.D0 , 1.D0 , : 472 5.D0 , 0.D0 , - 6.D0 , - 4 1.D0 , 0.D0 , 3.D0 , : - 307 5.D0 , 0.D0 , - 2.D0 , 131 3.D0 , 0.D0 , - 1.D0 , : - 290 4.D0 , 0.D0 , 1 5.D0 , 123 3.D0 , 0.D0 , 7.D0 , : 434 8.D0 , 0.D0 , - 1 0.D0 , - 8 1.D0 , 0.D0 , 2.D0 , : - 287 8.D0 , 0.D0 , 8.D0 , 123 2.D0 , 0.D0 , 4.D0 , : - 423 0.D0 , 0.D0 , 5.D0 , - 2 0.D0 , 0.D0 , - 2.D0 , : - 281 9.D0 , 0.D0 , 7.D0 , 120 7.D0 , 0.D0 , 3.D0 , : - 405 6.D0 , 0.D0 , 5.D0 , 4 0.D0 , 0.D0 , - 2.D0 , : - 264 7.D0 , 0.D0 , 1 1.D0 , 112 9.D0 , 0.D0 , 5.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 61 , 80 ) / : - 229 4.D0 , 0.D0 , - 1 0.D0 , 126 6.D0 , 0.D0 , - 4.D0 , : 248 1.D0 , 0.D0 , - 7.D0 , - 106 2.D0 , 0.D0 , - 3.D0 , : 217 9.D0 , 0.D0 , - 2.D0 , - 112 9.D0 , 0.D0 , - 2.D0 , : 327 6.D0 , 0.D0 , 1.D0 , - 9.D0 , 0.D0 , 0.D0 , : - 338 9.D0 , 0.D0 , 5.D0 , 3 5.D0 , 0.D0 , - 2.D0 , : 333 9.D0 , 0.D0 , - 1 3.D0 , - 10 7.D0 , 0.D0 , 1.D0 , : - 198 7.D0 , 0.D0 , - 6.D0 , 107 3.D0 , 0.D0 , - 2.D0 , : - 198 1.D0 , 0.D0 , 0.D0 , 85 4.D0 , 0.D0 , 0.D0 , : 402 6.D0 , 0.D0 , - 35 3.D0 , - 55 3.D0 , 0.D0 , - 13 9.D0 , : 166 0.D0 , 0.D0 , - 5.D0 , - 71 0.D0 , 0.D0 , - 2.D0 , : - 152 1.D0 , 0.D0 , 9.D0 , 64 7.D0 , 0.D0 , 4.D0 , : 131 4.D0 , 0.D0 , 0.D0 , - 70 0.D0 , 0.D0 , 0.D0 , : - 128 3.D0 , 0.D0 , 0.D0 , 67 2.D0 , 0.D0 , 0.D0 , : - 133 1.D0 , 0.D0 , 8.D0 , 66 3.D0 , 0.D0 , 4.D0 , : 138 3.D0 , 0.D0 , - 2.D0 , - 59 4.D0 , 0.D0 , - 2.D0 , : 140 5.D0 , 0.D0 , 4.D0 , - 61 0.D0 , 0.D0 , 2.D0 , : 129 0.D0 , 0.D0 , 0.D0 , - 55 6.D0 , 0.D0 , 0.D0 , : - 121 4.D0 , 0.D0 , 5.D0 , 51 8.D0 , 0.D0 , 2.D0 , : 114 6.D0 , 0.D0 , - 3.D0 , - 49 0.D0 , 0.D0 , - 1.D0 , : 101 9.D0 , 0.D0 , - 1.D0 , - 52 7.D0 , 0.D0 , - 1.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 81 , 100 ) / : - 110 0.D0 , 0.D0 , 9.D0 , 46 5.D0 , 0.D0 , 4.D0 , : - 97 0.D0 , 0.D0 , 2.D0 , 49 6.D0 , 0.D0 , 1.D0 , : 157 5.D0 , 0.D0 , - 6.D0 , - 5 0.D0 , 0.D0 , 0.D0 , : 93 4.D0 , 0.D0 , - 3.D0 , - 39 9.D0 , 0.D0 , - 1.D0 , : 92 2.D0 , 0.D0 , - 1.D0 , - 39 5.D0 , 0.D0 , - 1.D0 , : 81 5.D0 , 0.D0 , - 1.D0 , - 42 2.D0 , 0.D0 , - 1.D0 , : 83 4.D0 , 0.D0 , 2.D0 , - 44 0.D0 , 0.D0 , 1.D0 , : 124 8.D0 , 0.D0 , 0.D0 , - 17 0.D0 , 0.D0 , 1.D0 , : 133 8.D0 , 0.D0 , - 5.D0 , - 3 9.D0 , 0.D0 , 0.D0 , : 71 6.D0 , 0.D0 , - 2.D0 , - 38 9.D0 , 0.D0 , - 1.D0 , : 128 2.D0 , 0.D0 , - 3.D0 , - 2 3.D0 , 0.D0 , 1.D0 , : 74 2.D0 , 0.D0 , 1.D0 , - 39 1.D0 , 0.D0 , 0.D0 , : 102 0.D0 , 0.D0 , - 2 5.D0 , - 49 5.D0 , 0.D0 , - 1 0.D0 , : 71 5.D0 , 0.D0 , - 4.D0 , - 32 6.D0 , 0.D0 , 2.D0 , : - 66 6.D0 , 0.D0 , - 3.D0 , 36 9.D0 , 0.D0 , - 1.D0 , : - 66 7.D0 , 0.D0 , 1.D0 , 34 6.D0 , 0.D0 , 1.D0 , : - 70 4.D0 , 0.D0 , 0.D0 , 30 4.D0 , 0.D0 , 0.D0 , : - 69 4.D0 , 0.D0 , 5.D0 , 29 4.D0 , 0.D0 , 2.D0 , : - 101 4.D0 , 0.D0 , - 1.D0 , 4.D0 , 0.D0 , - 1.D0 , : - 58 5.D0 , 0.D0 , - 2.D0 , 31 6.D0 , 0.D0 , - 1.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 101 , 120 ) / : - 94 9.D0 , 0.D0 , 1.D0 , 8.D0 , 0.D0 , - 1.D0 , : - 59 5.D0 , 0.D0 , 0.D0 , 25 8.D0 , 0.D0 , 0.D0 , : 52 8.D0 , 0.D0 , 0.D0 , - 27 9.D0 , 0.D0 , 0.D0 , : - 59 0.D0 , 0.D0 , 4.D0 , 25 2.D0 , 0.D0 , 2.D0 , : 57 0.D0 , 0.D0 , - 2.D0 , - 24 4.D0 , 0.D0 , - 1.D0 , : - 50 2.D0 , 0.D0 , 3.D0 , 25 0.D0 , 0.D0 , 2.D0 , : - 87 5.D0 , 0.D0 , 1.D0 , 2 9.D0 , 0.D0 , 0.D0 , : - 49 2.D0 , 0.D0 , - 3.D0 , 27 5.D0 , 0.D0 , - 1.D0 , : 53 5.D0 , 0.D0 , - 2.D0 , - 22 8.D0 , 0.D0 , - 1.D0 , : - 46 7.D0 , 0.D0 , 1.D0 , 24 0.D0 , 0.D0 , 1.D0 , : 59 1.D0 , 0.D0 , 0.D0 , - 25 3.D0 , 0.D0 , 0.D0 , : - 45 3.D0 , 0.D0 , - 1.D0 , 24 4.D0 , 0.D0 , - 1.D0 , : 76 6.D0 , 0.D0 , 1.D0 , 9.D0 , 0.D0 , 0.D0 , : - 44 6.D0 , 0.D0 , 2.D0 , 22 5.D0 , 0.D0 , 1.D0 , : - 48 8.D0 , 0.D0 , 2.D0 , 20 7.D0 , 0.D0 , 1.D0 , : - 46 8.D0 , 0.D0 , 0.D0 , 20 1.D0 , 0.D0 , 0.D0 , : - 42 1.D0 , 0.D0 , 1.D0 , 21 6.D0 , 0.D0 , 1.D0 , : 46 3.D0 , 0.D0 , 0.D0 , - 20 0.D0 , 0.D0 , 0.D0 , : - 67 3.D0 , 0.D0 , 2.D0 , 1 4.D0 , 0.D0 , 0.D0 , : 65 8.D0 , 0.D0 , 0.D0 , - 2.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 121 , 140 ) / : - 43 8.D0 , 0.D0 , 0.D0 , 18 8.D0 , 0.D0 , 0.D0 , : - 39 0.D0 , 0.D0 , 0.D0 , 20 5.D0 , 0.D0 , 0.D0 , : 63 9.D0 , - 1 1.D0 , - 2.D0 , - 1 9.D0 , 0.D0 , 0.D0 , : 41 2.D0 , 0.D0 , - 2.D0 , - 17 6.D0 , 0.D0 , - 1.D0 , : - 36 1.D0 , 0.D0 , 0.D0 , 18 9.D0 , 0.D0 , 0.D0 , : 36 0.D0 , 0.D0 , - 1.D0 , - 18 5.D0 , 0.D0 , - 1.D0 , : 58 8.D0 , 0.D0 , - 3.D0 , - 2 4.D0 , 0.D0 , 0.D0 , : - 57 8.D0 , 0.D0 , 1.D0 , 5.D0 , 0.D0 , 0.D0 , : - 39 6.D0 , 0.D0 , 0.D0 , 17 1.D0 , 0.D0 , 0.D0 , : 56 5.D0 , 0.D0 , - 1.D0 , - 6.D0 , 0.D0 , 0.D0 , : - 33 5.D0 , 0.D0 , - 1.D0 , 18 4.D0 , 0.D0 , - 1.D0 , : 35 7.D0 , 0.D0 , 1.D0 , - 15 4.D0 , 0.D0 , 0.D0 , : 32 1.D0 , 0.D0 , 1.D0 , - 17 4.D0 , 0.D0 , 0.D0 , : - 30 1.D0 , 0.D0 , - 1.D0 , 16 2.D0 , 0.D0 , 0.D0 , : - 33 4.D0 , 0.D0 , 0.D0 , 14 4.D0 , 0.D0 , 0.D0 , : 49 3.D0 , 0.D0 , - 2.D0 , - 1 5.D0 , 0.D0 , 0.D0 , : 49 4.D0 , 0.D0 , - 2.D0 , - 1 9.D0 , 0.D0 , 0.D0 , : 33 7.D0 , 0.D0 , - 1.D0 , - 14 3.D0 , 0.D0 , - 1.D0 , : 28 0.D0 , 0.D0 , - 1.D0 , - 14 4.D0 , 0.D0 , 0.D0 , : 30 9.D0 , 0.D0 , 1.D0 , - 13 4.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 141 , 160 ) / : - 26 3.D0 , 0.D0 , 2.D0 , 13 1.D0 , 0.D0 , 1.D0 , : 25 3.D0 , 0.D0 , 1.D0 , - 13 8.D0 , 0.D0 , 0.D0 , : 24 5.D0 , 0.D0 , 0.D0 , - 12 8.D0 , 0.D0 , 0.D0 , : 41 6.D0 , 0.D0 , - 2.D0 , - 1 7.D0 , 0.D0 , 0.D0 , : - 22 9.D0 , 0.D0 , 0.D0 , 12 8.D0 , 0.D0 , 0.D0 , : 23 1.D0 , 0.D0 , 0.D0 , - 12 0.D0 , 0.D0 , 0.D0 , : - 25 9.D0 , 0.D0 , 2.D0 , 10 9.D0 , 0.D0 , 1.D0 , : 37 5.D0 , 0.D0 , - 1.D0 , - 8.D0 , 0.D0 , 0.D0 , : 25 2.D0 , 0.D0 , 0.D0 , - 10 8.D0 , 0.D0 , 0.D0 , : - 24 5.D0 , 0.D0 , 1.D0 , 10 4.D0 , 0.D0 , 0.D0 , : 24 3.D0 , 0.D0 , - 1.D0 , - 10 4.D0 , 0.D0 , 0.D0 , : 20 8.D0 , 0.D0 , 1.D0 , - 11 2.D0 , 0.D0 , 0.D0 , : 19 9.D0 , 0.D0 , 0.D0 , - 10 2.D0 , 0.D0 , 0.D0 , : - 20 8.D0 , 0.D0 , 1.D0 , 10 5.D0 , 0.D0 , 0.D0 , : 33 5.D0 , 0.D0 , - 2.D0 , - 1 4.D0 , 0.D0 , 0.D0 , : - 32 5.D0 , 0.D0 , 1.D0 , 7.D0 , 0.D0 , 0.D0 , : - 18 7.D0 , 0.D0 , 0.D0 , 9 6.D0 , 0.D0 , 0.D0 , : 19 7.D0 , 0.D0 , - 1.D0 , - 10 0.D0 , 0.D0 , 0.D0 , : - 19 2.D0 , 0.D0 , 2.D0 , 9 4.D0 , 0.D0 , 1.D0 , : - 18 8.D0 , 0.D0 , 0.D0 , 8 3.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 161 , 180 ) / : 27 6.D0 , 0.D0 , 0.D0 , - 2.D0 , 0.D0 , 0.D0 , : - 28 6.D0 , 0.D0 , 1.D0 , 6.D0 , 0.D0 , 0.D0 , : 18 6.D0 , 0.D0 , - 1.D0 , - 7 9.D0 , 0.D0 , 0.D0 , : - 21 9.D0 , 0.D0 , 0.D0 , 4 3.D0 , 0.D0 , 0.D0 , : 27 6.D0 , 0.D0 , 0.D0 , 2.D0 , 0.D0 , 0.D0 , : - 15 3.D0 , 0.D0 , - 1.D0 , 8 4.D0 , 0.D0 , 0.D0 , : - 15 6.D0 , 0.D0 , 0.D0 , 8 1.D0 , 0.D0 , 0.D0 , : - 15 4.D0 , 0.D0 , 1.D0 , 7 8.D0 , 0.D0 , 0.D0 , : - 17 4.D0 , 0.D0 , 1.D0 , 7 5.D0 , 0.D0 , 0.D0 , : - 16 3.D0 , 0.D0 , 2.D0 , 6 9.D0 , 0.D0 , 1.D0 , : - 22 8.D0 , 0.D0 , 0.D0 , 1.D0 , 0.D0 , 0.D0 , : 9 1.D0 , 0.D0 , - 4.D0 , - 5 4.D0 , 0.D0 , - 2.D0 , : 17 5.D0 , 0.D0 , 0.D0 , - 7 5.D0 , 0.D0 , 0.D0 , : - 15 9.D0 , 0.D0 , 0.D0 , 6 9.D0 , 0.D0 , 0.D0 , : 14 1.D0 , 0.D0 , 0.D0 , - 7 2.D0 , 0.D0 , 0.D0 , : 14 7.D0 , 0.D0 , 0.D0 , - 7 5.D0 , 0.D0 , 0.D0 , : - 13 2.D0 , 0.D0 , 0.D0 , 6 9.D0 , 0.D0 , 0.D0 , : 15 9.D0 , 0.D0 , - 2 8.D0 , - 5 4.D0 , 0.D0 , 1 1.D0 , : 21 3.D0 , 0.D0 , 0.D0 , - 4.D0 , 0.D0 , 0.D0 , : 12 3.D0 , 0.D0 , 0.D0 , - 6 4.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 181 , 200 ) / : - 11 8.D0 , 0.D0 , - 1.D0 , 6 6.D0 , 0.D0 , 0.D0 , : 14 4.D0 , 0.D0 , - 1.D0 , - 6 1.D0 , 0.D0 , 0.D0 , : - 12 1.D0 , 0.D0 , 1.D0 , 6 0.D0 , 0.D0 , 0.D0 , : - 13 4.D0 , 0.D0 , 1.D0 , 5 6.D0 , 0.D0 , 1.D0 , : - 10 5.D0 , 0.D0 , 0.D0 , 5 7.D0 , 0.D0 , 0.D0 , : - 10 2.D0 , 0.D0 , 0.D0 , 5 6.D0 , 0.D0 , 0.D0 , : 12 0.D0 , 0.D0 , 0.D0 , - 5 2.D0 , 0.D0 , 0.D0 , : 10 1.D0 , 0.D0 , 0.D0 , - 5 4.D0 , 0.D0 , 0.D0 , : - 11 3.D0 , 0.D0 , 0.D0 , 5 9.D0 , 0.D0 , 0.D0 , : - 10 6.D0 , 0.D0 , 0.D0 , 6 1.D0 , 0.D0 , 0.D0 , : - 12 9.D0 , 0.D0 , 1.D0 , 5 5.D0 , 0.D0 , 0.D0 , : - 11 4.D0 , 0.D0 , 0.D0 , 5 7.D0 , 0.D0 , 0.D0 , : 11 3.D0 , 0.D0 , - 1.D0 , - 4 9.D0 , 0.D0 , 0.D0 , : - 10 2.D0 , 0.D0 , 0.D0 , 4 4.D0 , 0.D0 , 0.D0 , : - 9 4.D0 , 0.D0 , 0.D0 , 5 1.D0 , 0.D0 , 0.D0 , : - 10 0.D0 , 0.D0 , - 1.D0 , 5 6.D0 , 0.D0 , 0.D0 , : 8 7.D0 , 0.D0 , 0.D0 , - 4 7.D0 , 0.D0 , 0.D0 , : 16 1.D0 , 0.D0 , 0.D0 , - 1.D0 , 0.D0 , 0.D0 , : 9 6.D0 , 0.D0 , 0.D0 , - 5 0.D0 , 0.D0 , 0.D0 , : 15 1.D0 , 0.D0 , - 1.D0 , - 5.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 201 , 220 ) / : - 10 4.D0 , 0.D0 , 0.D0 , 4 4.D0 , 0.D0 , 0.D0 , : - 11 0.D0 , 0.D0 , 0.D0 , 4 8.D0 , 0.D0 , 0.D0 , : - 10 0.D0 , 0.D0 , 1.D0 , 5 0.D0 , 0.D0 , 0.D0 , : 9 2.D0 , 0.D0 , - 5.D0 , 1 2.D0 , 0.D0 , - 2.D0 , : 8 2.D0 , 0.D0 , 0.D0 , - 4 5.D0 , 0.D0 , 0.D0 , : 8 2.D0 , 0.D0 , 0.D0 , - 4 5.D0 , 0.D0 , 0.D0 , : - 7 8.D0 , 0.D0 , 0.D0 , 4 1.D0 , 0.D0 , 0.D0 , : - 7 7.D0 , 0.D0 , 0.D0 , 4 3.D0 , 0.D0 , 0.D0 , : 2.D0 , 0.D0 , 0.D0 , 5 4.D0 , 0.D0 , 0.D0 , : 9 4.D0 , 0.D0 , 0.D0 , - 4 0.D0 , 0.D0 , 0.D0 , : - 9 3.D0 , 0.D0 , 0.D0 , 4 0.D0 , 0.D0 , 0.D0 , : - 8 3.D0 , 0.D0 , 1 0.D0 , 4 0.D0 , 0.D0 , - 2.D0 , : 8 3.D0 , 0.D0 , 0.D0 , - 3 6.D0 , 0.D0 , 0.D0 , : - 9 1.D0 , 0.D0 , 0.D0 , 3 9.D0 , 0.D0 , 0.D0 , : 12 8.D0 , 0.D0 , 0.D0 , - 1.D0 , 0.D0 , 0.D0 , : - 7 9.D0 , 0.D0 , 0.D0 , 3 4.D0 , 0.D0 , 0.D0 , : - 8 3.D0 , 0.D0 , 0.D0 , 4 7.D0 , 0.D0 , 0.D0 , : 8 4.D0 , 0.D0 , 0.D0 , - 4 4.D0 , 0.D0 , 0.D0 , : 8 3.D0 , 0.D0 , 0.D0 , - 4 3.D0 , 0.D0 , 0.D0 , : 9 1.D0 , 0.D0 , 0.D0 , - 3 9.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 221 , 240 ) / : - 7 7.D0 , 0.D0 , 0.D0 , 3 9.D0 , 0.D0 , 0.D0 , : 8 4.D0 , 0.D0 , 0.D0 , - 4 3.D0 , 0.D0 , 0.D0 , : - 9 2.D0 , 0.D0 , 1.D0 , 3 9.D0 , 0.D0 , 0.D0 , : - 9 2.D0 , 0.D0 , 1.D0 , 3 9.D0 , 0.D0 , 0.D0 , : - 9 4.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : 6 8.D0 , 0.D0 , 0.D0 , - 3 6.D0 , 0.D0 , 0.D0 , : - 6 1.D0 , 0.D0 , 0.D0 , 3 2.D0 , 0.D0 , 0.D0 , : 7 1.D0 , 0.D0 , 0.D0 , - 3 1.D0 , 0.D0 , 0.D0 , : 6 2.D0 , 0.D0 , 0.D0 , - 3 4.D0 , 0.D0 , 0.D0 , : - 6 3.D0 , 0.D0 , 0.D0 , 3 3.D0 , 0.D0 , 0.D0 , : - 7 3.D0 , 0.D0 , 0.D0 , 3 2.D0 , 0.D0 , 0.D0 , : 11 5.D0 , 0.D0 , 0.D0 , - 2.D0 , 0.D0 , 0.D0 , : - 10 3.D0 , 0.D0 , 0.D0 , 2.D0 , 0.D0 , 0.D0 , : 6 3.D0 , 0.D0 , 0.D0 , - 2 8.D0 , 0.D0 , 0.D0 , : 7 4.D0 , 0.D0 , 0.D0 , - 3 2.D0 , 0.D0 , 0.D0 , : - 10 3.D0 , 0.D0 , - 3.D0 , 3.D0 , 0.D0 , - 1.D0 , : - 6 9.D0 , 0.D0 , 0.D0 , 3 0.D0 , 0.D0 , 0.D0 , : 5 7.D0 , 0.D0 , 0.D0 , - 2 9.D0 , 0.D0 , 0.D0 , : 9 4.D0 , 0.D0 , 0.D0 , - 4.D0 , 0.D0 , 0.D0 , : 6 4.D0 , 0.D0 , 0.D0 , - 3 3.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 241 , 260 ) / : - 6 3.D0 , 0.D0 , 0.D0 , 2 6.D0 , 0.D0 , 0.D0 , : - 3 8.D0 , 0.D0 , 0.D0 , 2 0.D0 , 0.D0 , 0.D0 , : - 4 3.D0 , 0.D0 , 0.D0 , 2 4.D0 , 0.D0 , 0.D0 , : - 4 5.D0 , 0.D0 , 0.D0 , 2 3.D0 , 0.D0 , 0.D0 , : 4 7.D0 , 0.D0 , 0.D0 , - 2 4.D0 , 0.D0 , 0.D0 , : - 4 8.D0 , 0.D0 , 0.D0 , 2 5.D0 , 0.D0 , 0.D0 , : 4 5.D0 , 0.D0 , 0.D0 , - 2 6.D0 , 0.D0 , 0.D0 , : 5 6.D0 , 0.D0 , 0.D0 , - 2 5.D0 , 0.D0 , 0.D0 , : 8 8.D0 , 0.D0 , 0.D0 , 2.D0 , 0.D0 , 0.D0 , : - 7 5.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : 8 5.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : 4 9.D0 , 0.D0 , 0.D0 , - 2 6.D0 , 0.D0 , 0.D0 , : - 7 4.D0 , 0.D0 , - 3.D0 , - 1.D0 , 0.D0 , - 1.D0 , : - 3 9.D0 , 0.D0 , 0.D0 , 2 1.D0 , 0.D0 , 0.D0 , : 4 5.D0 , 0.D0 , 0.D0 , - 2 0.D0 , 0.D0 , 0.D0 , : 5 1.D0 , 0.D0 , 0.D0 , - 2 2.D0 , 0.D0 , 0.D0 , : - 4 0.D0 , 0.D0 , 0.D0 , 2 1.D0 , 0.D0 , 0.D0 , : 4 1.D0 , 0.D0 , 0.D0 , - 2 1.D0 , 0.D0 , 0.D0 , : - 4 2.D0 , 0.D0 , 0.D0 , 2 4.D0 , 0.D0 , 0.D0 , : - 5 1.D0 , 0.D0 , 0.D0 , 2 2.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 261 , 280 ) / : - 4 2.D0 , 0.D0 , 0.D0 , 2 2.D0 , 0.D0 , 0.D0 , : 3 9.D0 , 0.D0 , 0.D0 , - 2 1.D0 , 0.D0 , 0.D0 , : 4 6.D0 , 0.D0 , 0.D0 , - 1 8.D0 , 0.D0 , 0.D0 , : - 5 3.D0 , 0.D0 , 0.D0 , 2 2.D0 , 0.D0 , 0.D0 , : 8 2.D0 , 0.D0 , 0.D0 , - 4.D0 , 0.D0 , 0.D0 , : 8 1.D0 , 0.D0 , - 1.D0 , - 4.D0 , 0.D0 , 0.D0 , : 4 7.D0 , 0.D0 , 0.D0 , - 1 9.D0 , 0.D0 , 0.D0 , : 5 3.D0 , 0.D0 , 0.D0 , - 2 3.D0 , 0.D0 , 0.D0 , : - 4 5.D0 , 0.D0 , 0.D0 , 2 2.D0 , 0.D0 , 0.D0 , : - 4 4.D0 , 0.D0 , 0.D0 , - 2.D0 , 0.D0 , 0.D0 , : - 3 3.D0 , 0.D0 , 0.D0 , 1 6.D0 , 0.D0 , 0.D0 , : - 6 1.D0 , 0.D0 , 0.D0 , 1.D0 , 0.D0 , 0.D0 , : - 3 8.D0 , 0.D0 , 0.D0 , 1 9.D0 , 0.D0 , 0.D0 , : - 3 3.D0 , 0.D0 , 0.D0 , 2 1.D0 , 0.D0 , 0.D0 , : - 6 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : 4 8.D0 , 0.D0 , 0.D0 , - 1 0.D0 , 0.D0 , 0.D0 , : 3 8.D0 , 0.D0 , 0.D0 , - 2 0.D0 , 0.D0 , 0.D0 , : 3 1.D0 , 0.D0 , 0.D0 , - 1 3.D0 , 0.D0 , 0.D0 , : - 3 2.D0 , 0.D0 , 0.D0 , 1 5.D0 , 0.D0 , 0.D0 , : 4 5.D0 , 0.D0 , 0.D0 , - 8.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 281 , 300 ) / : - 4 4.D0 , 0.D0 , 0.D0 , 1 9.D0 , 0.D0 , 0.D0 , : - 5 1.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : - 3 6.D0 , 0.D0 , 0.D0 , 2 0.D0 , 0.D0 , 0.D0 , : 4 4.D0 , 0.D0 , 0.D0 , - 1 9.D0 , 0.D0 , 0.D0 , : - 6 0.D0 , 0.D0 , 0.D0 , 2.D0 , 0.D0 , 0.D0 , : 3 5.D0 , 0.D0 , 0.D0 , - 1 8.D0 , 0.D0 , 0.D0 , : 4 7.D0 , 0.D0 , 0.D0 , - 1.D0 , 0.D0 , 0.D0 , : 3 6.D0 , 0.D0 , 0.D0 , - 1 5.D0 , 0.D0 , 0.D0 , : - 3 6.D0 , 0.D0 , 0.D0 , 2 0.D0 , 0.D0 , 0.D0 , : - 3 5.D0 , 0.D0 , 0.D0 , 1 9.D0 , 0.D0 , 0.D0 , : - 3 7.D0 , 0.D0 , 0.D0 , 1 9.D0 , 0.D0 , 0.D0 , : 3 2.D0 , 0.D0 , 0.D0 , - 1 6.D0 , 0.D0 , 0.D0 , : 3 5.D0 , 0.D0 , 0.D0 , - 1 4.D0 , 0.D0 , 0.D0 , : 3 2.D0 , 0.D0 , 0.D0 , - 1 3.D0 , 0.D0 , 0.D0 , : 6 5.D0 , 0.D0 , 0.D0 , - 2.D0 , 0.D0 , 0.D0 , : 4 7.D0 , 0.D0 , 0.D0 , - 1.D0 , 0.D0 , 0.D0 , : 3 2.D0 , 0.D0 , 0.D0 , - 1 6.D0 , 0.D0 , 0.D0 , : 3 7.D0 , 0.D0 , 0.D0 , - 1 6.D0 , 0.D0 , 0.D0 , : - 3 0.D0 , 0.D0 , 0.D0 , 1 5.D0 , 0.D0 , 0.D0 , : - 3 2.D0 , 0.D0 , 0.D0 , 1 6.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 301 , 320 ) / : - 3 1.D0 , 0.D0 , 0.D0 , 1 3.D0 , 0.D0 , 0.D0 , : 3 7.D0 , 0.D0 , 0.D0 , - 1 6.D0 , 0.D0 , 0.D0 , : 3 1.D0 , 0.D0 , 0.D0 , - 1 3.D0 , 0.D0 , 0.D0 , : 4 9.D0 , 0.D0 , 0.D0 , - 2.D0 , 0.D0 , 0.D0 , : 3 2.D0 , 0.D0 , 0.D0 , - 1 3.D0 , 0.D0 , 0.D0 , : - 4 3.D0 , 0.D0 , 0.D0 , 1 8.D0 , 0.D0 , 0.D0 , : - 3 2.D0 , 0.D0 , 0.D0 , 1 4.D0 , 0.D0 , 0.D0 , : 3 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : - 3 4.D0 , 0.D0 , 0.D0 , 1 5.D0 , 0.D0 , 0.D0 , : - 3 6.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : - 3 8.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : - 3 1.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : - 3 4.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : - 3 5.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , 0.D0 , : 3 0.D0 , 0.D0 , 0.D0 , - 2.D0 , 0.D0 , 0.D0 , : 0.D0 , 0.D0 , - 198 8.D0 , 0.D0 , 0.D0 , - 167 9.D0 , : 0.D0 , 0.D0 , - 6 3.D0 , 0.D0 , 0.D0 , - 2 7.D0 , : 0.D0 , 0.D0 , 36 4.D0 , 0.D0 , 0.D0 , 17 6.D0 , : 0.D0 , 0.D0 , - 104 4.D0 , 0.D0 , 0.D0 , - 89 1.D0 , : 0.D0 , 0.D0 , 33 0.D0 , 0.D0 , 0.D0 , 0.D0 / DATA ( ( CLS ( I , J ), I = 1 , 6 ), J = 321 , 323 ) / : 0.D0 , 0.D0 , 3 0.D0 , 0.D0 , 0.D0 , 1 4.D0 , : 0.D0 , 0.D0 , - 16 2.D0 , 0.D0 , 0.D0 , - 13 8.D0 , : 0.D0 , 0.D0 , 7 5.D0 , 0.D0 , 0.D0 , 0.D0 / * *  Planetary argument multipliers: *              L   L'  F   D   Om  Me  Ve  E  Ma  Ju  Sa  Ur  Ne  pre * DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 1 , 20 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 16 , 4 , 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 16 , - 4 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 16 , 4 , 5 , 0 , 0 , 2 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , 3 , - 8 , 3 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 0 , 0 , 10 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 5 , 8 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 5 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 2 , - 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 5 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , - 2 , 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 1 , : 1 , 0 , 0 , - 2 , 0 , 0 , 19 , - 21 , 3 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 1 , 1 , 0 , 0 , - 1 , 0 , 2 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 0 , 0 , 18 , - 16 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 13 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 13 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 8 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 13 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 21 , 40 ) / : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 1 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , : 0 , 0 , - 2 , 2 , 0 , 0 , 5 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 6 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 15 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 1 , 0 , 0 , - 2 , 0 , 3 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , - 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 1 , 0 , 8 , - 13 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 0 , 0 , 1 , 0 , 18 , - 16 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 41 , 60 ) / : 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 4 , - 8 , 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 2 , - 5 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , 0 , 1 , 0 , - 18 , 16 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , - 8 , 13 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , 0 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 2 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 0 , 2 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 2 , : 0 , 0 , 2 , - 2 , 1 , 0 , - 5 , 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , - 1 , 1 , 0 , 0 , 5 , - 7 , 0 , 0 , 0 , 0 , 0 , 0 , : - 2 , 0 , 0 , 2 , 1 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 61 , 80 ) / : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 2 , : - 2 , 0 , 0 , 2 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , 0 , - 2 , 1 , 0 , 0 , - 2 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 3 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 5 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 8 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 8 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 5 , 7 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 8 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 8 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , : 0 , 0 , 1 , - 1 , 1 , 0 , 0 , - 1 , 0 , 2 , 0 , 0 , 0 , 0 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 81 , 100 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 2 , - 2 , 1 , 0 , - 3 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 6 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 1 , 0 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , - 2 , 0 , 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 3 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 5 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 7 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 6 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 4 , 6 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 4 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 101 , 120 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 0 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 4 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 9 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 2 , - 5 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 7 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 5 , 7 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 3 , 0 , 0 , 0 , 0 , 0 , 1 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 121 , 140 ) / : 0 , 0 , 0 , 0 , 0 , 0 , - 1 , 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 3 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 5 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 8 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 3 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 3 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 1 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , - 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 15 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 8 , 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 1 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 6 , 16 , - 4 , - 5 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , 8 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 11 , 0 , 0 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 141 , 160 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 3 , 7 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , - 1 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 7 , 9 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 4 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 2 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 4 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 2 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3 , 0 , - 1 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , - 2 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 8 , 10 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 5 , - 5 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , - 9 , 11 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , - 3 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 6 , - 6 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , - 2 , 0 , 0 , 0 , 2 / DATA ( ( NAPL ( I , J ), I = 1 , 14 ), J = 161 , 165 ) / : 0 , 0 , 0 , 0 , 0 , 0 , 3 , - 1 , 0 , 0 , 0 , 0 , 0 , 2 , : 0 , 0 , 0 , 0 , 0 , 0 , 0 , 4 , 0 , - 1 , 0 , 0 , 0 , 2 , : - 1 , 0 , 0 , 2 , 0 , 0 , 0 , 2 , 0 , - 2 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 2 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , : - 1 , 0 , 2 , 0 , 2 , 0 , 0 , - 4 , 8 , - 3 , 0 , 0 , 0 , 0 / * *  Planetary nutation coefficients, unit 1e-7 arcsec: *  longitude (sin, cos), obliquity (sin, cos) * DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 1 , 20 ) / : 144 0.D0 , 0.D0 , 0.D0 , 0.D0 , : 5 6.D0 , - 11 7.D0 , - 4 2.D0 , - 4 0.D0 , : 12 5.D0 , - 4 3.D0 , 0.D0 , - 5 4.D0 , : - 11 4.D0 , 0.D0 , 0.D0 , 6 1.D0 , : - 21 9.D0 , 8 9.D0 , 0.D0 , 0.D0 , : - 46 2.D0 , 160 4.D0 , 0.D0 , 0.D0 , : 9 9.D0 , 0.D0 , 0.D0 , - 5 3.D0 , : 1 4.D0 , - 21 8.D0 , 11 7.D0 , 8.D0 , : 3 1.D0 , - 48 1.D0 , - 25 7.D0 , - 1 7.D0 , : - 49 1.D0 , 12 8.D0 , 0.D0 , 0.D0 , : - 308 4.D0 , 512 3.D0 , 273 5.D0 , 164 7.D0 , : - 144 4.D0 , 240 9.D0 , - 128 6.D0 , - 77 1.D0 , : 10 3.D0 , - 6 0.D0 , 0.D0 , 0.D0 , : - 2 6.D0 , - 2 9.D0 , - 1 6.D0 , 1 4.D0 , : 28 4.D0 , 0.D0 , 0.D0 , - 15 1.D0 , : 22 6.D0 , 10 1.D0 , 0.D0 , 0.D0 , : - 4 1.D0 , 17 5.D0 , 7 6.D0 , 1 7.D0 , : 42 5.D0 , 21 2.D0 , - 13 3.D0 , 26 9.D0 , : 120 0.D0 , 59 8.D0 , 31 9.D0 , - 64 1.D0 , : 23 5.D0 , 33 4.D0 , 0.D0 , 0.D0 / DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 21 , 40 ) / : 26 6.D0 , - 7 8.D0 , 0.D0 , 0.D0 , : - 46 0.D0 , - 43 5.D0 , - 23 2.D0 , 24 6.D0 , : 0.D0 , 13 1.D0 , 0.D0 , 0.D0 , : - 4 2.D0 , 2 0.D0 , 0.D0 , 0.D0 , : - 1 0.D0 , 23 3.D0 , 0.D0 , 0.D0 , : 7 8.D0 , - 1 8.D0 , 0.D0 , 0.D0 , : 4 5.D0 , - 2 2.D0 , 0.D0 , 0.D0 , : 8 9.D0 , - 1 6.D0 , - 9.D0 , - 4 8.D0 , : - 34 9.D0 , - 6 2.D0 , 0.D0 , 0.D0 , : - 5 3.D0 , 0.D0 , 0.D0 , 0.D0 , : - 2 1.D0 , - 7 8.D0 , 0.D0 , 0.D0 , : 2 0.D0 , - 7 0.D0 , - 3 7.D0 , - 1 1.D0 , : 3 2.D0 , 1 5.D0 , - 8.D0 , 1 7.D0 , : 17 4.D0 , 8 4.D0 , 4 5.D0 , - 9 3.D0 , : 1 1.D0 , 5 6.D0 , 0.D0 , 0.D0 , : - 6 6.D0 , - 1 2.D0 , - 6.D0 , 3 5.D0 , : 4 7.D0 , 8.D0 , 4.D0 , - 2 5.D0 , : 4 6.D0 , 6 6.D0 , 3 5.D0 , - 2 5.D0 , : - 6 8.D0 , - 3 4.D0 , - 1 8.D0 , 3 6.D0 , : 7 6.D0 , 1 7.D0 , 9.D0 , - 4 1.D0 / DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 41 , 60 ) / : 8 4.D0 , 29 8.D0 , 15 9.D0 , - 4 5.D0 , : - 8 2.D0 , 29 2.D0 , 15 6.D0 , 4 4.D0 , : - 7 3.D0 , 1 7.D0 , 9.D0 , 3 9.D0 , : - 43 9.D0 , 0.D0 , 0.D0 , 0.D0 , : 5 7.D0 , - 2 8.D0 , - 1 5.D0 , - 3 0.D0 , : - 4 0.D0 , 5 7.D0 , 3 0.D0 , 2 1.D0 , : 27 3.D0 , 8 0.D0 , 4 3.D0 , - 14 6.D0 , : - 44 9.D0 , 43 0.D0 , 0.D0 , 0.D0 , : - 8.D0 , - 4 7.D0 , - 2 5.D0 , 4.D0 , : 6.D0 , 4 7.D0 , 2 5.D0 , - 3.D0 , : - 4 8.D0 , - 11 0.D0 , - 5 9.D0 , 2 6.D0 , : 5 1.D0 , 11 4.D0 , 6 1.D0 , - 2 7.D0 , : - 13 3.D0 , 0.D0 , 0.D0 , 5 7.D0 , : - 1 8.D0 , - 43 6.D0 , - 23 3.D0 , 9.D0 , : 3 5.D0 , - 7.D0 , 0.D0 , 0.D0 , : - 5 3.D0 , - 9.D0 , - 5.D0 , 2 8.D0 , : - 5 0.D0 , 19 4.D0 , 10 3.D0 , 2 7.D0 , : - 1 3.D0 , 5 2.D0 , 2 8.D0 , 7.D0 , : - 9 1.D0 , 24 8.D0 , 0.D0 , 0.D0 , : 6.D0 , 4 9.D0 , 2 6.D0 , - 3.D0 / DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 61 , 80 ) / : - 6.D0 , - 4 7.D0 , - 2 5.D0 , 3.D0 , : 5 2.D0 , 2 3.D0 , 1 0.D0 , - 2 3.D0 , : - 13 8.D0 , 0.D0 , 0.D0 , 0.D0 , : 5 4.D0 , 0.D0 , 0.D0 , - 2 9.D0 , : - 3 7.D0 , 3 5.D0 , 1 9.D0 , 2 0.D0 , : - 14 5.D0 , 4 7.D0 , 0.D0 , 0.D0 , : - 1 0.D0 , 4 0.D0 , 2 1.D0 , 5.D0 , : 1 1.D0 , - 4 9.D0 , - 2 6.D0 , - 7.D0 , : - 215 0.D0 , 0.D0 , 0.D0 , 93 2.D0 , : 8 5.D0 , 0.D0 , 0.D0 , - 3 7.D0 , : - 8 6.D0 , 15 3.D0 , 0.D0 , 0.D0 , : - 5 1.D0 , 0.D0 , 0.D0 , 2 2.D0 , : - 1 1.D0 , - 26 8.D0 , - 11 6.D0 , 5.D0 , : 3 1.D0 , 6.D0 , 3.D0 , - 1 7.D0 , : 14 0.D0 , 2 7.D0 , 1 4.D0 , - 7 5.D0 , : 5 7.D0 , 1 1.D0 , 6.D0 , - 3 0.D0 , : - 1 4.D0 , - 3 9.D0 , 0.D0 , 0.D0 , : - 2 5.D0 , 2 2.D0 , 0.D0 , 0.D0 , : 4 2.D0 , 22 3.D0 , 11 9.D0 , - 2 2.D0 , : - 2 7.D0 , - 14 3.D0 , - 7 7.D0 , 1 4.D0 / DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 81 , 100 ) / : 9.D0 , 4 9.D0 , 2 6.D0 , - 5.D0 , : - 116 6.D0 , 0.D0 , 0.D0 , 50 5.D0 , : 11 7.D0 , 0.D0 , 0.D0 , - 6 3.D0 , : 0.D0 , 3 1.D0 , 0.D0 , 0.D0 , : 0.D0 , - 3 2.D0 , - 1 7.D0 , 0.D0 , : 5 0.D0 , 0.D0 , 0.D0 , - 2 7.D0 , : 3 0.D0 , - 3.D0 , - 2.D0 , - 1 6.D0 , : 8.D0 , 61 4.D0 , 0.D0 , 0.D0 , : - 12 7.D0 , 2 1.D0 , 9.D0 , 5 5.D0 , : - 2 0.D0 , 3 4.D0 , 0.D0 , 0.D0 , : 2 2.D0 , - 8 7.D0 , 0.D0 , 0.D0 , : - 6 8.D0 , 3 9.D0 , 0.D0 , 0.D0 , : 3.D0 , 6 6.D0 , 2 9.D0 , - 1.D0 , : 49 0.D0 , 0.D0 , 0.D0 , - 21 3.D0 , : - 2 2.D0 , 9 3.D0 , 4 9.D0 , 1 2.D0 , : - 4 6.D0 , 1 4.D0 , 0.D0 , 0.D0 , : 2 5.D0 , 10 6.D0 , 5 7.D0 , - 1 3.D0 , : 148 5.D0 , 0.D0 , 0.D0 , 0.D0 , : - 7.D0 , - 3 2.D0 , - 1 7.D0 , 4.D0 , : 3 0.D0 , - 6.D0 , - 2.D0 , - 1 3.D0 / DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 101 , 120 ) / : 11 8.D0 , 0.D0 , 0.D0 , - 5 2.D0 , : - 2 8.D0 , 3 6.D0 , 0.D0 , 0.D0 , : 1 4.D0 , - 5 9.D0 , - 3 1.D0 , - 8.D0 , : - 45 8.D0 , 0.D0 , 0.D0 , 19 8.D0 , : 0.D0 , - 4 5.D0 , - 2 0.D0 , 0.D0 , : - 16 6.D0 , 26 9.D0 , 0.D0 , 0.D0 , : - 7 8.D0 , 4 5.D0 , 0.D0 , 0.D0 , : - 5.D0 , 32 8.D0 , 0.D0 , 0.D0 , : - 122 3.D0 , - 2 6.D0 , 0.D0 , 0.D0 , : - 36 8.D0 , 0.D0 , 0.D0 , 0.D0 , : - 7 5.D0 , 0.D0 , 0.D0 , 0.D0 , : - 1 3.D0 , - 3 0.D0 , 0.D0 , 0.D0 , : - 7 4.D0 , 0.D0 , 0.D0 , 3 2.D0 , : - 26 2.D0 , 0.D0 , 0.D0 , 11 4.D0 , : 20 2.D0 , 0.D0 , 0.D0 , - 8 7.D0 , : - 8.D0 , 3 5.D0 , 1 9.D0 , 5.D0 , : - 3 5.D0 , - 4 8.D0 , - 2 1.D0 , 1 5.D0 , : 1 2.D0 , 5 5.D0 , 2 9.D0 , - 6.D0 , : - 59 8.D0 , 0.D0 , 0.D0 , 0.D0 , : 8.D0 , - 3 1.D0 , - 1 6.D0 , - 4.D0 / DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 121 , 140 ) / : 11 3.D0 , 0.D0 , 0.D0 , - 4 9.D0 , : 8 3.D0 , 1 5.D0 , 0.D0 , 0.D0 , : 0.D0 , - 11 4.D0 , - 4 9.D0 , 0.D0 , : 11 7.D0 , 0.D0 , 0.D0 , - 5 1.D0 , : 39 3.D0 , 3.D0 , 0.D0 , 0.D0 , : 1 8.D0 , - 2 9.D0 , - 1 3.D0 , - 8.D0 , : 8.D0 , 3 4.D0 , 1 8.D0 , - 4.D0 , : 8 9.D0 , 0.D0 , 0.D0 , 0.D0 , : 5 4.D0 , - 1 5.D0 , - 7.D0 , - 2 4.D0 , : 0.D0 , 3 5.D0 , 0.D0 , 0.D0 , : - 15 4.D0 , - 3 0.D0 , - 1 3.D0 , 6 7.D0 , : 8 0.D0 , - 7 1.D0 , - 3 1.D0 , - 3 5.D0 , : 6 1.D0 , - 9 6.D0 , - 4 2.D0 , - 2 7.D0 , : 12 3.D0 , - 41 5.D0 , - 18 0.D0 , - 5 3.D0 , : 0.D0 , 0.D0 , 0.D0 , - 3 5.D0 , : 7.D0 , - 3 2.D0 , - 1 7.D0 , - 4.D0 , : - 8 9.D0 , 0.D0 , 0.D0 , 3 8.D0 , : 0.D0 , - 8 6.D0 , - 1 9.D0 , - 6.D0 , : - 12 3.D0 , - 41 6.D0 , - 18 0.D0 , 5 3.D0 , : - 6 2.D0 , - 9 7.D0 , - 4 2.D0 , 2 7.D0 / DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 141 , 160 ) / : - 8 5.D0 , - 7 0.D0 , - 3 1.D0 , 3 7.D0 , : 16 3.D0 , - 1 2.D0 , - 5.D0 , - 7 2.D0 , : - 6 3.D0 , - 1 6.D0 , - 7.D0 , 2 8.D0 , : - 2 1.D0 , - 3 2.D0 , - 1 4.D0 , 9.D0 , : 5.D0 , - 17 3.D0 , - 7 5.D0 , - 2.D0 , : 7 4.D0 , 0.D0 , 0.D0 , - 3 2.D0 , : 8 3.D0 , 0.D0 , 0.D0 , 0.D0 , : - 33 9.D0 , 0.D0 , 0.D0 , 14 7.D0 , : 6 7.D0 , - 9 1.D0 , - 3 9.D0 , - 2 9.D0 , : 3 0.D0 , - 1 8.D0 , - 8.D0 , - 1 3.D0 , : 0.D0 , - 11 4.D0 , - 5 0.D0 , 0.D0 , : 51 7.D0 , 1 6.D0 , 7.D0 , - 22 4.D0 , : 14 3.D0 , - 3.D0 , - 1.D0 , - 6 2.D0 , : 5 0.D0 , 0.D0 , 0.D0 , - 2 2.D0 , : 5 9.D0 , 0.D0 , 0.D0 , 0.D0 , : 37 0.D0 , - 8.D0 , 0.D0 , - 16 0.D0 , : 3 4.D0 , 0.D0 , 0.D0 , - 1 5.D0 , : - 3 7.D0 , - 7.D0 , - 3.D0 , 1 6.D0 , : 4 0.D0 , 0.D0 , 0.D0 , 0.D0 , : - 18 4.D0 , - 3.D0 , - 1.D0 , 8 0.D0 / DATA ( ( CPL ( I , J ), I = 1 , 4 ), J = 161 , 165 ) / : 3 1.D0 , - 6.D0 , 0.D0 , - 1 3.D0 , : - 3.D0 , - 3 2.D0 , - 1 4.D0 , 1.D0 , : - 3 4.D0 , 0.D0 , 0.D0 , 0.D0 , : 12 6.D0 , - 6 3.D0 , - 2 7.D0 , - 5 5.D0 , : - 12 6.D0 , - 6 3.D0 , - 2 7.D0 , 5 5.D0 / * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *  Interval between fundamental epoch J2000.0 and given date (JC). T = ( ( DATE1 - DJ0 ) + DATE2 ) / DJC *  ------------------- *  LUNI-SOLAR NUTATION *  ------------------- * *  Fundamental (Delaunay) arguments from Simon et al. (1994) * CALL FUNARG ( T , EL , ELP , F , D , OM ) *  Initialize the nutation values. DP = 0.D0 DE = 0.D0 *  Summation of luni-solar nutation series (in reverse order). DO 100 I = NLS , 1 , - 1 *     Argument and functions. ARG = MOD ( DBLE ( NALS ( 1 , I ) ) * EL + : DBLE ( NALS ( 2 , I ) ) * ELP + : DBLE ( NALS ( 3 , I ) ) * F + : DBLE ( NALS ( 4 , I ) ) * D + : DBLE ( NALS ( 5 , I ) ) * OM , D2PI ) SARG = SIN ( ARG ) CARG = COS ( ARG ) *     Term. DP = DP + ( CLS ( 1 , I ) + CLS ( 2 , I ) * T ) * SARG : + CLS ( 3 , I ) * CARG DE = DE + ( CLS ( 4 , I ) + CLS ( 5 , I ) * T ) * CARG : + CLS ( 6 , I ) * SARG 100 CONTINUE *  Convert from 0.1 microarcsec units to radians. DPSILS = DP * U2R DEPSLS = DE * U2R *  ------------------ *  PLANETARY NUTATION *  ------------------ *  Planetary longitudes, Mercury through Neptune, wrt mean dynamical *  ecliptic and equinox of J2000, with high order terms omitted *  (Simon et al. 1994, 5.8.1-5.8.8). ALME = MOD ( 4.402608842461D0 + 260 8.790314157421D0 * T , D2PI ) ALVE = MOD ( 3.176146696956D0 + 102 1.328554621099D0 * T , D2PI ) ALEA = MOD ( 1.753470459496D0 + 62 8.307584999142D0 * T , D2PI ) ALMA = MOD ( 6.203476112911D0 + 33 4.061242669982D0 * T , D2PI ) ALJU = MOD ( 0.599547105074D0 + 5 2.969096264064D0 * T , D2PI ) ALSA = MOD ( 0.874016284019D0 + 2 1.329910496032D0 * T , D2PI ) ALUR = MOD ( 5.481293871537D0 + 7.478159856729D0 * T , D2PI ) ALNE = MOD ( 5.311886286677D0 + 3.813303563778D0 * T , D2PI ) *  General precession in longitude (Simon et al. 1994), equivalent *  to 5028.8200 arcsec/cy at J2000. APA = ( 0.024380407358D0 + 0.000005391235D0 * T ) * T *  Initialize the nutation values. DP = 0.D0 DE = 0.D0 *  Summation of planetary nutation series (in reverse order). DO 200 I = NPL , 1 , - 1 *     Argument and functions. ARG = MOD ( DBLE ( NAPL ( 1 , I ) ) * EL + : DBLE ( NAPL ( 2 , I ) ) * ELP + : DBLE ( NAPL ( 3 , I ) ) * F + : DBLE ( NAPL ( 4 , I ) ) * D + : DBLE ( NAPL ( 5 , I ) ) * OM + : DBLE ( NAPL ( 6 , I ) ) * ALME + : DBLE ( NAPL ( 7 , I ) ) * ALVE + : DBLE ( NAPL ( 8 , I ) ) * ALEA + : DBLE ( NAPL ( 9 , I ) ) * ALMA + : DBLE ( NAPL ( 10 , I ) ) * ALJU + : DBLE ( NAPL ( 11 , I ) ) * ALSA + : DBLE ( NAPL ( 12 , I ) ) * ALUR + : DBLE ( NAPL ( 13 , I ) ) * ALNE + : DBLE ( NAPL ( 14 , I ) ) * APA , D2PI ) SARG = SIN ( ARG ) CARG = COS ( ARG ) *     Term. DP = DP + CPL ( 1 , I ) * SARG + CPL ( 2 , I ) * CARG DE = DE + CPL ( 3 , I ) * SARG + CPL ( 4 , I ) * CARG 200 CONTINUE *  Convert from 0.1 microarcsec units to radians. DPSIPL = DP * U2R DEPSPL = DE * U2R *  ----- *  TOTAL *  ----- *  Add planetary and luni-solar components. DPSI = DPSIPL + DPSILS DEPS = DEPSPL + DEPSLS RETURN END DOUBLE PRECISION FUNCTION EECT2000 ( DATE1 , DATE2 ) *+ *  - - - - - - - - - *   E E C T 2 0 0 0 *  - - - - - - - - - * *  Equation of the equinoxes complementary terms, consistent with *  IAU 2000 resolutions. * *  Annexe to IERS Conventions 2000, Chapter 5 * *  Capitaine, N., Wallace, P.T., & McCarthy, D.D. (2003). Astron. & *    Astrophys. 406, pp. 1135-1149, Table 3. *  IERS Conventions (2010), Chapter 5, p. 60, Table 5.2e. *    (Table 5.2e presented in the printed publication is a truncated *    series. The full series, which is used in NOVAS, is available on *    the IERS Conventions Center website in file tab5.2e.txt.) *    ftp://tai.bipm.org/iers/conv2010/chapter5/ * *  Given: *     DATE1,DATE2   d    TT date (JD = DATE1+DATE2) * *  Returned: *     EECT00        d    complementary terms (radians) * *  This revision:  2002 November 13 *                  References updated 2010 November 26 * *----------------------------------------------------------------------- IMPLICIT NONE DOUBLE PRECISION DATE1 , DATE2 *  2Pi DOUBLE PRECISION D2PI PARAMETER ( D2PI = 6.283185307179586476925287D0 ) *  Arcseconds to radians DOUBLE PRECISION DAS2R PARAMETER ( DAS2R = 4.848136811095359935899141D-6 ) *  Reference epoch (J2000), JD DOUBLE PRECISION DJ0 PARAMETER ( DJ0 = 2451545 D0 ) *  Days per Julian century DOUBLE PRECISION DJC PARAMETER ( DJC = 36525 D0 ) *  Time since J2000, in Julian centuries DOUBLE PRECISION T *  Miscellaneous INTEGER I , J DOUBLE PRECISION A , S0 , S1 DOUBLE PRECISION ANMP *  Fundamental arguments DOUBLE PRECISION FA ( 14 ) *  ----------------------------------------- *  The series for the EE complementary terms *  ----------------------------------------- *  Number of terms in the series INTEGER NE0 , NE1 PARAMETER ( NE0 = 33 , NE1 = 1 ) *  Coefficients of l,l',F,D,Om,LMe,LVe,LE,LMa,LJu,LSa,LU,LN,pA INTEGER KE0 ( 14 , NE0 ), : KE1 ( 14 , NE1 ) *  Sine and cosine coefficients DOUBLE PRECISION SE0 ( 2 , NE0 ), : SE1 ( 2 , NE1 ) *  Argument coefficients for t&#94;0 DATA ( ( KE0 ( I , J ), I = 1 , 14 ), J = 1 , 10 ) / : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 1 , 0 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( KE0 ( I , J ), I = 1 , 14 ), J = 11 , 20 ) / : 1 , 0 , 0 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 1 , 2 , - 2 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 1 , 2 , - 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 4 , - 4 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 1 , - 1 , 1 , 0 , - 8 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 2 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( KE0 ( I , J ), I = 1 , 14 ), J = 21 , 30 ) / : 0 , 0 , 2 , - 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 1 , - 2 , 2 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 1 , - 2 , 2 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 0 , 0 , 0 , 0 , 8 , - 13 , 0 , 0 , 0 , 0 , 0 , - 1 , : 0 , 0 , 0 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 2 , 0 , - 2 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 1 , 2 , - 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , 0 , - 2 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 0 , 0 , 4 , - 2 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 / DATA ( ( KE0 ( I , J ), I = 1 , 14 ), J = 31 , NE0 ) / : 0 , 0 , 2 , - 2 , 4 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , - 2 , 0 , - 3 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , : 1 , 0 , - 2 , 0 , - 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 / *  Argument coefficients for t&#94;1 DATA ( ( KE1 ( I , J ), I = 1 , 14 ), J = 1 , NE1 ) / : 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 / *  Sine and cosine coefficients for t&#94;0 DATA ( ( SE0 ( I , J ), I = 1 , 2 ), J = 1 , 10 ) / : + 264 0.96D-6 , - 0.39D-6 , : + 6 3.52D-6 , - 0.02D-6 , : + 1 1.75D-6 , + 0.01D-6 , : + 1 1.21D-6 , + 0.01D-6 , : - 4.55D-6 , + 0.00D-6 , : + 2.02D-6 , + 0.00D-6 , : + 1.98D-6 , + 0.00D-6 , : - 1.72D-6 , + 0.00D-6 , : - 1.41D-6 , - 0.01D-6 , : - 1.26D-6 , - 0.01D-6 / DATA ( ( SE0 ( I , J ), I = 1 , 2 ), J = 11 , 20 ) / : - 0.63D-6 , + 0.00D-6 , : - 0.63D-6 , + 0.00D-6 , : + 0.46D-6 , + 0.00D-6 , : + 0.45D-6 , + 0.00D-6 , : + 0.36D-6 , + 0.00D-6 , : - 0.24D-6 , - 0.12D-6 , : + 0.32D-6 , + 0.00D-6 , : + 0.28D-6 , + 0.00D-6 , : + 0.27D-6 , + 0.00D-6 , : + 0.26D-6 , + 0.00D-6 / DATA ( ( SE0 ( I , J ), I = 1 , 2 ), J = 21 , 30 ) / : - 0.21D-6 , + 0.00D-6 , : + 0.19D-6 , + 0.00D-6 , : + 0.18D-6 , + 0.00D-6 , : - 0.10D-6 , + 0.05D-6 , : + 0.15D-6 , + 0.00D-6 , : - 0.14D-6 , + 0.00D-6 , : + 0.14D-6 , + 0.00D-6 , : - 0.14D-6 , + 0.00D-6 , : + 0.14D-6 , + 0.00D-6 , : + 0.13D-6 , + 0.00D-6 / DATA ( ( SE0 ( I , J ), I = 1 , 2 ), J = 31 , NE0 ) / : - 0.11D-6 , + 0.00D-6 , : + 0.11D-6 , + 0.00D-6 , : + 0.11D-6 , + 0.00D-6 / *  Sine and cosine coefficients for t&#94;1 DATA ( ( SE1 ( I , J ), I = 1 , 2 ), J = 1 , NE1 ) / : - 0.87D-6 , + 0.00D-6 / * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *  Interval between fundamental epoch J2000.0 and current date (JC). T = ( ( DATE1 - DJ0 ) + DATE2 ) / DJC *  Fundamental Arguments (from IERS Conventions 2000) *  Mean Anomaly of the Moon. FA ( 1 ) = ANMP ( ( 48586 8.249036D0 + : ( 71592 3.2178D0 + : ( 3 1.8792D0 + : ( 0.051635D0 + : ( - 0.00024470D0 ) : * T ) * T ) * T ) * T ) * DAS2R : + MOD ( 1325 D0 * T , 1 D0 ) * D2PI ) *  Mean Anomaly of the Sun. FA ( 2 ) = ANMP ( ( 128710 4.793048D0 + : ( 129258 1.0481D0 + : ( - 0.5532D0 + : ( + 0.000136D0 + : ( - 0.00001149D0 ) : * T ) * T ) * T ) * T ) * DAS2R : + MOD ( 99 D0 * T , 1 D0 ) * D2PI ) *  Mean Longitude of the Moon minus Mean Longitude of the Ascending *  Node of the Moon. FA ( 3 ) = ANMP ( ( 33577 9.526232D0 + : ( 29526 2.8478D0 + : ( - 1 2.7512D0 + : ( - 0.001037D0 + : ( 0.00000417D0 ) : * T ) * T ) * T ) * T ) * DAS2R : + MOD ( 1342 D0 * T , 1 D0 ) * D2PI ) *  Mean Elongation of the Moon from the Sun. FA ( 4 ) = ANMP ( ( 107226 0.703692D0 + : ( 110560 1.2090D0 + : ( - 6.3706D0 + : ( 0.006593D0 + : ( - 0.00003169D0 ) : * T ) * T ) * T ) * T ) * DAS2R : + MOD ( 1236 D0 * T , 1 D0 ) * D2PI ) *  Mean Longitude of the Ascending Node of the Moon. FA ( 5 ) = ANMP ( ( 45016 0.398036D0 + : ( - 48289 0.5431D0 + : ( 7.4722D0 + : ( 0.007702D0 + : ( - 0.00005939D0 ) : * T ) * T ) * T ) * T ) * DAS2R : + MOD ( - 5 D0 * T , 1 D0 ) * D2PI ) FA ( 6 ) = ANMP ( 4.402608842D0 + 260 8.7903141574D0 * T ) FA ( 7 ) = ANMP ( 3.176146697D0 + 102 1.3285546211D0 * T ) FA ( 8 ) = ANMP ( 1.753470314D0 + 62 8.3075849991D0 * T ) FA ( 9 ) = ANMP ( 6.203480913D0 + 33 4.0612426700D0 * T ) FA ( 10 ) = ANMP ( 0.599546497D0 + 5 2.9690962641D0 * T ) FA ( 11 ) = ANMP ( 0.874016757D0 + 2 1.3299104960D0 * T ) FA ( 12 ) = ANMP ( 5.481293872D0 + 7.4781598567D0 * T ) FA ( 13 ) = ANMP ( 5.311886287D0 + 3.8133035638D0 * T ) FA ( 14 ) = ( 0.024381750D0 + 0.00000538691D0 * T ) * T *  Evaluate the EE complementary terms. S0 = 0 D0 S1 = 0 D0 DO I = NE0 , 1 , - 1 A = 0 D0 DO J = 1 , 14 A = A + DBLE ( KE0 ( J , I )) * FA ( J ) END DO S0 = S0 + ( SE0 ( 1 , I ) * SIN ( A ) + SE0 ( 2 , I ) * COS ( A ) ) END DO DO I = NE1 , 1 , - 1 A = 0 D0 DO J = 1 , 14 A = A + DBLE ( KE1 ( J , I )) * FA ( J ) END DO S1 = S1 + ( SE1 ( 1 , I ) * SIN ( A ) + SE1 ( 2 , I ) * COS ( A ) ) END DO EECT2000 = ( S0 + S1 * T ) * DAS2R *  Finished. END DOUBLE PRECISION FUNCTION ANMP ( A ) *  Normalize angle into the range -pi <= A < +pi. IMPLICIT NONE DOUBLE PRECISION A DOUBLE PRECISION DPI , D2PI PARAMETER ( DPI = 3.141592653589793238462643D0 , : D2PI = 6.283185307179586476925287D0 ) DOUBLE PRECISION W W = MOD ( A , D2PI ) IF ( ABS ( W ) . GE . DPI ) W = W - SIGN ( D2PI , A ) ANMP = W END","tags":"","loc":"sourcefile/novas_f3.1.f.html"},{"title":"CIO_file.f â€“ slsqp","text":"Contents Programs CIO_FILE Source Code CIO_file.f Source Code * *     C I O _ F I L E * *     PROGRAM TO PRODUCE A BINARY DIRECT ACCESS FILE OF RIGHT ASCENSION *     VALUES OF THE CELESTIAL INTERMEDIATE ORIGIN (CIO), GIVEN A *     FORMATTED SEQUENTIAL FILE OF THE SAME DATA.  EACH INPUT AND *     OUTPUT DATA RECORD CONTAINS A TDB JULIAN DATE AND A *     RIGHT ASCENSION VALUE (WRT GCRS) IN ARCSECONDS. * * PROGRAM CIO_FILE DOUBLE PRECISION TDBJD , CIORA CHARACTER INFIL * 24 , OUTFIL * 24 , IDEN * 40 1 FORMAT ( A ) 2 FORMAT ( F16 . 6 , F24 . 14 ) *     GET FILE IDENTIFIERS INFIL = 'CIO_RA.TXT' OUTFIL = 'CIO_RA.DA' C      WRITE ( *, * ) 'ENTER INPUT FILENAME: ' C      READ ( *, * ) INFIL C      WRITE ( *, * ) 'ENTER OUTPUT FILENAME: ' C      READ ( *, * ) OUTFIL *     OPEN INPUT FILE OPEN ( UNIT = 18 , FILE = INFIL , FORM = 'FORMATTED' , . ACCESS = 'SEQUENTIAL' , STATUS = 'OLD' ) *     OPEN OUTPUT FILE OPEN ( UNIT = 19 , FILE = OUTFIL , FORM = 'UNFORMATTED' , . ACCESS = 'DIRECT' , RECL = 16 , STATUS = 'UNKNOWN' ) *     READ INPUT FILE IDENTIFIER READ ( UNIT = 18 , FMT = 1 ) IDEN N = 1 *     MAIN READ-WRITE LOOP 50 READ ( UNIT = 18 , FMT = 2 , END = 70 ) TDBJD , CIORA N = N + 1 WRITE ( UNIT = 19 , REC = N ) TDBJD , CIORA IF ( MOD ( N , 1000 ) . EQ . 0 ) THEN IYEAR = NINT ( ( TDBJD - 245154 5.0 ) / 36 5.25D0 + 200 0.D0 ) WRITE ( * , * ) 'DONE THROUGH RECORD ' , N , '      YEAR ' , IYEAR END IF GO TO 50 *     WRITE NUMBER OF DATA RECORDS IN FIRST RECORD OF OUTPUT FILE *     ALONG WITH FIRST 12 CHARACTERS OF INPUT FILE IDENTIFIER 70 WRITE ( UNIT = 19 , REC = 1 ) N - 1 , IDEN ( 1 : 12 ) *     FINISH UP WRITE ( * , * ) N , ' TOTAL RECORDS WRITTEN' CLOSE ( UNIT = 18 ) CLOSE ( UNIT = 19 ) STOP END PROGRAM CIO_FILE","tags":"","loc":"sourcefile/cio_file.f.html"},{"title":"NOVAS_F3.1_alt.f â€“ slsqp","text":"Contents Subroutines GRVDEF NOD Source Code NOVAS_F3.1_alt.f Source Code *  NOVAS FORTRAN VERS F3.1 *  ALTERNATIVE VERSIONS OF SOME SUBROUTINES ************************************************************************ *                                                                      * *                              N O V A S                               * *           NAVAL OBSERVATORY VECTOR ASTROMETRY SOFTWARE               * *                                                                      * *                            G. H. KAPLAN                              * *                        U.S. NAVAL OBSERVATORY                        * *                                                                      * ************************************************************************ SUBROUTINE GRVDEF ( TJD , LOC , POS1 , POBS , POS2 ) * *     SUBROUTINE GRVDEF VERSION 2. *     THIS SUBROUTINE COMPUTES THE TOTAL GRAVITATIONAL DEFLECTION OF *     LIGHT FOR THE OBSERVED OBJECT DUE TO THE MAJOR GRAVITATING BODIES *     IN THE SOLAR SYSTEM. *     THIS VERSION IS A DUMMY.  NO CORRECTION IS APPLIED. * *          TJD    = (NOT USED) *          LOC    = (NOT USED) *          POS1   = POSITION VECTOR OF OBSERVED OBJECT, WITH RESPECT TO *                   ORIGIN AT OBSERVER (OR THE GEOCENTER), REFERRED *                   TO ICRS AXES, COMPONENTS IN AU (IN) *          POBS   = (NOT USED) *          POS2   = POSITION VECTOR OF OBSERVED OBJECT, WITH RESPECT TO *                   ORIGIN AT OBSERVER (OR THE GEOCENTER), REFERRED *                   TO ICRS AXES, CORRECTED FOR GRAVITATIONAL *                   DEFLECTION, COMPONENTS IN AU (OUT) * *     NOTE:  IN THIS VERSION, POS2 = POS1.  THE GRAVITATIONAL DEFLECTION *     THAT IS NEGLECTED HERE CAN REACH 1.8 ARCSECONDS AT THE LIMB OF *     THE SUN, BUT IS LESS THAN 10 MILLIARCSECONDS OVER THE AREA OF SKY *     MORE THAN 45 DEGREES FROM THE SUN.  SEE TABLE 3.26.1 ON PAGE 138 *     OF THE EXPLANATORY SUPPLEMENT TO THE ASTRONOMICAL ALMANAC (1992). * * DOUBLE PRECISION TJD , POS1 , POBS , POS2 DIMENSION POS1 ( 3 ), POBS ( 3 ), POS2 ( 3 ) DO 20 J = 1 , 3 20 POS2 ( J ) = POS1 ( J ) RETURN END SUBROUTINE NOD ( T , DPSI , DEPS ) * *     SUBROUTINE NOD VERSION 2. *     IN LOW-ACCURACY MODE, THIS SUBROUTINE EVALUATES A SHORT *     NUTATION SERIES AND RETURNS APPROXIMATE VALUES FOR NUTATION IN *     LONGITUDE AND NUTATION IN OBLIQUITY FOR A GIVEN TDB JULIAN DATE. *     IN THIS MODE, ONLY THE LARGEST 13 TERMS OF THE IAU 2000A NUTATION *     SERIES ARE EVALUATED.  IN HIGH-ACCURACY MODE, THE STANDARD IERS *     SUBROUINE IS CALLED TO EVALUATE THE FULL IAU 2000A NUTATION *     SERIES. * *          T    = TDB TIME IN JULIAN CENTURIES SINCE J2000.0 (IN) *          DPSI = NUTATION IN LONGITUDE IN ARCSECONDS (OUT) *          DEPS = NUTATION IN OBLIQUITY IN ARCSECONDS (OUT) * *     NOTE:  IN LOW-ACCURACY MODE, MAX ERROR IN DPSI < 0.05 ARCSEC, *     MAX ERROR IN DEPS < 0.02 ARCSEC, AVERAGE ERROR ABOUT 1/4 OF MAX. * * DOUBLE PRECISION T , DPSI , DEPS , PI , SECCON , T0 , T1 , DP , DE , . X , EL , ELP , F , D , OM , ARG , DSIN , DCOS DIMENSION X ( 9 , 13 ) SAVE PARAMETER ( PI = 3.14159265358979324D0 ) PARAMETER ( SECCON = 18 0.D0 * 360 0.D0 / PI ) *     T0 = TDB JULIAN DATE OF EPOCH J2000.0 (TT) DATA T0 / 245154 5.00000000D0 / *     LARGEST 13 TERMS OF IAU 2000A NUTATION SERIES, WITH PRECISION *     OF COEFFICIENTS TRUNCATED DATA X / 0. , 0. , 0. , 0. , 1. , - 1 7.2064 , - 0.01747 , 9.2052 , 0.00091 , . 0. , 0. , 2. , - 2. , 2. , - 1.3171 , - 0.00017 , 0.5730 , - 0.00030 , . 0. , 0. , 2. , 0. , 2. , - 0.2276 , - 0.00002 , 0.0978 , - 0.00005 , . 0. , 0. , 0. , 0. , 2. , 0.2075 , 0.00002 , - 0.0897 , 0.00005 , . 0. , 1. , 0. , 0. , 0. , 0.1476 , - 0.00036 , 0.0074 , - 0.00002 , . 0. , 1. , 2. , - 2. , 2. , - 0.0517 , 0.00012 , 0.0224 , - 0.00007 , . 1. , 0. , 0. , 0. , 0. , 0.0711 , 0.00001 , - 0.0007 , 0.00000 , . 0. , 0. , 2. , 0. , 1. , - 0.0387 , - 0.00004 , 0.0201 , 0.00000 , . 1. , 0. , 2. , 0. , 2. , - 0.0301 , 0.00000 , 0.0129 , - 0.00001 , . 0. , - 1. , 2. , - 2. , 2. , 0.0216 , - 0.00005 , - 0.0096 , 0.00003 , . 0. , 0. , 2. , - 2. , 1. , 0.0128 , 0.00001 , - 0.0069 , - 0.00000 , . - 1. , 0. , 2. , 0. , 2. , 0.0123 , 0.00000 , - 0.0053 , 0.00000 , . - 1. , 0. , 0. , 2. , 0. , 0.0157 , 0.00000 , - 0.0001 , 0.00000 / *     REMAINING TERMS ALL HAVE AMPLITUDES < 0.01 ARCSECOND *     GET METHOD/ACCURACY MODE CALL GETMOD ( MODE ) IF ( MOD ( MODE , 2 ) . EQ . 0 ) THEN *         HIGH ACCURACY MODE -- CALL IERS SUBROUTINE T1 = T * 3652 5.D0 CALL NU2000A ( T0 , T1 , DP , DE ) DPSI = DP * SECCON DEPS = DE * SECCON ELSE *         LOW ACCURACY MODE -- EVALUATE SHORT NUTATION SERIES ABOVE *         COMPUTATION OF FUNDAMENTAL ARGUMENTS CALL FUNARG ( T , EL , ELP , F , D , OM ) DPSI = 0.D0 DEPS = 0.D0 *         SUM NUTATION SERIES TERMS DO 10 I = 13 , 1 , - 1 ARG = X ( 1 , I ) * EL . + X ( 2 , I ) * ELP . + X ( 3 , I ) * F . + X ( 4 , I ) * D . + X ( 5 , I ) * OM DPSI = ( X ( 6 , I ) + X ( 7 , I ) * T ) * DSIN ( ARG ) + DPSI DEPS = ( X ( 8 , I ) + X ( 9 , I ) * T ) * DCOS ( ARG ) + DEPS 10 CONTINUE *         ADD IN OUT-OF-PHASE COMPONENT OF PRINCIPAL (18.6-YEAR) TERM *         (TO AVOID SMALL BUT LONG-TERM BIAS IN RESULTS) DPSI = DPSI + 0.0033D0 * DCOS ( OM ) DEPS = DEPS + 0.0015D0 * DSIN ( OM ) END IF RETURN END","tags":"","loc":"sourcefile/novas_f3.1_alt.f.html"},{"title":"NOVAS_F3.1_solsys1.f â€“ slsqp","text":"Contents Block Data Units unnamed Functions IDSS Subroutines SOLSYS FILDEF Source Code NOVAS_F3.1_solsys1.f Source Code *** SOLSYS VERSION 1 PACKAGE: SOLSYS, FILDEF, IDSS, BLOCK DATA *** SUBROUTINE SOLSYS ( TJD , M , K , POS , VEL , IERR ) * *     SUBROUTINE SOLSYS VERSION 1. *     THIS SUBROUTINE READS A COORDINATE FILE CONTAINING BARYCENTRIC *     POSITIONS OF SOLAR SYSTEM BODIES AT DAILY INTERVALS AND PROVIDES *     THE POSITION AND VELOCITY OF BODY M AT EPOCH TJD. * *     TJD  = TDB JULIAN DATE OF DESIRED EPOCH (IN) *     M    = BODY IDENTIFICATION NUMBER (IN) *     K    = ORIGIN SELECTION CODE (IN) *            SET K=0 FOR ORIGIN AT SOLAR SYSTEM BARYCENTER *            SET K=1 FOR ORIGIN AT CENTER OF SUN *     POS  = POSITION VECTOR, EQUATORIAL RECTANGULAR *            COORDINATES, REFERRED TO ICRS, COMPONENTS IN AU (OUT) *     VEL  = VELOCITY VECTOR, EQUATORIAL RECTANGULAR *            COORDINATES, REFERRED TO ICRS, COMPONENTS IN AU/DAY (OUT) *     IERR = ERROR INDICATOR (OUT) *            IERR=0 MEANS EVERYTHING OK *            IERR=1 MEANS TJD BEFORE FIRST USABLE DATE IN FILE *            IERR=2 MEANS TJD AFTER LAST USABLE DATE IN FILE *            IERR=3 MEANS BAD VALUE OF M *            IERR=4 MEANS PROBLEM OPENING FILE * *     NOTE 1:  INFORMATION ON THE COORDINATE FILE READ IN: *        - PATH/NAME OF FILE SPECIFIED IN COMMON /SSFILE/ *        - ALL RECORDS ASCII (FORMATTED) *        - FIRST RECORD:  HEADER OR IDENTIFYING INFORMATION, IGNORED *             HERE *        - OTHER RECORDS:  TDB JULIAN DATE, X,Y,Z COORDINATES OF SUN, *             X,Y,Z COORDINATES OF MERCURY, X,Y,Z COORDINATES OF VENUS, *             X,Y,Z COORDINATES OF EARTH, X,Y,Z COORDINATES OF MARS, ... *             READ IN AS PER FORMAT IN COMMON /SSFILE/ *        - RECORDS AT FIXED INTERVALS OF +1 DAY OF TDB *        - X,Y,Z VALUES IN AU WITH RESPECT TO BCRS (ICRS AXES) *        - FILE MUST CONTAIN AT LEAST THE COORDINATES OF THE SUN AND *             THE EARTH *        - EARTH REFERS TO GEOCENTER, NOT EARTH-MOON BARYCENTER *     MANY ASPECTS OF THE FILE CAN BE CONTROLLED AT EXECUTION TIME VIA *     SUBROUTINE FILDEF.  DEFAULTS: FILE PATH/NAME 'SS_EPHEM.TXT' *     READ ON LOGICAL UNIT 20, CONTAINING, IN EACH RECORD, A TDB *     JULIAN DATE AND COORDINATES OF 11 BODIES (SUN, MERCURY, VENUS, *     EARTH, ..., PLUTO, MOON), READ IN WITH FORMAT (F10.2,11(3F16.12)). * *     NOTE 2:  IN SUCCESSIVE CALLS TO THIS SUBROUTINE, INPUT *     JULIAN DATES (TJD) SHOULD GENERALLY BE IN ASCENDING ORDER *     TO AVOID MULTIPLE SEARCHES STARTING AT BEGINNING OF FILE. * *     NOTE 3:  THIS SUBROUTINE USES A 7-POINT LAGRANGIAN INTERPOLATION *     SCHEME ON FIXED INTERVAL DATA, WHICH PRODUCES INTERPOLATION ERRORS *     THAT VARY WITH BODY. * * DOUBLE PRECISION TJD , POS , VEL , XJD , XYZ , BPOS , BVEL , T , . TBEG , TEND , TLAST , ASTART , ORIGIN , TI , AK , AI , P , . DABS , DFLOAT CHARACTER FILNAM * 80 , FORMT * 80 DIMENSION POS ( 3 ), VEL ( 3 ), XJD ( 13 ), XYZ ( 13 , 50 , 3 ), . BPOS ( 13 , 3 ), BVEL ( 13 , 3 ) *     COMMON BLOCK SSFILE CONTAINS INFORMATION ON THE COORDINATE FILE COMMON / SSFILE / LU , N , FILNAM , FORMT SAVE DATA TBEG , TEND , TLAST , MLAST , KLAST / 0.D0 , 1.D10 , 0.D0 , 0 , 0 / 1 FORMAT ( A ) 3 FORMAT ( ' SOLSYS: ERROR ' , I1 , ' AT JD ' , F10 . 1 , ', BODY ID ' , . I2 ) 4 FORMAT ( ' SOLSYS: ERROR 4 TRYING TO OPEN FILE ' , A , ' ON UNIT ' , . I2 ) IF ( TLAST . LE . 0.D0 ) THEN OPEN ( UNIT = LU , FILE = FILNAM , STATUS = 'UNKNOWN' , ERR = 84 ) READ ( LU , 1 ) READ ( LU , FORMT ) T REWIND LU READ ( LU , 1 ) MSUN = IDSS ( 'SUN' ) TLAST = 1.D0 TBEG = T + 8.D0 NPTS = 13 INTPTS = 7 LMIDDL = NPTS / 2 + 1 LSTART = LMIDDL - INTPTS / 2 - 1 ASTART = LSTART END IF *     CHECK FOR COMMON ERROR CONDITIONS IERR = 0 IF ( M . LT . 0 . OR . M . GT . N - 1 ) GO TO 73 IF ( TJD . LT . TBEG ) GO TO 71 IF ( TJD . GT . TEND ) GO TO 78 *     LOGIC TO DETERMINE BEST WAY TO SEARCH COORDINATE FILE *     CHECK IF NEEDED DATA ALREADY IN ARRAYS IF ( DABS ( TJD - TLAST ) . LE . 0.8D0 ) THEN IF ( M . NE . MLAST . OR . K . NE . KLAST ) GO TO 30 GO TO 60 END IF *     IF INPUT JD LESS THAN LAST JD, START FROM BEGINNING OF FILE IF ( TJD . LT . TLAST ) THEN REWIND LU READ ( LU , 1 ) TLAST = 1.D0 END IF *     DECIDE ON COURSE OR FINE SEARCH IF ( TJD - TLAST . LE . 1 5.D0 ) GO TO 20 *     COURSE SEARCH THROUGH COORDINATE FILE 15 READ ( LU , FORMT , END = 77 ) T IF ( TJD - T . GT . 1 0.D0 ) GO TO 15 DO 18 I = 1 , NPTS READ ( LU , FORMT , END = 77 ) T , (( XYZ ( I , L , J ), J = 1 , 3 ), L = 1 , N ) XJD ( I ) = T 18 CONTINUE *     FINE SEARCH THROUGH COORDINATE FILE 20 DO 22 I = 1 , NPTS - 1 IOLD = I + 1 XJD ( I ) = XJD ( IOLD ) DO 21 L = 1 , N DO 21 J = 1 , 3 XYZ ( I , L , J ) = XYZ ( IOLD , L , J ) 21 CONTINUE 22 CONTINUE READ ( LU , FORMT , END = 77 ) T , (( XYZ ( NPTS , L , J ), J = 1 , 3 ), L = 1 , N ) XJD ( NPTS ) = T IF ( DABS ( TJD - XJD ( LMIDDL ) ) . GT . 0.5D0 ) GO TO 20 TLAST = XJD ( LMIDDL ) *     AT THIS POINT, THE FILE IS POSITIONED CORRECTLY AND ARRAYS *     XJD AND XYZ ARE FILLED IN 30 CONTINUE *     FILL ARRAY BPOS WITH DAILY POSITIONS OF BODY M (WITH INDEX = M+1) *     IF K=1, MOVE ORIGIN TO SUN DO 40 I = 1 , NPTS DO 40 J = 1 , 3 ORIGIN = 0.D0 IF ( K . GE . 1 ) ORIGIN = XYZ ( I , MSUN + 1 , J ) BPOS ( I , J ) = XYZ ( I , M + 1 , J ) - ORIGIN 40 CONTINUE *     FILL ARRAY BVEL WITH DAILY VELOCITIES OF BODY M *     COMPUTED FROM NUMERICAL DIFFERENTIATION OF POSITIONS IN ARRAY BPOS DO 50 I = 1 , NPTS DO 50 J = 1 , 3 BVEL ( I , J ) = 0.D0 IF ( I . GE . 4 . AND . I . LE . 10 ) . BVEL ( I , J ) = ( BPOS ( I + 3 , J ) - 9.D0 * BPOS ( I + 2 , J ) . + 4 5.D0 * BPOS ( I + 1 , J ) - 4 5.D0 * BPOS ( I - 1 , J ) . + 9.D0 * BPOS ( I - 2 , J ) - BPOS ( I - 3 , J ) ) . / 6 0.D0 50 CONTINUE MLAST = M KLAST = K *     PERFORM LAGRANGIAN INTERPOLATION FOR POSITION AND VELOCITY AT *     EPOCH TJD 60 TI = TJD - XJD ( LMIDDL ) + LMIDDL DO 63 J = 1 , 3 POS ( J ) = 0.D0 VEL ( J ) = 0.D0 DO 62 L = 1 , INTPTS AK = ASTART + DFLOAT ( L ) P = 1.D0 DO 61 I = 1 , INTPTS IF ( I . EQ . L ) GO TO 61 AI = ASTART + DFLOAT ( I ) P = P * ( TI - AI ) / ( AK - AI ) 61 CONTINUE POS ( J ) = POS ( J ) + P * BPOS ( LSTART + L , J ) VEL ( J ) = VEL ( J ) + P * BVEL ( LSTART + L , J ) 62 CONTINUE 63 CONTINUE GO TO 99 71 IERR = 1 GO TO 80 73 IERR = 1 GO TO 80 77 TEND = T - 6.D0 REWIND LU READ ( LU , 1 ) TLAST = 1.D0 78 IERR = 2 80 WRITE ( * , 3 ) IERR , TJD , M GO TO 99 84 IERR = 4 WRITE ( * , 4 ) FILNAM , LU 99 RETURN END SUBROUTINE FILDEF ( LUN , NBOD , FILNM , FMT ) * *     FOR USE WITH SUBROUTINE SOLSYS VERSION 1. *     THIS SUBROUTINE MAY BE CALLED TO CHANGE THE VALUES IN *     COMMON BLOCK SSFILE, WHICH CONTAINS INFORMATION ON THE *     COORDINATE FILE USED BY SUBROUTINE SOLSYS. * *     LUN    = FORTRAN LOGICAL UNIT NUMBER TO BE USED FOR *              COORDINATE FILE (IN) *     NBOD   = NUMBER OF BODIES WITH COORDINATES IN FILE (IN) *     FILNM  = CHARACTER VARIABLE CONTAINING PATH AND FILE NAME *              OF COORDINATE FILE (IN) *     FMT    = CHARACTER VARIABLE CONTAINING FORMAT STATEMENT, *              INCLUDING PARENTHESES AND EVERYTHING IN BETWEEN (IN) * *     NOTE:  IF LUN OR NBOD IS ZERO OR LESS, OR FILNM OR FMT IS BLANK, *     THE CORRESPONDING DEFAULT VALUE IS NOT CHANGED.  DEFAULT VALUES *     ARE SET IN BLOCK DATA FOR COMMON /SSFILE/. * * CHARACTER FILNM * ( * ), FMT * ( * ), FILNAM * 80 , FORMT * 80 COMMON / SSFILE / LU , N , FILNAM , FORMT SAVE IF ( LUN . GE . 1 ) LU = LUN IF ( NBOD . GE . 1 ) N = NBOD IF ( FILNM . NE . ' ' ) FILNAM = FILNM IF ( FMT . NE . ' ' ) FORMT = FMT RETURN END INTEGER FUNCTION IDSS ( NAME ) * *     FOR USE WITH SOLSYS VERSION 1. *     THIS FUNCTION RETURNS THE ID NUMBER OF A SOLAR SYSTEM BODY *     FOR THE VERSION OF SOLSYS (OR SOLSYS-AUXPOS COMBINATION) IN USE. *     FOR SOLSYS VERSION 1, THE ID NUMBER OF A BODY REFERS TO ITS *     ORDER WITHIN EACH RECORD OF THE COORDINATE FILE, WITH ID NUMBERS *     BEGINNING AT 0 FOR THE FIRST BODY (NORMALLY THE SUN). * *         NAME   = NAME OF BODY WHOSE ID NUMBER IS DESIRED, E.G., *                  'SUN', 'MOON, 'MERCURY', ETC., EXPRESSED AS ALL *                  UPPER-CASE LETTERS (IN) *         IDSS   = ID NUMBER OF BODY, FOR USE IN CALLS TO SOLSYS *                  (FUNCTION VALUE RETURNED) * *     NOTE 1: IN THIS VERSION, ONLY THE FIRST THREE LETTERS OF THE *     BODY'S NAME ARE USED FOR IDENTIFICATION.  ALTERNATIVE VERSIONS *     MIGHT USE MORE LETTERS. * *     NOTE 2: IF NAME IS 'JD', IDSS RETURNS IDSS=1, SINCE SOLSYS *     VERSION 1 DOES NOT PROCESS SPLIT JULIAN DATES. * *     NOTE 3: ALL VERSIONS OF IDSS MUST RETURN IDSS=-9999 FOR OBJECTS *     THAT IT CANNOT IDENTIFY OR ARE UNSUPPORTED BY SOLSYS. * * CHARACTER NAME * ( * ), NAMEIN * 3 , NAMES * 3 DIMENSION NAMES ( 50 ), IDS ( 50 ) DATA NAMES / 'SUN' , 'MER' , 'VEN' , 'EAR' , 'MAR' , 'JUP' , 'SAT' , . 'URA' , 'NEP' , 'PLU' , 'MOO' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' / DATA IDS / 0 , 1 , 2 , 3 , 4 , 5 , 6 , . 7 , 8 , 9 , 10 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 / DATA NUM / 11 / 3 FORMAT ( ' IDSS ERROR: NO BODY ID NUMBER FOUND FOR ' , A ) IDSS = - 9999 NAMEIN = NAME *     LOOK THROUGH LIST OF BODY NAMES TO FIND MATCH DO 20 I = 1 , NUM IF ( NAMEIN . EQ . NAMES ( I ) ) THEN IDSS = IDS ( I ) GO TO 30 END IF 20 CONTINUE *     IF NO MATCH, CHECK FOR INQUIRY ABOUT SPLIT JULIAN DATES IF ( NAMEIN . EQ . 'JD ' ) THEN *         IN THIS CASE, SET IDSS=1, SINCE SOLSYS VERSION 1 DOES NOT *         PROCESSES SPLIT JULIAN DATES (IN SUCCESSIVE CALLS) IDSS = 1 GO TO 30 END IF WRITE ( * , 3 ) NAME 30 RETURN END BLOCK DATA * *     FOR USE WITH SUBROUTINE SOLSYS VERSION 1. *     COMMON BLOCK /SSFILE/ CONTAINS INFORMATION ON THE COORDINATE FILE *     USED BY SUBROUTINE SOLSYS.  THIS BLOCK DATA SEGMENT SETS UP THE *     DEFAULT VALUES FOR THE PARAMETERS IN /SSFILE/.  THESE DEFAULTS CAN *     BE ALTERED BY EXECUTABLE STATEMENTS IN THE MAIN PROGRAM OR ANY *     SUBROUTINE, OR BY A CALL TO SUBROUTINE FILDEF. * *     LU     = FORTRAN LOGICAL UNIT NUMBER OF COORDINATE FILE *     N      = NUMBER OF BODIES WITH COORDINATES IN FILE *     FILNAM = CHARACTER VARIABLE CONTAINING PATH AND FILE NAME *              OF COORDINATE FILE *     FORMT  = CHARACTER VARIABLE CONTAINING FORMAT STATEMENT, *              INCLUDING PARENTHESES AND EVERYTHING BETWEEN * * CHARACTER FILNAM * 80 , FORMT * 80 COMMON / SSFILE / LU , N , FILNAM , FORMT DATA LU / 20 / DATA N / 11 / DATA FILNAM / 'SS_EPHEM.TXT' / DATA FORMT / '(F10.2,33F16.12)' / END","tags":"","loc":"sourcefile/novas_f3.1_solsys1.f.html"},{"title":"NOVAS_F3.1_solsys2.f â€“ slsqp","text":"Contents Functions IDSS Subroutines SOLSYS AUXPOS Source Code NOVAS_F3.1_solsys2.f Source Code *** SOLSYS VERSION 2 PACKAGE: SOLSYS, AUXPOS, IDSS *** SUBROUTINE SOLSYS ( TJD , BODY , ORIGIN , POS , VEL , IERR ) * *     SUBROUTINE SOLSYS VERSION 2. * *---------------------------------------------------------------------- * *---PURPOSE: THIS IS SOLSYS VERSION 2.  IT IS INTENDED TO PROVIDE *            AN INTERFACE BETWEEN THE JPL BINARY DIRECT-ACCESS SOLAR *            SYSTEM EPHEMERIDES AND THE 'NOVAS' ASTROMETRIC SUBROUTINE *            LIBRARY. * *---REFERENCE:  JPL. 2007, JPL Planetary and Lunar Ephemerides: Export *               Information, (Pasadena, CA: JPL) *               http://ssd.jpl.nasa.gov/?planet_eph_export. * *---INPUT ARGUMENTS:     TJD = JULIAN DATE OF THE DESIRED TIME, *                              OR FRACTION OF A DAY (SEE NOTE 4), *                              ON THE T_EPH OR TDB TIME SCALE *                              (DOUBLE PRECISION). *                       BODY = BODY IDENTIFICATION NUMBER FOR THE *                              SOLAR SYSTEM OBJECT OF INTEREST; *                              MERCURY= 1,...,PLUTO= 9, SUN= 10, *                              MOON= 11 (INTEGER). *                     ORIGIN = ORIGIN CODE; SOLAR SYSTEM BARYCENTER= 0, *                              CENTER OF MASS OF THE SUN= 1 (INTEGER). * *---OUTPUT ARGUMENTS:    POS = POSITION VECTOR OF 'BODY' AT TJD; *                              EQUATORIAL RECTANGULAR COORDINATES, *                              REFERRED TO ICRS AXES, COMPONENTS IN *                              AU (DOUBLE PRECISION). *                        VEL = VELOCITY VECTOR OF 'BODY' AT TJD; *                              EQUATORIAL RECTANGULAR COORDINATES, *                              REFERRED TO ICRS AXES, COMPONENTS IN *                              AU/DAY (DOUBLE PRECISION). *                       IERR = 0 ... EVERYTHING OK *                            = 1 ... 'TJD' BEFORE FIRST EPHEMERIS DATE *                            = 2 ... 'TJD' AFTER LAST EPHEMERIS DATE *                            = 3 ... INVALID VALUE OF 'BODY' OR *                                    'ORIGIN' (INTEGER). * *---COMMON BLOCKS: NONE. * *---SUBROUTINES CALLED: SUBROUTINE CONST   (JPL) *                       SUBROUTINE PLEPH   (JPL) *                       SUBROUTINE AUXPOS  (SUPPLIED) * *---VERSION/DATE/PROGRAMMER: V1/02-90/JAB *                            V2/07-91/GHK *                            V3/05-98/GHK *                            V4/02-04/GHK * *---NOTES: 1. SUBROUTINE PLEPH IS A JPL-SUPPLIED ROUTINE THAT CALLS *             A VARIETY OF OTHER JPL SUBROUTINES. *          2. THIS ROUTINE IS FOR USE WITH 1997 VERSION OF JPL *             EPHEMERIS SOFTWARE, E.G., AS DISTRIBUTED ON CD-ROM *             'JPL PLANETARY AND LUNAR EPHEMERIDES' (C)1997 BY JPL. *             IT MAY NOT WORK PROPERLY WITH PREVIOUS VERSIONS OF THE *             JPL SOFTWARE. *          3. FOR BODY IDENTIFICATION NUMBERS OUTSIDE THE RANGE 1-11, *             SUBROUTINE 'AUXPOS' WILL BE CALLED TO SUPPLY POSITIONS *             AND VELOCITIES FROM SOURCES EXTERNAL TO THE JPL *             EPHEMERIDES.  A DUMMY VERSION OF THIS ROUTINE IS *             PROVIDED, WHICH CAN BE REPLACED BY THE USER. *          4. IF TJD IS BETWEEN -1.D0 AND +1.D0, IT IS ASSUMED TO *             REPRESENT A FRACTION OF A DAY, WITH THE WHOLE DAYS PART *             OF THE JULIAN DATE TAKEN FROM A PREVIOUS CALL. * *---------------------------------------------------------------------- INTEGER BODY , ORIGIN , IERR , TARG , CENT , I , N DOUBLE PRECISION TJD , POS ( 3 ), VEL ( 3 ), POSVEL ( 6 ), VALUES ( 500 ), SSS ( 3 ), . BEGJD , ENDJD , TJD1 , TJD2 ( 2 ), TLAST , DINT CHARACTER NAMES ( 500 ) * 6 LOGICAL FIRST SAVE FIRST , BEGJD , ENDJD , TLAST DATA FIRST / . TRUE . / 3 FORMAT ( ' SOLSYS: ERROR ' , I1 , ' AT JD ' , F10 . 1 , ', BODY ID ' , . I2 ) *---ON FIRST CALL, CALL JPL ROUTINE 'CONST' TO OBTAIN BEGINNING *   AND ENDING JULIAN DATES OF EPHEMERIS IF ( FIRST ) THEN CALL CONST ( NAMES , VALUES , SSS , N ) BEGJD = SSS ( 1 ) ENDJD = SSS ( 2 ) TLAST = 0.D0 FIRST = . FALSE . END IF *---INITIALIZE OUTPUT ARGUMENTS POS ( 1 ) = 0.D0 POS ( 2 ) = 0.D0 POS ( 3 ) = 9 9.D0 VEL ( 1 ) = 0.D0 VEL ( 2 ) = 0.D0 VEL ( 3 ) = 0.D0 IERR = 0 *---SET UP SPLIT JULIAN DATE IF ( DABS ( TJD ) . LE . 1.D0 ) THEN TJD2 ( 1 ) = TLAST TJD2 ( 2 ) = TJD ELSE TLAST = DINT ( TJD ) TJD2 ( 1 ) = TLAST TJD2 ( 2 ) = TJD - TLAST END IF TJD1 = TJD2 ( 1 ) + TJD2 ( 2 ) *---PERFORM SANITY CHECKS ON THE INPUT BODY AND ORIGIN. IF ( ( ORIGIN . LT . 0 ) . OR . ( ORIGIN . GT . 1 ) ) THEN IERR = 3 GO TO 99 ELSE IF ( ( BODY . LT . 1 ) . OR . ( BODY . GT . 11 ) ) THEN *         CALL AUXPOS FOR AUXILIARY BODIES (IF ANY) CALL AUXPOS ( TJD1 , BODY , ORIGIN , POS , VEL , JERR ) IERR = JERR GO TO 99 ENDIF *---CHECK THAT REQUESTED JULIAN DATE IS WITHIN RANGE OF EPHEMERIS. IF ( TJD1 . LT . BEGJD ) THEN IERR = 1 GO TO 99 ELSE IF ( TJD1 . GT . ENDJD ) THEN IERR = 2 GO TO 99 ENDIF *---SELECT 'TARG' ACCORDING TO VALUE OF 'BODY'. IF ( BODY . EQ . 10 ) THEN TARG = 11 ELSE IF ( BODY . EQ . 11 ) THEN TARG = 10 ELSE TARG = BODY ENDIF *---SELECT 'CENT' ACCORDING TO THE VALUE OF 'ORIGIN'. IF ( ORIGIN . EQ . 0 ) THEN CENT = 12 ELSE IF ( ORIGIN . EQ . 1 ) THEN CENT = 11 ENDIF *---CALL JPL ROUTINE 'DPLEPH' TO OBTAIN POSITION AND VELOCITY ARRAY *   'POSVEL'. CALL DPLEPH ( TJD2 , TARG , CENT , POSVEL ) *     ABOVE IS EQUIVALENT TO CALL PLEPH ( TJD1, TARG, CENT,   POSVEL ) *     IF JULIAN DATE IS NOT SPLIT *---DECOMPOSE 'POSVEL' INTO POSITION 'POS' AND VELOCITY 'VEL'. DO 10 I = 1 , 3 POS ( I ) = POSVEL ( I ) VEL ( I ) = POSVEL ( I + 3 ) 10 CONTINUE *---ROTATE POSITION AND VELOCITY FROM DYNAMICAL TO ICRS FRAME *   (NECESSARY ONLY FOR JPL EPHEMERIDES PRIOR TO DE405/LE405) *     CALL FRAME (POSVEL(1),-1,POS) *     CALL FRAME (POSVEL(4),-1,VEL) 99 IF ( IERR . NE . 0 ) WRITE ( * , 3 ) IERR , TJD1 , BODY RETURN END SUBROUTINE AUXPOS ( TJD , M , K , POS , VEL , JERR ) * *     FOR USE WITH SUBROUTINE SOLSYS VERSION 2. *     THIS SUBROUTINE PROVIDES THE POSITION AND VELOCITY OF *     AN AUXILIARY SOLAR SYSTEM BODY AT TIME TJD.  IT IS CALLED *     FROM SOLSYS VERSION 2 (JPL EPHEMERIS ACCESS) WHEN THE BODY *     IDENTIFICATION NUMBER IS OUTSIDE THE RANGE 1-11.  ITS *     INTENDED USE IS TO SUPPLY EPHEMERIS DATA FROM NON-STANDARD *     SOURCES. * *          TJD  = TDB JULIAN DATE OF DESIRED EPOCH (IN) *          M    = BODY IDENTIFICATION NUMBER (IN) *          K    = ORIGIN SELECTION CODE (IN) *                 SET K=0 FOR ORIGIN AT SOLAR SYSTEM BARYCENTER *                 SET K=1 FOR ORIGIN AT CENTER OF SUN *          POS  = POSITION VECTOR, EQUATORIAL RECTANGULAR *                 COORDINATES, REFERRED TO ICRS AXES, COMPONENTS *                 IN AU (OUT) *          VEL  = VELOCITY VECTOR, EQUATORIAL RECTANGULAR *                 COORDINATES, REFERRED TO ICRS AXES, COMPONENTS *                 IN AU/DAY (OUT) *          JERR = ERROR INDICATOR (OUT) *                 JERR=0 MEANS EVERYTHING OK *                 JERR=1 MEANS TJD BEFORE FIRST VALID DATE *                 JERR=2 MEANS TJD AFTER LAST VALID DATE *                 JERR=3 MEANS INVALID VALUE OF M OR K * * *---------------------------------------------------------------------- *     THIS IS A DUMMY VERSION OF SUBROUTINE AUXPOS.  IT SIMPLY *     RETURNS AN ERROR CODE, SINCE IT CANNOT SUPPLY POSITIONS *     OR VELOCITIES.  FOR NORMAL (CORRECT) ACCESS TO THE JPL *     EPHEMERIDES VIA SOLSYS VERSION 2, THIS ROUTINE WILL NEVER *     BE CALLED. * *     A WORKING VERSION MUST BE SUPPLIED BY THE USER ONLY IF THE *     POSITIONS/VELOCITIES OF AUXILIARY SOLAR SYSTEM BODIES (E.G., *     ASTEROIDS) ARE OF INTEREST.  SUCH DATA COULD BE OBTAINED FROM *     EPHEMERIS FILES OR CLOSED-FORM SERIES APPROXIMATIONS.  THE *     BODY IDENTIFICATION NUMBERS USED FOR SUCH OBJECTS MUST BE *     OUTSIDE THE RANGE 1-11 USED FOR MAJOR SOLAR SYSTEM BODIES. * *     GENERALLY, IN SUCH CASES IT WOULD BE NECESSARY FOR THIS ROUTINE *     TO PROVIDE ONLY BARYCENTRIC POSITIONS FOR THE INPUT JD. *     VELOCITIES ARE NEEDED ONLY FOR THE EARTH, AND HELIOCENTRIC *     POSITIONS ARE NOT USED IN NOVAS.  ALSO, DO NOT USE FORTRAN *     I/O UNIT NUMBER 12, WHICH IS USED BY THE JPL ROUTINES. *---------------------------------------------------------------------- DOUBLE PRECISION TJD , POS , VEL DIMENSION POS ( 3 ), VEL ( 3 ) POS ( 1 ) = 0.D0 POS ( 2 ) = 0.D0 POS ( 3 ) = 9 9.D0 VEL ( 1 ) = 0.D0 VEL ( 2 ) = 0.D0 VEL ( 3 ) = 0.D0 JERR = 3 RETURN END INTEGER FUNCTION IDSS ( NAME ) * *     THIS FUNCTION RETURNS THE ID NUMBER OF A SOLAR SYSTEM BODY *     FOR THE VERSION OF SOLSYS (OR SOLSYS-AUXPOS COMBINATION) IN USE. * *         NAME   = NAME OF BODY WHOSE ID NUMBER IS DESIRED, E.G., *                  'SUN', 'MOON, 'MERCURY', ETC., EXPRESSED AS ALL *                  UPPER-CASE LETTERS (IN) *         IDSS   = ID NUMBER OF BODY, FOR USE IN CALLS TO SOLSYS *                  (FUNCTION VALUE RETURNED) * *     NOTE 1: IN THIS VERSION, ONLY THE FIRST THREE LETTERS OF THE *     BODY'S NAME ARE USED FOR IDENTIFICATION.  ALTERNATIVE VERSIONS *     MIGHT USE MORE LETTERS. * *     NOTE 2: IF NAME IS 'JD', IDSS RETURNS IDSS=2 IF SOLSYS PROCESSES *     SPLIT JULIAN DATES (IN SUCCESSIVE CALLS), IDSS=1 OTHERWISE * *     NOTE 3: ALL VERSIONS OF IDSS MUST RETURN IDSS=-9999 FOR OBJECTS *     THAT IT CANNOT IDENTIFY OR ARE UNSUPPORTED BY SOLSYS. * * CHARACTER NAME * ( * ), NAMEIN * 3 , NAMES * 3 DIMENSION NAMES ( 35 ), IDS ( 35 ) DATA NAMES / 'SUN' , 'MOO' , 'EAR' , 'MER' , 'VEN' , 'MAR' , 'JUP' , . 'SAT' , 'URA' , 'NEP' , 'PLU' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' / DATA IDS / 10 , 11 , 3 , 1 , 2 , 4 , 5 , . 6 , 7 , 8 , 9 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 / DATA NUM / 11 / 3 FORMAT ( ' IDSS ERROR: NO BODY ID NUMBER FOUND FOR ' , A ) IDSS = - 9999 NAMEIN = NAME C     LOOK THROUGH LIST OF BODY NAMES TO FIND MATCH DO 20 I = 1 , NUM IF ( NAMEIN . EQ . NAMES ( I ) ) THEN IDSS = IDS ( I ) GO TO 30 END IF 20 CONTINUE C     IF NO MATCH, CHECK FOR INQUIRY ABOUT SPLIT JULIAN DATES IF ( NAMEIN . EQ . 'JD ' ) THEN C         IN THIS CASE, SET IDSS=2 IF SOLSYS PROCESSES SPLIT C         JULIAN DATES (IN SUCCESSIVE CALLS), IDSS=1 OTHERWISE IDSS = 2 GO TO 30 END IF WRITE ( * , 3 ) NAME 30 RETURN END","tags":"","loc":"sourcefile/novas_f3.1_solsys2.f.html"},{"title":"NOVAS_F3.1_solsys3.f â€“ slsqp","text":"Contents Functions IDSS Subroutines SOLSYS SUN Source Code NOVAS_F3.1_solsys3.f Source Code *** SOLSYS VERSION 3 PACKAGE: SOLSYS, SUN, IDSS *** SUBROUTINE SOLSYS ( TJD , M , K , POS , VEL , IERR ) * *     SUBROUTINE SOLSYS VERSION 3. *     THIS SUBROUTINE PROVIDES THE POSITION AND VELOCITY OF THE *     EARTH AT EPOCH TJD BY EVALUATING A CLOSED-FORM THEORY WITHOUT *     REFERENCE TO AN EXTERNAL FILE.  THIS ROUTINE CAN ALSO PROVIDE *     THE POSITION AND VELOCITY OF THE SUN. * *          TJD  = TDB JULIAN DATE OF DESIRED EPOCH (IN) *          M    = BODY IDENTIFICATION NUMBER (IN) *                 SET M=0 OR M=1 FOR THE SUN *                 SET M=2 OR M=3 FOR THE EARTH *          K    = ORIGIN SELECTION CODE (IN) *                 SET K=0 FOR ORIGIN AT SOLAR SYSTEM BARYCENTER *                 SET K=1 FOR ORIGIN AT CENTER OF SUN *          POS  = POSITION VECTOR, EQUATORIAL RECTANGULAR *                 COORDINATES, REFERRED TO MEAN EQUATOR AND EQUINOX *                 OF J2000.0, COMPONENTS IN AU (OUT) *          VEL  = VELOCITY VECTOR, EQUATORIAL RECTANGULAR *                 COORDINATES, REFERRED TO MEAN EQUATOR AND EQUINOX *                 OF J2000.0, COMPONENTS IN AU/DAY (OUT) *          IERR = ERROR INDICATOR (OUT) *                 IERR=0 MEANS EVERYTHING OK *                 IERR=1 MEANS TJD BEFORE FIRST ALLOWED DATE *                 IERR=2 MEANS TJD AFTER LAST ALLOWED DATE * * DOUBLE PRECISION TJD , POS , VEL , PI , TWOPI , T0 , OBL , EL , C , P , TLAST , . PM , PA , PE , PJ , PO , PW , PL , PN , . TMASS , SE , CE , SI , CI , SN , CN , SW , CW , P1 , P2 , P3 , Q1 , Q2 , Q3 , ROOTE , A , B , . QJD , E , MLON , MA , U , SINU , COSU , ANR , PPLAN , VPLAN , F , PBARY , VBARY , . DFLOAT , DABS , DMOD , DSIN , DCOS , DSQRT DIMENSION POS ( 3 ), VEL ( 3 ), EL ( 21 ), C ( 13 ), P ( 3 , 3 ), . PM ( 4 ), PA ( 4 ), PE ( 4 ), PJ ( 4 ), PO ( 4 ), PW ( 4 ), PL ( 4 ), PN ( 4 ), . A ( 3 , 4 ), B ( 3 , 4 ), PPLAN ( 3 ), VPLAN ( 3 ), PBARY ( 3 ), VBARY ( 3 ) SAVE PARAMETER ( PI = 3.14159265358979324D0 ) PARAMETER ( TWOPI = 2.D0 * PI ) PARAMETER ( T0 = 245154 5.0D0 ) PARAMETER ( OBL = 2 3.43927944D0 ) *     T0 = TDB JULIAN DATE OF EPOCH J2000.0 *     OBL = OBLIQUITY OF ECLIPTIC AT EPOCH J2000.0 DATA EL , C , P / 43 * 0.D0 / , TLAST / 0.D0 / *     ARRAYS BELOW CONTAIN MASSES AND ORBITAL ELEMENTS OF THE FOUR *     LARGEST PLANETS (SEE EXPLANATORY SUPPLEMENT (1992), P. 316) *     WITH ANGLES IN RADIANS *     THIS DATA USED FOR BARYCENTER COMPUTATIONS ONLY *                 JUPITER        SATURN        URANUS       NEPTUNE DATA PM / 104 7.349 D 0 , 349 7.898 D 0 , 2290 3.0 D 0 , 1941 2.2 D 0 / DATA PA / 5.203363 D 0 , 9.537070 D 0 , 1 9.191264 D 0 , 3 0.068963 D 0 / DATA PE / 0.048393 D 0 , 0.054151 D 0 , 0.047168 D 0 , 0.008586 D 0 / DATA PJ / 0.022782 D 0 , 0.043362 D 0 , 0.013437 D 0 , 0.030878 D 0 / DATA PO / 1.755036 D 0 , 1.984702 D 0 , 1.295556 D 0 , 2.298977 D 0 / DATA PW / 0.257503 D 0 , 1.613242 D 0 , 2.983889 D 0 , 0.784898 D 0 / DATA PL / 0.600470 D 0 , 0.871693 D 0 , 5.466933 D 0 , 5.321160 D 0 / DATA PN / 1.450138D-3 , 5.841727D-4 , 2.047497D-4 , 1.043891D-4 / IF ( TLAST . LT . 1.D0 ) THEN *         FIRST TIME COMPUTATIONS *         MASS OF SUN PLUS FOUR INNER PLANETS TMASS = 1.D0 + 5.977D-6 SE = DSIN ( OBL * PI / 18 0.D0 ) CE = DCOS ( OBL * PI / 18 0.D0 ) DO 15 I = 1 , 4 TMASS = TMASS + 1.D0 / PM ( I ) *             COMPUTE SINE AND COSINE OF ORBITAL ANGLES S I = DSIN ( PJ ( I ) ) C I = DCOS ( PJ ( I ) ) S N = DSIN ( PO ( I ) ) C N = DCOS ( PO ( I ) ) S W = DSIN ( PW ( I ) - PO ( I ) ) C W = DCOS ( PW ( I ) - PO ( I ) ) *             COMPUTE P AND Q VECTORS (SEE BROUWER & CLEMENCE (1961), *             METHODS OF CELESTIAL MECHANICS, PP. 35-36.) P 1 = CW * CN - SW * SN * CI P 2 = ( CW * SN + SW * CN * CI ) * CE - SW * SI * SE P 3 = ( CW * SN + SW * CN * CI ) * SE + SW * SI * CE Q 1 = - SW * CN - CW * SN * CI Q 2 = ( - SW * SN + CW * CN * CI ) * CE - CW * SI * SE Q 3 = ( - SW * SN + CW * CN * CI ) * SE + CW * SI * CE ROOTE = DSQRT ( 1.D0 - PE ( I ) ** 2 ) A ( 1 , I ) = PA ( I ) * P1 A ( 2 , I ) = PA ( I ) * P2 A ( 3 , I ) = PA ( I ) * P3 B ( 1 , I ) = PA ( I ) * ROOTE * Q1 B ( 2 , I ) = PA ( I ) * ROOTE * Q2 B ( 3 , I ) = PA ( I ) * ROOTE * Q3 15 CONTINUE TLAST = 1.D0 END IF IERR = 0 *     VALID DATES ARE WITHIN 3 CENTURIES OF J2000, ALTHOUGH RESULTS *     DETERIORATE GRADUALLY IF ( TJD . LT . 234000 0.5D0 ) IERR = 1 IF ( TJD . GT . 256000 0.5D0 ) IERR = 2 IF ( IERR . NE . 0 ) GO TO 110 IF ( M . GE . 2 ) GO TO 30 *     FORM HELIOCENTRIC COORDINATES OF SUN 20 DO 25 J = 1 , 3 POS ( J ) = 0.D0 VEL ( J ) = 0.D0 25 CONTINUE IF ( K . GE . 1 ) GO TO 110 GO TO 90 *     FORM HELIOCENTRIC COORDINATES OF EARTH *     VELOCITIES ARE OBTAINED FROM CRUDE NUMERICAL DIFFERENTIATION 30 DO 35 I = 1 , 3 QJD = TJD + DFLOAT ( I - 2 ) * 0.1D0 C         SUBROUTINE SUN COMPUTES EARTH-SUN VECTOR CALL SUN ( QJD , EL , C ) CALL PRECES ( QJD , C ( 11 ), T0 , POS ) P ( I , 1 ) = - POS ( 1 ) P ( I , 2 ) = - POS ( 2 ) P ( I , 3 ) = - POS ( 3 ) 35 CONTINUE DO 40 J = 1 , 3 POS ( J ) = P ( 2 , J ) VEL ( J ) = ( P ( 3 , J ) - P ( 1 , J ) ) / 0.2D0 40 CONTINUE IF ( K . GE . 1 ) GO TO 110 *     IF K=0, MOVE ORIGIN TO SOLAR SYSTEM BARYCENTER *     SOLAR SYSTEM BARYCENTER COORDINATES COMPUTED FROM KEPLERIAN *     APPROXIMATIONS OF THE COORDINATES OF THE FOUR LARGEST PLANETS 90 IF ( DABS ( TJD - TLAST ) . LT . 1.D-6 ) GO TO 99 DO 92 J = 1 , 3 PBARY ( J ) = 0.D0 VBARY ( J ) = 0.D0 92 CONTINUE *     THE FOLLOWING LOOP CYCLES ONCE FOR EACH OF THE FOUR LARGE PLANETS DO 98 I = 1 , 4 *         COMPUTE MEAN LONGITUDE, MEAN ANOMALY, AND ECCENTRIC ANOMOLY E = PE ( I ) MLON = PL ( I ) + PN ( I ) * ( TJD - T0 ) MA = DMOD ( MLON - PW ( I ), TWOPI ) U = MA + E * DSIN ( MA ) + 0.5D0 * E * E * DSIN ( 2.D0 * MA ) SINU = DSIN ( U ) COSU = DCOS ( U ) *         COMPUTE VELOCITY FACTOR ANR = PN ( I ) / ( 1.D0 - E * COSU ) *         COMPUTE PLANET'S POSITION AND VELOCITY WRT EQ & EQ J2000 PPLAN ( 1 ) = A ( 1 , I ) * ( COSU - E ) + B ( 1 , I ) * SINU PPLAN ( 2 ) = A ( 2 , I ) * ( COSU - E ) + B ( 2 , I ) * SINU PPLAN ( 3 ) = A ( 3 , I ) * ( COSU - E ) + B ( 3 , I ) * SINU VPLAN ( 1 ) = ANR * ( - A ( 1 , I ) * SINU + B ( 1 , I ) * COSU ) VPLAN ( 2 ) = ANR * ( - A ( 2 , I ) * SINU + B ( 2 , I ) * COSU ) VPLAN ( 3 ) = ANR * ( - A ( 3 , I ) * SINU + B ( 3 , I ) * COSU ) *         COMPUTE MASS FACTOR AND ADD IN TO TOTAL DISPLACEMENT F = 1.D0 / ( PM ( I ) * TMASS ) PBARY ( 1 ) = PBARY ( 1 ) + PPLAN ( 1 ) * F PBARY ( 2 ) = PBARY ( 2 ) + PPLAN ( 2 ) * F PBARY ( 3 ) = PBARY ( 3 ) + PPLAN ( 3 ) * F VBARY ( 1 ) = VBARY ( 1 ) + VPLAN ( 1 ) * F VBARY ( 2 ) = VBARY ( 2 ) + VPLAN ( 2 ) * F VBARY ( 3 ) = VBARY ( 3 ) + VPLAN ( 3 ) * F 98 CONTINUE TLAST = TJD 99 DO 100 J = 1 , 3 POS ( J ) = POS ( J ) - PBARY ( J ) VEL ( J ) = VEL ( J ) - VBARY ( J ) 100 CONTINUE 110 RETURN END SUBROUTINE SUN ( DJ , EL , C ) C C     FOR USE WITH SUBROUTINE SOLSYS VERSION 3. C     THIS SUBROUTINE COMPUTES THE COORDINATES OF THE EARTH-SUN C     POSITION VECTOR WITH RESPECT TO THE ECLIPTIC AND EQUATOR C     OF DATE.  A MODIFIED FORM OF NEWCOMB'S THEORY ('TABLES OF THE C     SUN', 1898) IS USED.  ONLY THE LARGEST PERIODIC PERTURBATIONS C     ARE EVALUATED, AND VAN FLANDERN'S EXPRESSIONS FOR THE FUNDAMENTAL C     ARGUMENTS ('IMPROVED MEAN ELEMENTS FOR THE EARTH AND MOON', 1981) C     ARE USED.  THE ABSOLUTE ACCURACY IS NO WORSE THAN 1 ARCSECOND C     (AVERAGE ERROR ABOUT 0.2 ARCSECOND) OVER 1800-2200. C     (ADAPTED FROM SUBROUTINE IAUSUN BY P. M. JANICZEK, USNO.) C C          DJ   = TDB JULIAN DATE OF DESIRED EPOCH (IN) C          EL   = ARRAY OF ORBITAL ELEMENTS (SEE BELOW) FOR C                 EPOCH DJ (OUT) C          C    = ARRAY OF COORDINATES (SEE BELOW) FOR C                 EPOCH DJ (OUT) C C DOUBLE PRECISION DJ , EL , C , T , TP , T20 , RO , GV , GM , GJ , GS , DL , DR , DB , DG , 1 DBLARG , D , TWOPI , STR , RTD , R , TR , 2 SINO , COSO , SINL , COSL , SINB , COSB , 3 DSIN , DCOS , DMOD C DIMENSION EL ( 21 ) C C     EL( 1)= SEMI-MAJOR AXIS, AU C     EL( 2)= ORBITAL ECCENTRICITY C     EL( 5)= LONGITUDE OF PERIGEE, RADIANS C     EL( 9)= UNPERTURBED MEAN LONGITUDE, RADIANS C     EL(10)= MEAN ANOMALY, AFFECTED BY LONG-PD PERTURBATIONS, RADIANS C     EL(11)= UNPERTURBED RADIUS, AU C     EL(12)= EQUATION OF THE CENTER, RADIANS C     EL(13)= MEAN OBLIQUITY OF ECLIPTIC, RADIANS C     EL(14)= MEAN LONGITUDE OF MOON, RADIANS C     EL(15)= MEAN ANOMALY OF MOON, RADIANS C     EL(16)= LUNAR MEAN ARGUMENT OF LATITUDE, RADIANS C     EL(17)= MEAN LONGITUDE OF LUNAR ASCENDING NODE, RADIANS C     EL(21)= MEAN LONGITUDE OF MOON'S PERIGEE, RADIANS C             (REMAINING ELEMENTS OF ARRAY EL NOT USED) C DIMENSION C ( 13 ) C C     C( 1) = PERTURBED RADIUS VECTOR, AU C     C( 2) = SAME AS C(4), DEGREES C     C( 3) = SAME AS C(5), DEGREES C     C( 4) = ECLIPTIC LONGITUDE WRT MEAN ECL & EQUX OF DATE, RADIANS C     C( 5) = ECLIPTIC LATITUDE  WRT MEAN ECL        OF DATE, RADIANS C     C(11) = EQUATORIAL X WRT MEAN EQU & EQUX OF DATE, AU C     C(12) = EQUATORIAL Y WRT MEAN EQU & EQUX OF DATE, AU C     C(13) = EQUATORIAL Z WRT MEAN EQU & EQUX OF DATE, AU C             (REMAINING ELEMENTS OF ARRAY C NOT USED) C C C*********************************************************************** C C     PART I    TABLES OF THE PERTURBATIONS C DIMENSION X ( 8 , 46 ), X1 ( 80 ), X2 ( 80 ), X3 ( 80 ), X4 ( 80 ), X5 ( 48 ) EQUIVALENCE ( X ( 1 , 1 ), X1 ( 1 )) EQUIVALENCE ( X ( 1 , 11 ), X2 ( 1 )) EQUIVALENCE ( X ( 1 , 21 ), X3 ( 1 )) EQUIVALENCE ( X ( 1 , 31 ), X4 ( 1 )) EQUIVALENCE ( X ( 1 , 41 ), X5 ( 1 )) C C     PERTURBATIONS BY VENUS C                  J    I     VC      VS    RHOC    RHOS      BC     BS DATA X1 / - 1. , 0. , + 3 3. , - 6 7. , - 8 5. , - 3 9. , + 2 4. , - 1 7. , 2 - 1. , + 1. , + 235 3. , - 422 8. , - 206 2. , - 114 6. , - 4. , + 3. , 3 - 1. , + 2. , - 6 5. , - 3 4. , + 6 8. , - 1 4. , + 6. , - 9 2. , 4 - 2. , + 1. , - 9 9. , + 6 0. , + 8 4. , + 13 6. , + 2 3. , - 3. , 5 - 2. , + 2. , - 470 2. , + 290 3. , + 359 3. , + 582 2. , + 1 0. , - 6. , 6 - 2. , + 3. , + 179 5. , - 173 7. , - 59 6. , - 63 2. , + 3 7. , - 5 6. , 7 - 3. , + 3. , - 66 6. , + 2 7. , + 4 4. , + 104 4. , + 8. , + 1. , 8 - 3. , + 4. , + 150 8. , - 39 7. , - 38 1. , - 144 8. , + 18 5. , - 10 0. , 9 - 3. , + 5. , + 76 3. , - 68 4. , + 12 6. , + 14 8. , + 6. , - 3. , * - 4. , + 4. , - 18 8. , - 9 3. , - 16 6. , + 33 7. , 0. , 0. / DATA X2 / - 4. , + 5. , - 13 9. , - 3 8. , - 5 1. , + 18 9. , - 3 1. , - 1. , 2 - 4. , + 6. , + 14 6. , - 4 2. , - 2 5. , - 9 1. , + 1 2. , 0. , 3 - 5. , + 5. , - 4 7. , - 6 9. , - 13 4. , + 9 3. , 0. , 0. , 4 - 5. , + 7. , - 11 9. , - 3 3. , - 3 7. , + 13 6. , - 1 8. , - 6. , 5 - 5. , + 8. , + 15 4. , 0. , 0. , - 2 6. , 0. , 0. , 6 - 6. , + 6. , - 4. , - 3 8. , - 8 0. , + 8. , 0. , 0. , C C     PERTURBATIONS BY MARS C                  J    I     VC      VS    RHOC    RHOS      BC     BS 7 + 1. , - 1. , - 21 6. , - 16 7. , - 9 2. , + 11 9. , 0. , 0. , 8 + 2. , - 2. , + 196 3. , - 56 7. , - 57 3. , - 197 6. , 0. , - 8. , 9 + 2. , - 1. , - 165 9. , - 61 7. , + 6 4. , - 13 7. , 0. , 0. , * + 3. , - 3. , + 5 3. , - 11 8. , - 15 4. , - 6 7. , 0. , 0. / DATA X3 / + 3. , - 2. , + 39 6. , - 15 3. , - 7 7. , - 20 1. , 0. , 0. , 2 + 4. , - 3. , - 13 1. , + 48 3. , + 46 1. , + 12 5. , + 7. , + 1. , 3 + 4. , - 2. , + 52 6. , - 25 6. , + 4 3. , + 9 6. , 0. , 0. , 4 + 5. , - 4. , + 4 9. , + 6 9. , + 8 7. , - 6 2. , 0. , 0. , 5 + 5. , - 3. , - 3 8. , + 20 0. , + 8 7. , + 1 7. , 0. , 0. , 6 + 6. , - 4. , - 10 4. , - 11 3. , - 10 2. , + 9 4. , 0. , 0. , 7 + 6. , - 3. , - 1 1. , + 10 0. , - 2 7. , - 4. , 0. , 0. , 8 + 7. , - 4. , - 7 8. , - 7 2. , - 2 6. , + 2 8. , 0. , 0. , 9 + 9. , - 5. , + 6 0. , - 1 5. , - 4. , - 1 7. , 0. , 0. , * + 1 5. , - 8. , + 20 0. , - 3 0. , - 1. , - 6. , 0. , 0. / C C     PERTURBATIONS BY JUPITER C                  J    I     VC      VS    RHOC    RHOS      BC     BS DATA X4 / + 1. , - 2. , - 15 5. , - 5 2. , - 7 8. , + 19 3. , + 7. , 0. , 2 + 1. , - 1. , - 720 8. , + 5 9. , + 5 6. , + 706 7. , - 1. , + 1 7. , 3 + 1. , 0. , - 30 7. , - 258 2. , + 22 7. , - 8 9. , + 1 6. , 0. , 4 + 1. , + 1. , + 8. , - 7 3. , + 7 9. , + 9. , + 1. , + 2 3. , 5 + 2. , - 3. , + 1 1. , + 6 8. , + 10 2. , - 1 7. , 0. , 0. , 6 + 2. , - 2. , + 13 6. , + 272 8. , + 402 1. , - 20 3. , 0. , 0. , 7 + 2. , - 1. , - 53 7. , + 151 8. , + 137 6. , + 48 6. , + 1 3. , + 16 6. , 8 + 3. , - 3. , - 16 2. , + 2 7. , + 4 3. , + 27 8. , 0. , 0. , 9 + 3. , - 2. , + 7 1. , + 55 1. , + 79 6. , - 10 4. , + 6. , - 1. , * + 3. , - 1. , - 3 1. , + 20 8. , + 17 2. , + 2 6. , + 1. , + 1 8. / DATA X5 / + 4. , - 3. , - 4 3. , + 9. , + 1 3. , + 7 3. , 0. , 0. , 2 + 4. , - 2. , + 1 7. , + 7 8. , + 11 0. , - 2 4. , 0. , 0. , C C     PERTURBATIONS BY SATURN C                  J    I     VC      VS    RHOC    RHOS      BC     BS 3 + 1. , - 1. , - 7 7. , + 41 2. , + 42 2. , + 7 9. , + 1. , + 6. , 4 + 1. , 0. , - 3. , - 32 0. , + 8. , - 1. , 0. , 0. , 5 + 2. , - 2. , + 3 8. , - 10 1. , - 15 2. , - 5 7. , 0. , 0. , 6 + 2. , - 1. , + 4 5. , - 10 3. , - 10 3. , - 4 4. , 0. , 0. / C C C*********************************************************************** C C     PART II   NECESSARY PRELIMINARIES C DATA TWOPI / 6.283185307179586D0 / DATA STR / 20626480 6.2470964D0 / DATA RTD / 5 7.295779513082321D0 / DATA R / 129600 0.0D0 / TR = 100 0.0D0 / STR C C     T  = TIME IN JULIAN CENTURIES FROM 1900 JANUARY 0 T = ( DJ - 241502 0.D0 ) / 3652 5.D0 C C     TP = TIME IN JULIAN YEARS     FROM 1850 JANUARY 0 TP = ( DJ - 239675 8.D0 ) / 36 5.25D0 C C     T20= TIME IN JULIAN CENTURIES FROM J2000.0 T20 = ( DJ - 245154 5.D0 ) / 3652 5.D0 C C C*********************************************************************** C C     PART III  COMPUTATION OF ELLIPTIC ELEMENTS AND SECULAR TERMS C C     VAN FLANDERN'S EXPRESSIONS FOR MEAN ELEMENTS EL ( 1 ) = 1.00000030007166D0 EL ( 2 ) = 0.016708320D0 + ( - 0.42229D-04 - 0.126D-06 * T20 ) * T20 EL ( 5 ) = 101857 8.046D0 + ( 619 0.046D0 + 1 ( 1.666D0 + 0.012D0 * T20 ) * T20 ) * T20 EL ( 5 ) = EL ( 5 ) * TR EL ( 9 ) = 100967 7.850D0 + ( 10 0.0D0 * R + 277 1.27D0 + 1 1.089D0 * T20 ) * T20 EL ( 9 ) = DMOD ( EL ( 9 ) * TR , TWOPI ) EL ( 10 ) = 128709 9.804D0 + ( 9 9.0D0 * R + 129258 1.224D0 + 1 ( - 0.577D0 - 0.012D0 * T20 ) * T20 ) * T20 EL ( 10 ) = DMOD ( EL ( 10 ) * TR , TWOPI ) C     EXPRESSION FOR OBLIQUITY FROM P03 (IAU 2006) PRECESSION EL ( 13 ) = 8438 1.406D0 + ( - 4 6.836769D0 + 1 ( - 0.0001831D0 + 0.00200340D0 * T20 ) * T20 ) * T20 EL ( 13 ) = EL ( 13 ) * TR C     KAPLAN CORRECTION TO SUN'S MEAN LONGITUDE TO FIT DE405 OVER C     INTERVAL 1800-2200, USING P03 (IAU 2006) PRECESSION EL ( 9 ) = EL ( 9 ) 1 + ( 0.1320D0 - 0.1355D0 * T20 ) * TR C C*********************************************************************** C C     PART IV   LUNAR TERMS C C     VAN FLANDERN'S EXPRESSIONS FOR MEAN ELEMENTS EL ( 14 ) = 78593 9.157D0 + ( 133 6.0D0 * R + 110837 2.598D0 1 + ( - 5.802D0 + 0.019D0 * T20 ) * T20 ) * T20 EL ( 14 ) = DMOD ( EL ( 14 ) * TR , TWOPI ) EL ( 17 ) = 45016 0.280D0 + ( - 5.0D0 * R - 48289 0.539D0 + 1 ( 7.455D0 + 0.008D0 * T20 ) * T20 ) * T20 EL ( 17 ) = DMOD ( EL ( 17 ) * TR , TWOPI ) EL ( 21 ) = 30007 2.424D0 + ( 1 1.0D0 * R + 39244 9.965D0 + 1 ( - 3 7.112D0 - 0.045D0 * T20 ) * T20 ) * T20 EL ( 21 ) = DMOD ( EL ( 21 ) * TR , TWOPI ) C C     DERIVED ARGUMENTS EL ( 15 ) = EL ( 14 ) - EL ( 21 ) EL ( 16 ) = EL ( 14 ) - EL ( 17 ) EL ( 15 ) = DMOD ( EL ( 15 ), TWOPI ) EL ( 16 ) = DMOD ( EL ( 16 ), TWOPI ) C     MEAN ELONGATION D = EL ( 14 ) - EL ( 9 ) C C     COMBINATIONS OF ARGUMENTS AND THE PERTURBATIONS D = DMOD ( D , TWOPI ) ARG = D DL = + 646 9. * SIN ( ARG ) + 1 3. * SIN ( 3. * ARG ) DR = + 1339 0. * COS ( ARG ) + 3 0. * COS ( 3. * ARG ) C DBLARG = D + EL ( 15 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG DL = DL + 17 7. * SIN ( ARG ) DR = DR + 37 0. * COS ( ARG ) C DBLARG = D - EL ( 15 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG DL = DL - 42 4. * SIN ( ARG ) DR = DR - 133 0. * COS ( ARG ) C DBLARG = 3.D0 * D - EL ( 15 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG DL = DL + 3 9. * SIN ( ARG ) DR = DR + 8 0. * COS ( ARG ) C DBLARG = D + EL ( 10 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG DL = DL - 6 4. * SIN ( ARG ) DR = DR - 14 0. * COS ( ARG ) C DBLARG = D - EL ( 10 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG DL = DL + 17 2. * SIN ( ARG ) DR = DR + 36 0. * COS ( ARG ) C EL ( 16 ) = DMOD ( EL ( 16 ), TWOPI ) ARG = EL ( 16 ) DB = + 57 6. * SIN ( ARG ) C C C*********************************************************************** C C     PART V    COMPUTATION OF PERIODIC PERTURBATIONS C C     THE PERTURBING MEAN ANOMALIES C GV = 0.19984020D+01 + . 1021322923 D + 02 * TP GM = 0.19173489D+01 + . 3340556174 D + 01 * TP GJ = 0.25836283D+01 + . 5296346478 D + 00 * TP GS = 0.49692316D+01 + . 2132432808 D + 00 * TP GV = DMOD ( GV , TWOPI ) GM = DMOD ( GM , TWOPI ) GJ = DMOD ( GJ , TWOPI ) GS = DMOD ( GS , TWOPI ) C C C     MODIFICATION OF FUNDAMENTAL ARGUMENTS C C     APPLICATION OF THE JUPITER-SATURN GREAT INEQUALITY C     TO JUPITER'S MEAN ANOMALY C GJ = GJ + 0.579904067D-02 * DSIN ( 5.D0 * GS - 2.D0 * GJ 1 + 1.1719644977D0 - 0.397401726D-03 * TP ) GJ = DMOD ( GJ , TWOPI ) C C     LONG PERIOD PERTURBATIONS OF MEAN ANOMALY C ST = T C                ARGUMENT IS ( 4 MARS - 7 EARTH + 3 VENUS ) DG = 26 6. * SIN ( 0.555015 + 2.076942 * ST ) C                ARGUMENT IS ( 3 JUPITER - 8 MARS + 4 EARTH ) 1 + 640 0. * SIN ( 4.035027 + 0.3525565 * ST ) C                ARGUMENT IS ( 13 EARTH - 8 VENUS ) 2 + ( 188 2. - 1 6. * ST ) * SIN ( 0.9990265 + 2.622706 * ST ) C C C     COMPUTATION OF THE EQUATION OF THE CENTER C C     FORM PERTURBED MEAN ANOMALY EL ( 10 ) = DG / STR + EL ( 10 ) EL ( 10 ) = DMOD ( EL ( 10 ), TWOPI ) EL ( 12 ) = DSIN ( EL ( 10 )) * ( 691005 7.D0 - ( 1724 0.D0 + 5 2.D0 * T ) * T ) 1 + DSIN ( 2.D0 * EL ( 10 )) * ( 7233 8.D0 - 36 1.D0 * T ) 2 + DSIN ( 3.D0 * EL ( 10 )) * ( 105 4.D0 - 1.D0 * T ) C C     THE UNPERTURBED RADIUS VECTOR RO = 3057 0.D0 - 15 0.D0 * T 1 - DCOS ( EL ( 10 )) * ( 727412 0.D0 - ( 1814 0.D0 + 5 0.D0 * T ) * T ) 2 - DCOS ( 2.D0 * EL ( 10 )) * ( 9138 0.D0 - 46 0.D0 * T ) 3 - DCOS ( 3.D0 * EL ( 10 )) * ( 145 0.D0 - 1 0.D0 * T ) EL ( 11 ) = 1 0.D0 ** ( RO * 1.D-09 ) C C C     SELECTED PLANETARY PERTURBATIONS FROM NEWCOMB'S THEORY FOLLOW C C     PERTURBATIONS BY VENUS DO 20 K = 1 , 16 C     ARGUMENT J * VENUS +   I * EARTH DBLARG = X ( 1 , K ) * GV + X ( 2 , K ) * EL ( 10 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG CS = COS ( ARG ) SS = SIN ( ARG ) DL = ( X ( 3 , K ) * CS + X ( 4 , K ) * SS ) + DL DR = ( X ( 5 , K ) * CS + X ( 6 , K ) * SS ) + DR DB = ( X ( 7 , K ) * CS + X ( 8 , K ) * SS ) + DB 20 CONTINUE C C     PERTURBATIONS BY MARS DO 30 K = 17 , 30 C     ARGUMENT  J * MARS +   I * EARTH DBLARG = X ( 1 , K ) * GM + X ( 2 , K ) * EL ( 10 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG CS = COS ( ARG ) SS = SIN ( ARG ) DL = ( X ( 3 , K ) * CS + X ( 4 , K ) * SS ) + DL DR = ( X ( 5 , K ) * CS + X ( 6 , K ) * SS ) + DR DB = ( X ( 7 , K ) * CS + X ( 8 , K ) * SS ) + DB 30 CONTINUE C C     PERTURBATIONS BY JUPITER DO 40 K = 31 , 42 C     ARGUMENT J*JUPITER +   I * EARTH DBLARG = X ( 1 , K ) * GJ + X ( 2 , K ) * EL ( 10 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG CS = COS ( ARG ) SS = SIN ( ARG ) DL = ( X ( 3 , K ) * CS + X ( 4 , K ) * SS ) + DL DR = ( X ( 5 , K ) * CS + X ( 6 , K ) * SS ) + DR DB = ( X ( 7 , K ) * CS + X ( 8 , K ) * SS ) + DB 40 CONTINUE C C     PERTURBATIONS BY SATURN DO 50 K = 43 , 46 C     ARGUMENT J*SATURN  +   I * EARTH DBLARG = X ( 1 , K ) * GS + X ( 2 , K ) * EL ( 10 ) DBLARG = DMOD ( DBLARG , TWOPI ) ARG = DBLARG CS = COS ( ARG ) SS = SIN ( ARG ) DL = ( X ( 3 , K ) * CS + X ( 4 , K ) * SS ) + DL DR = ( X ( 5 , K ) * CS + X ( 6 , K ) * SS ) + DR DB = ( X ( 7 , K ) * CS + X ( 8 , K ) * SS ) + DB 50 CONTINUE C C C*********************************************************************** C C     PART VI   COMPUTATION OF ECLIPTIC AND EQUATORIAL COORDINATES C C ( 1 ) = EL ( 11 ) * 1 0.D0 ** ( DR * 1.D-09 ) C ( 4 ) = ( DL + DG + EL ( 12 )) / STR + EL ( 9 ) C ( 4 ) = DMOD ( C ( 4 ), TWOPI ) C ( 5 ) = DB / STR C ( 2 ) = C ( 4 ) * RTD C ( 3 ) = C ( 5 ) * RTD SINO = DSIN ( EL ( 13 )) COSO = DCOS ( EL ( 13 )) SINL = DSIN ( C ( 4 )) COSL = DCOS ( C ( 4 )) SINB = DSIN ( C ( 5 )) COSB = DCOS ( C ( 5 )) C ( 11 ) = C ( 1 ) * ( COSB * COSL ) C ( 12 ) = C ( 1 ) * ( COSB * SINL * COSO - SINB * SINO ) C ( 13 ) = C ( 1 ) * ( COSB * SINL * SINO + SINB * COSO ) C C C*********************************************************************** C C RETURN C END INTEGER FUNCTION IDSS ( NAME ) * *     THIS FUNCTION RETURNS THE ID NUMBER OF A SOLAR SYSTEM BODY *     FOR THE VERSION OF SOLSYS (OR SOLSYS-AUXPOS COMBINATION) IN USE. * *         NAME   = NAME OF BODY WHOSE ID NUMBER IS DESIRED, E.G., *                  'SUN', 'MOON, 'MERCURY', ETC., EXPRESSED AS ALL *                  UPPER-CASE LETTERS (IN) *         IDSS   = ID NUMBER OF BODY, FOR USE IN CALLS TO SOLSYS *                  (FUNCTION VALUE RETURNED) * *     NOTE 1: IN THIS VERSION, ONLY THE FIRST THREE LETTERS OF THE *     BODY'S NAME ARE USED FOR IDENTIFICATION.  ALTERNATIVE VERSIONS *     MIGHT USE MORE LETTERS. * *     NOTE 2: IF NAME IS 'JD', IDSS RETURNS IDSS=1, SINCE SOLSYS *     VERSION 3 DOES NOT PROCESS SPLIT JULIAN DATES. * *     NOTE 3: ALL VERSIONS OF IDSS MUST RETURN IDSS=-9999 FOR OBJECTS *     THAT IT CANNOT IDENTIFY OR ARE UNSUPPORTED BY SOLSYS. * * CHARACTER NAME * ( * ), NAMEIN * 3 , NAMES * 3 DIMENSION NAMES ( 35 ), IDS ( 35 ) DATA NAMES / 'SUN' , 'EAR' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' , . '---' , '---' , '---' , '---' , '---' , '---' , '---' / DATA IDS / 0 , 3 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 , . 0 , 0 , 0 , 0 , 0 , 0 , 0 / DATA NUM / 2 / 3 FORMAT ( ' IDSS ERROR: NO BODY ID NUMBER FOUND FOR ' , A ) IDSS = - 9999 NAMEIN = NAME *     LOOK THROUGH LIST OF BODY NAMES TO FIND MATCH DO 20 I = 1 , NUM IF ( NAMEIN . EQ . NAMES ( I ) ) THEN IDSS = IDS ( I ) GO TO 30 END IF 20 CONTINUE *     IF NO MATCH, CHECK FOR INQUIRY ABOUT SPLIT JULIAN DATES IF ( NAMEIN . EQ . 'JD ' ) THEN *         IN THIS CASE, SET IDSS=2 IF SOLSYS PROCESSES SPLIT *         JULIAN DATES (IN SUCCESSIVE CALLS), IDSS=1 OTHERWISE IDSS = 1 GO TO 30 END IF WRITE ( * , 3 ) NAME 30 RETURN END","tags":"","loc":"sourcefile/novas_f3.1_solsys3.f.html"},{"title":"EECT2000 â€“ slsqp","text":"function EECT2000(DATE1, DATE2) Arguments Type Intent Optional Attributes Name double precision :: DATE1 double precision :: DATE2 Return Value doubleprecision Contents None","tags":"","loc":"proc/eect2000.html"},{"title":"ANMP â€“ slsqp","text":"function ANMP(A) Arguments Type Intent Optional Attributes Name double precision :: A Return Value doubleprecision Contents None","tags":"","loc":"proc/anmp.html"},{"title":"PLACE â€“ slsqp","text":"subroutine PLACE(TJD, OBJECT, LOCATN, ICOORD, STAR, OBSERV, SKYPOS) Arguments Type Intent Optional Attributes Name double precision :: TJD character(len=*) :: OBJECT integer :: LOCATN integer :: ICOORD double precision :: STAR double precision :: OBSERV double precision :: SKYPOS Calls proc~~place~~CallsGraph proc~place PLACE proc~propmo PROPMO proc~place->proc~propmo proc~geocen GEOCEN proc~place->proc~geocen proc~frame FRAME proc~place->proc~frame proc~dlight DLIGHT proc~place->proc~dlight proc~radvl RADVL proc~place->proc~radvl proc~geopos GEOPOS proc~place->proc~geopos proc~nutate NUTATE proc~place->proc~nutate proc~astcon ASTCON proc~place->proc~astcon proc~ciobas CIOBAS proc~place->proc~ciobas proc~cioloc CIOLOC proc~place->proc~cioloc proc~angles ANGLES proc~place->proc~angles proc~littim LITTIM proc~place->proc~littim proc~limang LIMANG proc~place->proc~limang proc~solsys SOLSYS proc~place->proc~solsys setvec setvec proc~place->setvec proc~aberat ABERAT proc~place->proc~aberat proc~preces PRECES proc~place->proc~preces proc~grvdef GRVDEF proc~place->proc~grvdef proc~times TIMES proc~place->proc~times proc~geocen->proc~astcon proc~dlight->proc~astcon proc~radvl->proc~astcon proc~geopos->proc~frame proc~geopos->proc~nutate proc~geopos->proc~astcon proc~geopos->proc~preces eqinox eqinox proc~geopos->eqinox getdt getdt proc~geopos->getdt proc~sidtim SIDTIM proc~geopos->proc~sidtim proc~etilt ETILT proc~geopos->proc~etilt resume resume proc~geopos->resume proc~nutate->proc~etilt proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~ciobas->proc~preces proc~ciord CIORD proc~cioloc->proc~ciord proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~angles->setvec proc~littim->proc~geocen proc~idss IDSS proc~littim->proc~idss proc~limang->proc~astcon dasin dasin proc~limang->dasin proc~solsys->proc~idss proc~aberat->proc~astcon proc~grvdef->proc~geocen proc~grvdef->proc~dlight proc~grvdef->proc~astcon proc~grvdef->proc~solsys id id proc~grvdef->id proc~grvd GRVD proc~grvdef->proc~grvd proc~grvdef->proc~idss proc~grvd->proc~astcon proc~eqxra->proc~etilt proc~sidtim->proc~frame proc~sidtim->proc~nutate proc~sidtim->proc~ciobas proc~sidtim->proc~cioloc proc~sidtim->proc~preces proc~sidtim->proc~times proc~sidtim->proc~eqxra proc~sidtim->getdt proc~sidtim->proc~etilt proc~erot EROT proc~sidtim->proc~erot getmod getmod proc~sidtim->getmod proc~etilt->proc~frame proc~etilt->proc~preces proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg ids ids proc~idss->ids proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~place~~CalledByGraph proc~place PLACE proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/place.html"},{"title":"PLACES â€“ slsqp","text":"subroutine PLACES() Arguments None Calls proc~~places~~CallsGraph proc~places PLACES proc~place PLACE proc~places->proc~place placst placst proc~places->placst proc~propmo PROPMO proc~place->proc~propmo proc~geocen GEOCEN proc~place->proc~geocen proc~frame FRAME proc~place->proc~frame proc~dlight DLIGHT proc~place->proc~dlight proc~radvl RADVL proc~place->proc~radvl proc~geopos GEOPOS proc~place->proc~geopos proc~nutate NUTATE proc~place->proc~nutate proc~astcon ASTCON proc~place->proc~astcon proc~ciobas CIOBAS proc~place->proc~ciobas proc~cioloc CIOLOC proc~place->proc~cioloc proc~angles ANGLES proc~place->proc~angles proc~littim LITTIM proc~place->proc~littim proc~limang LIMANG proc~place->proc~limang proc~solsys SOLSYS proc~place->proc~solsys setvec setvec proc~place->setvec proc~aberat ABERAT proc~place->proc~aberat proc~preces PRECES proc~place->proc~preces proc~grvdef GRVDEF proc~place->proc~grvdef proc~times TIMES proc~place->proc~times proc~geocen->proc~astcon proc~dlight->proc~astcon proc~radvl->proc~astcon proc~geopos->proc~frame proc~geopos->proc~nutate proc~geopos->proc~astcon proc~geopos->proc~preces eqinox eqinox proc~geopos->eqinox getdt getdt proc~geopos->getdt proc~sidtim SIDTIM proc~geopos->proc~sidtim proc~etilt ETILT proc~geopos->proc~etilt resume resume proc~geopos->resume proc~nutate->proc~etilt proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~ciobas->proc~preces proc~ciord CIORD proc~cioloc->proc~ciord proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~angles->setvec proc~littim->proc~geocen proc~idss IDSS proc~littim->proc~idss proc~limang->proc~astcon dasin dasin proc~limang->dasin proc~solsys->proc~idss proc~aberat->proc~astcon proc~grvdef->proc~geocen proc~grvdef->proc~dlight proc~grvdef->proc~astcon proc~grvdef->proc~solsys id id proc~grvdef->id proc~grvd GRVD proc~grvdef->proc~grvd proc~grvdef->proc~idss proc~grvd->proc~astcon proc~eqxra->proc~etilt proc~sidtim->proc~frame proc~sidtim->proc~nutate proc~sidtim->proc~ciobas proc~sidtim->proc~cioloc proc~sidtim->proc~preces proc~sidtim->proc~times proc~sidtim->proc~eqxra proc~sidtim->getdt proc~sidtim->proc~etilt proc~erot EROT proc~sidtim->proc~erot getmod getmod proc~sidtim->getmod proc~etilt->proc~frame proc~etilt->proc~preces proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg ids ids proc~idss->ids proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/places.html"},{"title":"MPSTAR â€“ slsqp","text":"subroutine MPSTAR(TJD, N, RA, DEC, RAI, DECI) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: N double precision :: RA double precision :: DEC double precision :: RAI double precision :: DECI Calls proc~~mpstar~~CallsGraph proc~mpstar MPSTAR proc~preces PRECES proc~mpstar->proc~preces proc~place PLACE proc~mpstar->proc~place proc~angles ANGLES proc~mpstar->proc~angles setvec setvec proc~mpstar->setvec proc~vectrs VECTRS proc~mpstar->proc~vectrs proc~place->proc~preces proc~place->proc~angles proc~place->setvec proc~propmo PROPMO proc~place->proc~propmo proc~littim LITTIM proc~place->proc~littim proc~grvdef GRVDEF proc~place->proc~grvdef proc~limang LIMANG proc~place->proc~limang proc~astcon ASTCON proc~place->proc~astcon proc~ciobas CIOBAS proc~place->proc~ciobas proc~geocen GEOCEN proc~place->proc~geocen proc~frame FRAME proc~place->proc~frame proc~cioloc CIOLOC proc~place->proc~cioloc proc~solsys SOLSYS proc~place->proc~solsys proc~dlight DLIGHT proc~place->proc~dlight proc~radvl RADVL proc~place->proc~radvl proc~aberat ABERAT proc~place->proc~aberat proc~geopos GEOPOS proc~place->proc~geopos proc~times TIMES proc~place->proc~times proc~nutate NUTATE proc~place->proc~nutate proc~angles->setvec proc~vectrs->proc~astcon proc~littim->proc~geocen proc~idss IDSS proc~littim->proc~idss proc~grvdef->proc~astcon proc~grvdef->proc~geocen proc~grvdef->proc~solsys proc~grvdef->proc~dlight proc~grvd GRVD proc~grvdef->proc~grvd id id proc~grvdef->id proc~grvdef->proc~idss proc~limang->proc~astcon dasin dasin proc~limang->dasin proc~ciobas->proc~preces proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~geocen->proc~astcon proc~ciord CIORD proc~cioloc->proc~ciord proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~solsys->proc~idss proc~dlight->proc~astcon proc~radvl->proc~astcon proc~aberat->proc~astcon proc~geopos->proc~preces proc~geopos->proc~astcon proc~geopos->proc~frame proc~geopos->proc~nutate proc~etilt ETILT proc~geopos->proc~etilt eqinox eqinox proc~geopos->eqinox getdt getdt proc~geopos->getdt proc~sidtim SIDTIM proc~geopos->proc~sidtim resume resume proc~geopos->resume proc~nutate->proc~etilt proc~etilt->proc~preces proc~etilt->proc~frame getmod getmod proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~grvd->proc~astcon proc~eqxra->proc~etilt proc~sidtim->proc~preces proc~sidtim->proc~ciobas proc~sidtim->proc~frame proc~sidtim->proc~cioloc proc~sidtim->proc~times proc~sidtim->proc~nutate proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~sidtim->getdt proc~erot EROT proc~sidtim->proc~erot proc~sidtim->getmod ids ids proc~idss->ids proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/mpstar.html"},{"title":"SIDTIM â€“ slsqp","text":"subroutine SIDTIM(TJDH, TJDL, K, GST) Arguments Type Intent Optional Attributes Name double precision :: TJDH double precision :: TJDL integer :: K double precision :: GST Calls proc~~sidtim~~CallsGraph proc~sidtim SIDTIM proc~preces PRECES proc~sidtim->proc~preces proc~erot EROT proc~sidtim->proc~erot proc~ciobas CIOBAS proc~sidtim->proc~ciobas proc~cioloc CIOLOC proc~sidtim->proc~cioloc proc~eqxra EQXRA proc~sidtim->proc~eqxra getmod getmod proc~sidtim->getmod getdt getdt proc~sidtim->getdt proc~frame FRAME proc~sidtim->proc~frame proc~times TIMES proc~sidtim->proc~times proc~etilt ETILT proc~sidtim->proc~etilt proc~nutate NUTATE proc~sidtim->proc~nutate proc~ciobas->proc~preces proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~cioloc->proc~eqxra proc~ciord CIORD proc~cioloc->proc~ciord proc~eqxra->proc~etilt proc~etilt->proc~preces proc~etilt->getmod proc~etilt->proc~frame proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~nutate->proc~etilt proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~sidtim~~CalledByGraph proc~sidtim SIDTIM proc~celter CELTER proc~celter->proc~sidtim proc~geopos GEOPOS proc~geopos->proc~sidtim proc~tercel TERCEL proc~tercel->proc~sidtim proc~place PLACE proc~place->proc~geopos proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/sidtim.html"},{"title":"CIORA â€“ slsqp","text":"subroutine CIORA(TJD, RACIO) Arguments Type Intent Optional Attributes Name double precision :: TJD double precision :: RACIO Calls proc~~ciora~~CallsGraph proc~ciora CIORA proc~preces PRECES proc~ciora->proc~preces proc~ciobas CIOBAS proc~ciora->proc~ciobas proc~cioloc CIOLOC proc~ciora->proc~cioloc proc~frame FRAME proc~ciora->proc~frame proc~times TIMES proc~ciora->proc~times proc~nutate NUTATE proc~ciora->proc~nutate proc~ciobas->proc~preces proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~ciord CIORD proc~cioloc->proc~ciord proc~etilt ETILT proc~nutate->proc~etilt proc~etilt->proc~preces proc~etilt->proc~frame proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg getmod getmod proc~etilt->getmod proc~eqxra->proc~etilt proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/ciora.html"},{"title":"TERCEL â€“ slsqp","text":"subroutine TERCEL(TJDH, TJDL, XP, YP, VEC1, VEC2) Arguments Type Intent Optional Attributes Name double precision :: TJDH double precision :: TJDL double precision :: XP double precision :: YP double precision :: VEC1 double precision :: VEC2 Calls proc~~tercel~~CallsGraph proc~tercel TERCEL proc~preces PRECES proc~tercel->proc~preces proc~erot EROT proc~tercel->proc~erot proc~ciobas CIOBAS proc~tercel->proc~ciobas proc~times TIMES proc~tercel->proc~times proc~wobble WOBBLE proc~tercel->proc~wobble proc~cioloc CIOLOC proc~tercel->proc~cioloc proc~frame FRAME proc~tercel->proc~frame getmod getmod proc~tercel->getmod getdt getdt proc~tercel->getdt proc~sidtim SIDTIM proc~tercel->proc~sidtim proc~nutate NUTATE proc~tercel->proc~nutate proc~spin SPIN proc~tercel->proc~spin proc~ciobas->proc~preces proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~ciord CIORD proc~cioloc->proc~ciord proc~sidtim->proc~preces proc~sidtim->proc~erot proc~sidtim->proc~ciobas proc~sidtim->proc~times proc~sidtim->proc~cioloc proc~sidtim->proc~frame proc~sidtim->getmod proc~sidtim->getdt proc~sidtim->proc~nutate proc~etilt ETILT proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~nutate->proc~etilt proc~etilt->proc~preces proc~etilt->proc~frame proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~eqxra->proc~etilt proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~tercel~~CalledByGraph proc~tercel TERCEL proc~zdaz ZDAZ proc~zdaz->proc~tercel Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/tercel.html"},{"title":"CELTER â€“ slsqp","text":"subroutine CELTER(TJDH, TJDL, XP, YP, VEC1, VEC2) Arguments Type Intent Optional Attributes Name double precision :: TJDH double precision :: TJDL double precision :: XP double precision :: YP double precision :: VEC1 double precision :: VEC2 Calls proc~~celter~~CallsGraph proc~celter CELTER proc~preces PRECES proc~celter->proc~preces proc~erot EROT proc~celter->proc~erot proc~ciobas CIOBAS proc~celter->proc~ciobas proc~times TIMES proc~celter->proc~times proc~wobble WOBBLE proc~celter->proc~wobble proc~cioloc CIOLOC proc~celter->proc~cioloc proc~frame FRAME proc~celter->proc~frame getmod getmod proc~celter->getmod getdt getdt proc~celter->getdt proc~sidtim SIDTIM proc~celter->proc~sidtim proc~nutate NUTATE proc~celter->proc~nutate proc~spin SPIN proc~celter->proc~spin proc~ciobas->proc~preces proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~ciord CIORD proc~cioloc->proc~ciord proc~sidtim->proc~preces proc~sidtim->proc~erot proc~sidtim->proc~ciobas proc~sidtim->proc~times proc~sidtim->proc~cioloc proc~sidtim->proc~frame proc~sidtim->getmod proc~sidtim->getdt proc~sidtim->proc~nutate proc~etilt ETILT proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~nutate->proc~etilt proc~etilt->proc~preces proc~etilt->proc~frame proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~eqxra->proc~etilt proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/celter.html"},{"title":"GETHIP â€“ slsqp","text":"subroutine GETHIP(RAH, DECH, PMRAH, PMDECH, PARXH, RVH, RA2, DEC2, PMRA2, PMDEC2, PARX2, RV2) Arguments Type Intent Optional Attributes Name double precision :: RAH double precision :: DECH double precision :: PMRAH double precision :: PMDECH double precision :: PARXH double precision :: RVH double precision :: RA2 double precision :: DEC2 double precision :: PMRA2 double precision :: PMDEC2 double precision :: PARX2 double precision :: RV2 Calls proc~~gethip~~CallsGraph proc~gethip GETHIP proc~catran CATRAN proc~gethip->proc~catran proc~preces PRECES proc~catran->proc~preces proc~astcon ASTCON proc~catran->proc~astcon dasin dasin proc~catran->dasin proc~frame FRAME proc~catran->proc~frame setvec setvec proc~catran->setvec Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/gethip.html"},{"title":"CATRAN â€“ slsqp","text":"subroutine CATRAN(IT, DATE1, RA1, DEC1, PMRA1, PMDEC1, PARX1, RV1, DATE2, RA2, DEC2, PMRA2, PMDEC2, PARX2, RV2) Arguments Type Intent Optional Attributes Name integer :: IT double precision :: DATE1 double precision :: RA1 double precision :: DEC1 double precision :: PMRA1 double precision :: PMDEC1 double precision :: PARX1 double precision :: RV1 double precision :: DATE2 double precision :: RA2 double precision :: DEC2 double precision :: PMRA2 double precision :: PMDEC2 double precision :: PARX2 double precision :: RV2 Calls proc~~catran~~CallsGraph proc~catran CATRAN proc~preces PRECES proc~catran->proc~preces proc~astcon ASTCON proc~catran->proc~astcon dasin dasin proc~catran->dasin proc~frame FRAME proc~catran->proc~frame setvec setvec proc~catran->setvec Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~catran~~CalledByGraph proc~catran CATRAN proc~gethip GETHIP proc~gethip->proc~catran Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/catran.html"},{"title":"ZDAZ â€“ slsqp","text":"subroutine ZDAZ(UJD, XP, YP, GLON, GLAT, HT, RA, DEC, IREFR, ZD, AZ, RAR, DECR) Arguments Type Intent Optional Attributes Name double precision :: UJD double precision :: XP double precision :: YP double precision :: GLON double precision :: GLAT double precision :: HT double precision :: RA double precision :: DEC integer :: IREFR double precision :: ZD double precision :: AZ double precision :: RAR double precision :: DECR Calls proc~~zdaz~~CallsGraph proc~zdaz ZDAZ proc~refrac REFRAC proc~zdaz->proc~refrac eqinox eqinox proc~zdaz->eqinox proc~tercel TERCEL proc~zdaz->proc~tercel resume resume proc~zdaz->resume proc~preces PRECES proc~tercel->proc~preces proc~erot EROT proc~tercel->proc~erot proc~ciobas CIOBAS proc~tercel->proc~ciobas proc~times TIMES proc~tercel->proc~times proc~wobble WOBBLE proc~tercel->proc~wobble proc~cioloc CIOLOC proc~tercel->proc~cioloc proc~frame FRAME proc~tercel->proc~frame getmod getmod proc~tercel->getmod getdt getdt proc~tercel->getdt proc~sidtim SIDTIM proc~tercel->proc~sidtim proc~nutate NUTATE proc~tercel->proc~nutate proc~spin SPIN proc~tercel->proc~spin proc~ciobas->proc~preces proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~ciord CIORD proc~cioloc->proc~ciord proc~sidtim->proc~preces proc~sidtim->proc~erot proc~sidtim->proc~ciobas proc~sidtim->proc~times proc~sidtim->proc~cioloc proc~sidtim->proc~frame proc~sidtim->getmod proc~sidtim->getdt proc~sidtim->proc~nutate proc~etilt ETILT proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~nutate->proc~etilt proc~etilt->proc~preces proc~etilt->proc~frame proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~eqxra->proc~etilt proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/zdaz.html"},{"title":"GCRSEQ â€“ slsqp","text":"subroutine GCRSEQ(TJD, ICOORD, RAG, DECG, RA, DEC) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: ICOORD double precision :: RAG double precision :: DECG double precision :: RA double precision :: DEC Calls proc~~gcrseq~~CallsGraph proc~gcrseq GCRSEQ proc~preces PRECES proc~gcrseq->proc~preces proc~ciobas CIOBAS proc~gcrseq->proc~ciobas proc~cioloc CIOLOC proc~gcrseq->proc~cioloc proc~frame FRAME proc~gcrseq->proc~frame proc~angles ANGLES proc~gcrseq->proc~angles proc~times TIMES proc~gcrseq->proc~times proc~nutate NUTATE proc~gcrseq->proc~nutate proc~ciobas->proc~preces proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~ciord CIORD proc~cioloc->proc~ciord setvec setvec proc~angles->setvec proc~etilt ETILT proc~nutate->proc~etilt proc~etilt->proc~preces proc~etilt->proc~frame proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg getmod getmod proc~etilt->getmod proc~eqxra->proc~etilt proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/gcrseq.html"},{"title":"EQECL â€“ slsqp","text":"subroutine EQECL(TJD, ICOORD, RA, DEC, ELON, ELAT) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: ICOORD double precision :: RA double precision :: DEC double precision :: ELON double precision :: ELAT Calls proc~~eqecl~~CallsGraph proc~eqecl EQECL proc~eqec EQEC proc~eqecl->proc~eqec proc~times TIMES proc~eqec->proc~times proc~etilt ETILT proc~eqec->proc~etilt setvec setvec proc~eqec->setvec proc~frame FRAME proc~eqec->proc~frame proc~etilt->proc~frame proc~preces PRECES proc~etilt->proc~preces proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg getmod getmod proc~etilt->getmod proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/eqecl.html"},{"title":"EQEC â€“ slsqp","text":"subroutine EQEC(TJD, ICOORD, POS1, POS2) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: ICOORD double precision :: POS1 double precision :: POS2 Calls proc~~eqec~~CallsGraph proc~eqec EQEC proc~times TIMES proc~eqec->proc~times proc~etilt ETILT proc~eqec->proc~etilt setvec setvec proc~eqec->setvec proc~frame FRAME proc~eqec->proc~frame proc~etilt->proc~frame proc~preces PRECES proc~etilt->proc~preces proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg getmod getmod proc~etilt->getmod proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~eqec~~CalledByGraph proc~eqec EQEC proc~eqecl EQECL proc~eqecl->proc~eqec Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/eqec.html"},{"title":"ECEQ â€“ slsqp","text":"subroutine ECEQ(TJD, ICOORD, POS1, POS2) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: ICOORD double precision :: POS1 double precision :: POS2 Calls proc~~eceq~~CallsGraph proc~eceq ECEQ proc~times TIMES proc~eceq->proc~times proc~etilt ETILT proc~eceq->proc~etilt setvec setvec proc~eceq->setvec proc~frame FRAME proc~eceq->proc~frame proc~etilt->proc~frame proc~preces PRECES proc~etilt->proc~preces proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg getmod getmod proc~etilt->getmod proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/eceq.html"},{"title":"EQGAL â€“ slsqp","text":"subroutine EQGAL(RA, DEC, GLON, GLAT) Arguments Type Intent Optional Attributes Name double precision :: RA double precision :: DEC double precision :: GLON double precision :: GLAT Calls proc~~eqgal~~CallsGraph proc~eqgal EQGAL setvec setvec proc~eqgal->setvec Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/eqgal.html"},{"title":"VECTRS â€“ slsqp","text":"subroutine VECTRS(RA, DEC, PMRA, PMDEC, PARLLX, RV, POS, VEL) Arguments Type Intent Optional Attributes Name double precision :: RA double precision :: DEC double precision :: PMRA double precision :: PMDEC double precision :: PARLLX double precision :: RV double precision :: POS double precision :: VEL Calls proc~~vectrs~~CallsGraph proc~vectrs VECTRS proc~astcon ASTCON proc~vectrs->proc~astcon Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~vectrs~~CalledByGraph proc~vectrs VECTRS proc~mpstar MPSTAR proc~mpstar->proc~vectrs Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/vectrs.html"},{"title":"ANGLES â€“ slsqp","text":"subroutine ANGLES(POS, RA, DEC) Arguments Type Intent Optional Attributes Name double precision :: POS double precision :: RA double precision :: DEC Calls proc~~angles~~CallsGraph proc~angles ANGLES setvec setvec proc~angles->setvec Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~angles~~CalledByGraph proc~angles ANGLES proc~gcrseq GCRSEQ proc~gcrseq->proc~angles proc~place PLACE proc~place->proc~angles proc~mpstar MPSTAR proc~mpstar->proc~angles proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/angles.html"},{"title":"PROPMO â€“ slsqp","text":"subroutine PROPMO(TJD1, POS1, VEL1, TJD2, POS2) Arguments Type Intent Optional Attributes Name double precision :: TJD1 double precision :: POS1 double precision :: VEL1 double precision :: TJD2 double precision :: POS2 Called by proc~~propmo~~CalledByGraph proc~propmo PROPMO proc~place PLACE proc~place->proc~propmo proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/propmo.html"},{"title":"GEOCEN â€“ slsqp","text":"subroutine GEOCEN(POS1, PE, POS2, TLIGHT) Arguments Type Intent Optional Attributes Name double precision :: POS1 double precision :: PE double precision :: POS2 double precision :: TLIGHT Calls proc~~geocen~~CallsGraph proc~geocen GEOCEN proc~astcon ASTCON proc~geocen->proc~astcon Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~geocen~~CalledByGraph proc~geocen GEOCEN proc~place PLACE proc~place->proc~geocen proc~littim LITTIM proc~place->proc~littim proc~grvdef GRVDEF proc~place->proc~grvdef proc~littim->proc~geocen proc~grvdef->proc~geocen proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/geocen.html"},{"title":"GEOPOS â€“ slsqp","text":"subroutine GEOPOS(TJD, LOCATN, OBSERV, POS, VEL) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: LOCATN double precision :: OBSERV double precision :: POS double precision :: VEL Calls proc~~geopos~~CallsGraph proc~geopos GEOPOS proc~preces PRECES proc~geopos->proc~preces eqinox eqinox proc~geopos->eqinox proc~astcon ASTCON proc~geopos->proc~astcon proc~frame FRAME proc~geopos->proc~frame getdt getdt proc~geopos->getdt proc~sidtim SIDTIM proc~geopos->proc~sidtim proc~etilt ETILT proc~geopos->proc~etilt proc~nutate NUTATE proc~geopos->proc~nutate resume resume proc~geopos->resume proc~sidtim->proc~preces proc~sidtim->proc~frame proc~sidtim->getdt proc~sidtim->proc~etilt proc~sidtim->proc~nutate proc~erot EROT proc~sidtim->proc~erot proc~ciobas CIOBAS proc~sidtim->proc~ciobas proc~cioloc CIOLOC proc~sidtim->proc~cioloc proc~eqxra EQXRA proc~sidtim->proc~eqxra getmod getmod proc~sidtim->getmod proc~times TIMES proc~sidtim->proc~times proc~etilt->proc~preces proc~etilt->proc~frame proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~nutate->proc~etilt proc~ciobas->proc~preces proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~cioloc->proc~eqxra proc~ciord CIORD proc~cioloc->proc~ciord proc~eqxra->proc~etilt proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~geopos~~CalledByGraph proc~geopos GEOPOS proc~place PLACE proc~place->proc~geopos proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/geopos.html"},{"title":"LITTIM â€“ slsqp","text":"subroutine LITTIM(TJD, IDBODY, POSE, TLITE, POS, TLIGHT) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: IDBODY double precision :: POSE double precision :: TLITE double precision :: POS double precision :: TLIGHT Calls proc~~littim~~CallsGraph proc~littim LITTIM proc~idss IDSS proc~littim->proc~idss proc~geocen GEOCEN proc~littim->proc~geocen ids ids proc~idss->ids proc~astcon ASTCON proc~geocen->proc~astcon Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~littim~~CalledByGraph proc~littim LITTIM proc~place PLACE proc~place->proc~littim proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/littim.html"},{"title":"DLIGHT â€“ slsqp","text":"subroutine DLIGHT(POS1, PE, DIFLT) Arguments Type Intent Optional Attributes Name double precision :: POS1 double precision :: PE double precision :: DIFLT Calls proc~~dlight~~CallsGraph proc~dlight DLIGHT proc~astcon ASTCON proc~dlight->proc~astcon Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~dlight~~CalledByGraph proc~dlight DLIGHT proc~place PLACE proc~place->proc~dlight proc~grvdef GRVDEF proc~place->proc~grvdef proc~grvdef->proc~dlight proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/dlight.html"},{"title":"GRVDEF â€“ slsqp","text":"subroutine GRVDEF(TJD, LOC, POS1, POBS, POS2) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: LOC double precision :: POS1 double precision :: POBS double precision :: POS2 Calls proc~~grvdef~~CallsGraph proc~grvdef GRVDEF proc~astcon ASTCON proc~grvdef->proc~astcon proc~grvd GRVD proc~grvdef->proc~grvd proc~geocen GEOCEN proc~grvdef->proc~geocen proc~solsys SOLSYS proc~grvdef->proc~solsys proc~dlight DLIGHT proc~grvdef->proc~dlight id id proc~grvdef->id proc~idss IDSS proc~grvdef->proc~idss proc~grvd->proc~astcon proc~geocen->proc~astcon proc~solsys->proc~idss proc~dlight->proc~astcon ids ids proc~idss->ids Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~grvdef~~CalledByGraph proc~grvdef GRVDEF proc~place PLACE proc~place->proc~grvdef proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/grvdef.html"},{"title":"GRVD â€“ slsqp","text":"subroutine GRVD(POS1, POBS, PBODY, RMASS, POS2) Arguments Type Intent Optional Attributes Name double precision :: POS1 double precision :: POBS double precision :: PBODY double precision :: RMASS double precision :: POS2 Calls proc~~grvd~~CallsGraph proc~grvd GRVD proc~astcon ASTCON proc~grvd->proc~astcon Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~grvd~~CalledByGraph proc~grvd GRVD proc~grvdef GRVDEF proc~grvdef->proc~grvd proc~place PLACE proc~place->proc~grvdef proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/grvd.html"},{"title":"ABERAT â€“ slsqp","text":"subroutine ABERAT(POS1, VE, TLIGHT, POS2) Arguments Type Intent Optional Attributes Name double precision :: POS1 double precision :: VE double precision :: TLIGHT double precision :: POS2 Calls proc~~aberat~~CallsGraph proc~aberat ABERAT proc~astcon ASTCON proc~aberat->proc~astcon Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~aberat~~CalledByGraph proc~aberat ABERAT proc~place PLACE proc~place->proc~aberat proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/aberat.html"},{"title":"RADVL â€“ slsqp","text":"subroutine RADVL(POS, VEL, VELOBS, STAR, DIST, RV) Arguments Type Intent Optional Attributes Name double precision :: POS double precision :: VEL double precision :: VELOBS double precision :: STAR double precision :: DIST double precision :: RV Calls proc~~radvl~~CallsGraph proc~radvl RADVL proc~astcon ASTCON proc~radvl->proc~astcon Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~radvl~~CalledByGraph proc~radvl RADVL proc~place PLACE proc~place->proc~radvl proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/radvl.html"},{"title":"PRECES â€“ slsqp","text":"subroutine PRECES(TJD1, POS1, TJD2, POS2) Arguments Type Intent Optional Attributes Name double precision :: TJD1 double precision :: POS1 double precision :: TJD2 double precision :: POS2 Called by proc~~preces~~CalledByGraph proc~preces PRECES proc~ciora CIORA proc~ciora->proc~preces proc~ciobas CIOBAS proc~ciora->proc~ciobas proc~nutate NUTATE proc~ciora->proc~nutate proc~cioloc CIOLOC proc~ciora->proc~cioloc proc~ciobas->proc~preces proc~ciobas->proc~nutate proc~gcrseq GCRSEQ proc~gcrseq->proc~preces proc~gcrseq->proc~ciobas proc~gcrseq->proc~nutate proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~preces proc~place->proc~ciobas proc~geopos GEOPOS proc~place->proc~geopos proc~place->proc~nutate proc~place->proc~cioloc proc~celter CELTER proc~celter->proc~preces proc~celter->proc~ciobas proc~sidtim SIDTIM proc~celter->proc~sidtim proc~celter->proc~nutate proc~celter->proc~cioloc proc~geopos->proc~preces proc~geopos->proc~sidtim proc~etilt ETILT proc~geopos->proc~etilt proc~geopos->proc~nutate proc~mpstar MPSTAR proc~mpstar->proc~preces proc~mpstar->proc~place proc~tercel TERCEL proc~tercel->proc~preces proc~tercel->proc~ciobas proc~tercel->proc~sidtim proc~tercel->proc~nutate proc~tercel->proc~cioloc proc~sidtim->proc~preces proc~sidtim->proc~ciobas proc~sidtim->proc~etilt proc~eqxra EQXRA proc~sidtim->proc~eqxra proc~sidtim->proc~nutate proc~sidtim->proc~cioloc proc~catran CATRAN proc~catran->proc~preces proc~etilt->proc~preces proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~places PLACES proc~places->proc~place proc~eceq ECEQ proc~eceq->proc~etilt proc~eqxra->proc~etilt proc~nutate->proc~etilt proc~gethip GETHIP proc~gethip->proc~catran proc~eqec EQEC proc~eqec->proc~etilt proc~cioloc->proc~eqxra proc~eqecl EQECL proc~eqecl->proc~eqec Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/preces.html"},{"title":"NUTATE â€“ slsqp","text":"subroutine NUTATE(TJD, POS1, POS2) Arguments Type Intent Optional Attributes Name double precision :: TJD double precision :: POS1 double precision :: POS2 Calls proc~~nutate~~CallsGraph proc~nutate NUTATE proc~etilt ETILT proc~nutate->proc~etilt proc~preces PRECES proc~etilt->proc~preces proc~frame FRAME proc~etilt->proc~frame getmod getmod proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~nutate~~CalledByGraph proc~nutate NUTATE proc~ciora CIORA proc~ciora->proc~nutate proc~ciobas CIOBAS proc~ciora->proc~ciobas proc~ciobas->proc~nutate proc~gcrseq GCRSEQ proc~gcrseq->proc~nutate proc~gcrseq->proc~ciobas proc~place PLACE proc~place->proc~nutate proc~place->proc~ciobas proc~geopos GEOPOS proc~place->proc~geopos proc~celter CELTER proc~celter->proc~nutate proc~celter->proc~ciobas proc~sidtim SIDTIM proc~celter->proc~sidtim proc~geopos->proc~nutate proc~geopos->proc~sidtim proc~tercel TERCEL proc~tercel->proc~nutate proc~tercel->proc~ciobas proc~tercel->proc~sidtim proc~sidtim->proc~nutate proc~sidtim->proc~ciobas proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/nutate.html"},{"title":"SPIN â€“ slsqp","text":"subroutine SPIN(ANGL, POS1, POS2) Arguments Type Intent Optional Attributes Name double precision :: ANGL double precision :: POS1 double precision :: POS2 Called by proc~~spin~~CalledByGraph proc~spin SPIN proc~celter CELTER proc~celter->proc~spin proc~tercel TERCEL proc~tercel->proc~spin proc~zdaz ZDAZ proc~zdaz->proc~tercel Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/spin.html"},{"title":"WOBBLE â€“ slsqp","text":"subroutine WOBBLE(TJD, XP, YP, POS1, POS2) Arguments Type Intent Optional Attributes Name double precision :: TJD double precision :: XP double precision :: YP double precision :: POS1 double precision :: POS2 Called by proc~~wobble~~CalledByGraph proc~wobble WOBBLE proc~celter CELTER proc~celter->proc~wobble proc~tercel TERCEL proc~tercel->proc~wobble proc~zdaz ZDAZ proc~zdaz->proc~tercel Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/wobble.html"},{"title":"FRAME â€“ slsqp","text":"subroutine FRAME(POS1, K, POS2) Arguments Type Intent Optional Attributes Name double precision :: POS1 integer :: K double precision :: POS2 Called by proc~~frame~~CalledByGraph proc~frame FRAME proc~ciora CIORA proc~ciora->proc~frame proc~ciobas CIOBAS proc~ciora->proc~ciobas proc~nutate NUTATE proc~ciora->proc~nutate proc~cioloc CIOLOC proc~ciora->proc~cioloc proc~ciobas->proc~frame proc~ciobas->proc~nutate proc~gcrseq GCRSEQ proc~gcrseq->proc~frame proc~gcrseq->proc~ciobas proc~gcrseq->proc~nutate proc~gcrseq->proc~cioloc proc~eceq ECEQ proc~eceq->proc~frame proc~etilt ETILT proc~eceq->proc~etilt proc~place PLACE proc~place->proc~frame proc~place->proc~ciobas proc~geopos GEOPOS proc~place->proc~geopos proc~place->proc~nutate proc~place->proc~cioloc proc~celter CELTER proc~celter->proc~frame proc~celter->proc~ciobas proc~sidtim SIDTIM proc~celter->proc~sidtim proc~celter->proc~nutate proc~celter->proc~cioloc proc~geopos->proc~frame proc~geopos->proc~sidtim proc~geopos->proc~etilt proc~geopos->proc~nutate proc~sidtim->proc~frame proc~sidtim->proc~ciobas proc~sidtim->proc~etilt proc~eqxra EQXRA proc~sidtim->proc~eqxra proc~sidtim->proc~nutate proc~sidtim->proc~cioloc proc~tercel TERCEL proc~tercel->proc~frame proc~tercel->proc~ciobas proc~tercel->proc~sidtim proc~tercel->proc~nutate proc~tercel->proc~cioloc proc~catran CATRAN proc~catran->proc~frame proc~etilt->proc~frame proc~eqec EQEC proc~eqec->proc~frame proc~eqec->proc~etilt proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~places PLACES proc~places->proc~place proc~eqxra->proc~etilt proc~mpstar MPSTAR proc~mpstar->proc~place proc~nutate->proc~etilt proc~gethip GETHIP proc~gethip->proc~catran proc~eqecl EQECL proc~eqecl->proc~eqec proc~cioloc->proc~eqxra Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/frame.html"},{"title":"TERRA â€“ slsqp","text":"subroutine TERRA(GLON, GLAT, HT, ST, POS, VEL) Arguments Type Intent Optional Attributes Name double precision :: GLON double precision :: GLAT double precision :: HT double precision :: ST double precision :: POS double precision :: VEL Calls proc~~terra~~CallsGraph proc~terra TERRA proc~astcon ASTCON proc~terra->proc~astcon Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/terra.html"},{"title":"TIMES â€“ slsqp","text":"subroutine TIMES(TDBJD, TTJD, SECDIF) Arguments Type Intent Optional Attributes Name double precision :: TDBJD double precision :: TTJD double precision :: SECDIF Called by proc~~times~~CalledByGraph proc~times TIMES proc~ciora CIORA proc~ciora->proc~times proc~gcrseq GCRSEQ proc~gcrseq->proc~times proc~eceq ECEQ proc~eceq->proc~times proc~place PLACE proc~place->proc~times proc~geopos GEOPOS proc~place->proc~geopos proc~celter CELTER proc~celter->proc~times proc~sidtim SIDTIM proc~celter->proc~sidtim proc~tercel TERCEL proc~tercel->proc~times proc~tercel->proc~sidtim proc~sidtim->proc~times proc~eqec EQEC proc~eqec->proc~times proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~places PLACES proc~places->proc~place proc~geopos->proc~sidtim proc~mpstar MPSTAR proc~mpstar->proc~place proc~eqecl EQECL proc~eqecl->proc~eqec Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/times.html"},{"title":"ETILT â€“ slsqp","text":"subroutine ETILT(TJD, OBLM, OBLT, EQEQ, DPSI, DEPS) Arguments Type Intent Optional Attributes Name double precision :: TJD double precision :: OBLM double precision :: OBLT double precision :: EQEQ double precision :: DPSI double precision :: DEPS Calls proc~~etilt~~CallsGraph proc~etilt ETILT proc~preces PRECES proc~etilt->proc~preces proc~frame FRAME proc~etilt->proc~frame getmod getmod proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~etilt~~CalledByGraph proc~etilt ETILT proc~eceq ECEQ proc~eceq->proc~etilt proc~eqxra EQXRA proc~eqxra->proc~etilt proc~geopos GEOPOS proc~geopos->proc~etilt proc~sidtim SIDTIM proc~geopos->proc~sidtim proc~nutate NUTATE proc~geopos->proc~nutate proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~sidtim->proc~nutate proc~ciobas CIOBAS proc~sidtim->proc~ciobas proc~cioloc CIOLOC proc~sidtim->proc~cioloc proc~nutate->proc~etilt proc~eqec EQEC proc~eqec->proc~etilt proc~ciora CIORA proc~ciora->proc~nutate proc~ciora->proc~ciobas proc~ciora->proc~cioloc proc~ciobas->proc~nutate proc~gcrseq GCRSEQ proc~gcrseq->proc~nutate proc~gcrseq->proc~ciobas proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~geopos proc~place->proc~nutate proc~place->proc~ciobas proc~place->proc~cioloc proc~cioloc->proc~eqxra proc~celter CELTER proc~celter->proc~sidtim proc~celter->proc~nutate proc~celter->proc~ciobas proc~celter->proc~cioloc proc~tercel TERCEL proc~tercel->proc~sidtim proc~tercel->proc~nutate proc~tercel->proc~ciobas proc~tercel->proc~cioloc proc~eqecl EQECL proc~eqecl->proc~eqec proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/etilt.html"},{"title":"FUNARG â€“ slsqp","text":"subroutine FUNARG(T, EL, ELP, F, D, OMEGA) Arguments Type Intent Optional Attributes Name double precision :: T double precision :: EL double precision :: ELP double precision :: F double precision :: D double precision :: OMEGA Called by proc~~funarg~~CalledByGraph proc~funarg FUNARG proc~etilt ETILT proc~etilt->proc~funarg proc~nod NOD proc~etilt->proc~nod proc~nod~2 NOD proc~nod~2->proc~funarg proc~nu2000k NU2000K proc~nu2000k->proc~funarg proc~eceq ECEQ proc~eceq->proc~etilt proc~eqxra EQXRA proc~eqxra->proc~etilt proc~nod->proc~nu2000k proc~geopos GEOPOS proc~geopos->proc~etilt proc~sidtim SIDTIM proc~geopos->proc~sidtim proc~nutate NUTATE proc~geopos->proc~nutate proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~sidtim->proc~nutate proc~ciobas CIOBAS proc~sidtim->proc~ciobas proc~cioloc CIOLOC proc~sidtim->proc~cioloc proc~nutate->proc~etilt proc~eqec EQEC proc~eqec->proc~etilt proc~ciora CIORA proc~ciora->proc~nutate proc~ciora->proc~ciobas proc~ciora->proc~cioloc proc~ciobas->proc~nutate proc~gcrseq GCRSEQ proc~gcrseq->proc~nutate proc~gcrseq->proc~ciobas proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~geopos proc~place->proc~nutate proc~place->proc~ciobas proc~place->proc~cioloc proc~cioloc->proc~eqxra proc~celter CELTER proc~celter->proc~sidtim proc~celter->proc~nutate proc~celter->proc~ciobas proc~celter->proc~cioloc proc~tercel TERCEL proc~tercel->proc~sidtim proc~tercel->proc~nutate proc~tercel->proc~ciobas proc~tercel->proc~cioloc proc~eqecl EQECL proc~eqecl->proc~eqec proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/funarg.html"},{"title":"REFRAC â€“ slsqp","text":"subroutine REFRAC(HEIGHT, ZDOBS, REFR) Arguments Type Intent Optional Attributes Name double precision :: HEIGHT double precision :: ZDOBS double precision :: REFR Called by proc~~refrac~~CalledByGraph proc~refrac REFRAC proc~zdaz ZDAZ proc~zdaz->proc~refrac Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/refrac.html"},{"title":"LIMANG â€“ slsqp","text":"subroutine LIMANG(POS1, POSO, ALIMB, AFRAC) Arguments Type Intent Optional Attributes Name double precision :: POS1 double precision :: POSO double precision :: ALIMB double precision :: AFRAC Calls proc~~limang~~CallsGraph proc~limang LIMANG proc~astcon ASTCON proc~limang->proc~astcon dasin dasin proc~limang->dasin Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~limang~~CalledByGraph proc~limang LIMANG proc~place PLACE proc~place->proc~limang proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/limang.html"},{"title":"CIOLOC â€“ slsqp","text":"subroutine CIOLOC(TJD, RACIO, K) Arguments Type Intent Optional Attributes Name double precision :: TJD double precision :: RACIO integer :: K Calls proc~~cioloc~~CallsGraph proc~cioloc CIOLOC proc~eqxra EQXRA proc~cioloc->proc~eqxra proc~ciord CIORD proc~cioloc->proc~ciord proc~etilt ETILT proc~eqxra->proc~etilt proc~preces PRECES proc~etilt->proc~preces proc~frame FRAME proc~etilt->proc~frame getmod getmod proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~cioloc~~CalledByGraph proc~cioloc CIOLOC proc~ciora CIORA proc~ciora->proc~cioloc proc~gcrseq GCRSEQ proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~cioloc proc~geopos GEOPOS proc~place->proc~geopos proc~celter CELTER proc~celter->proc~cioloc proc~sidtim SIDTIM proc~celter->proc~sidtim proc~tercel TERCEL proc~tercel->proc~cioloc proc~tercel->proc~sidtim proc~sidtim->proc~cioloc proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~geopos->proc~sidtim proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/cioloc.html"},{"title":"CIORD â€“ slsqp","text":"subroutine CIORD(TJD, NVALS, TLIST, RALIST, IERR) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: NVALS double precision :: TLIST double precision :: RALIST integer :: IERR Called by proc~~ciord~~CalledByGraph proc~ciord CIORD proc~cioloc CIOLOC proc~cioloc->proc~ciord proc~ciora CIORA proc~ciora->proc~cioloc proc~gcrseq GCRSEQ proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~cioloc proc~geopos GEOPOS proc~place->proc~geopos proc~celter CELTER proc~celter->proc~cioloc proc~sidtim SIDTIM proc~celter->proc~sidtim proc~tercel TERCEL proc~tercel->proc~cioloc proc~tercel->proc~sidtim proc~sidtim->proc~cioloc proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~geopos->proc~sidtim proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/ciord.html"},{"title":"CIOBAS â€“ slsqp","text":"subroutine CIOBAS(TJD, RACIO, K, X, Y, Z) Arguments Type Intent Optional Attributes Name double precision :: TJD double precision :: RACIO integer :: K double precision :: X double precision :: Y double precision :: Z Calls proc~~ciobas~~CallsGraph proc~ciobas CIOBAS proc~preces PRECES proc~ciobas->proc~preces proc~nutate NUTATE proc~ciobas->proc~nutate proc~frame FRAME proc~ciobas->proc~frame proc~etilt ETILT proc~nutate->proc~etilt proc~etilt->proc~preces proc~etilt->proc~frame proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg getmod getmod proc~etilt->getmod proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~ciobas~~CalledByGraph proc~ciobas CIOBAS proc~ciora CIORA proc~ciora->proc~ciobas proc~gcrseq GCRSEQ proc~gcrseq->proc~ciobas proc~place PLACE proc~place->proc~ciobas proc~geopos GEOPOS proc~place->proc~geopos proc~celter CELTER proc~celter->proc~ciobas proc~sidtim SIDTIM proc~celter->proc~sidtim proc~tercel TERCEL proc~tercel->proc~ciobas proc~tercel->proc~sidtim proc~sidtim->proc~ciobas proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~geopos->proc~sidtim proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/ciobas.html"},{"title":"EROT â€“ slsqp","text":"subroutine EROT(DATE1, DATE2, THETA) Arguments Type Intent Optional Attributes Name double precision :: DATE1 double precision :: DATE2 double precision :: THETA Called by proc~~erot~~CalledByGraph proc~erot EROT proc~sidtim SIDTIM proc~sidtim->proc~erot proc~celter CELTER proc~celter->proc~erot proc~celter->proc~sidtim proc~tercel TERCEL proc~tercel->proc~erot proc~tercel->proc~sidtim proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~geopos GEOPOS proc~geopos->proc~sidtim proc~place PLACE proc~place->proc~geopos proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/erot.html"},{"title":"EQXRA â€“ slsqp","text":"subroutine EQXRA(TJD, K, RAEQ) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: K double precision :: RAEQ Calls proc~~eqxra~~CallsGraph proc~eqxra EQXRA proc~etilt ETILT proc~eqxra->proc~etilt proc~preces PRECES proc~etilt->proc~preces proc~frame FRAME proc~etilt->proc~frame getmod getmod proc~etilt->getmod proc~nod NOD proc~etilt->proc~nod proc~funarg FUNARG proc~etilt->proc~funarg proc~nod->getmod proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~eqxra~~CalledByGraph proc~eqxra EQXRA proc~sidtim SIDTIM proc~sidtim->proc~eqxra proc~cioloc CIOLOC proc~sidtim->proc~cioloc proc~cioloc->proc~eqxra proc~ciora CIORA proc~ciora->proc~cioloc proc~gcrseq GCRSEQ proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~cioloc proc~geopos GEOPOS proc~place->proc~geopos proc~celter CELTER proc~celter->proc~sidtim proc~celter->proc~cioloc proc~geopos->proc~sidtim proc~tercel TERCEL proc~tercel->proc~sidtim proc~tercel->proc~cioloc proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/eqxra.html"},{"title":"SETDT â€“ slsqp","text":"subroutine SETDT(DELT) Arguments Type Intent Optional Attributes Name double precision :: DELT Contents None","tags":"","loc":"proc/setdt.html"},{"title":"SETMOD â€“ slsqp","text":"subroutine SETMOD(MODE) Arguments Type Intent Optional Attributes Name integer :: MODE Contents None","tags":"","loc":"proc/setmod.html"},{"title":"GETVEC â€“ slsqp","text":"subroutine GETVEC(UNITV) Arguments Type Intent Optional Attributes Name double precision :: UNITV Contents None","tags":"","loc":"proc/getvec.html"},{"title":"JULDAT â€“ slsqp","text":"subroutine JULDAT(I, M, K, H, TJD) Arguments Type Intent Optional Attributes Name integer :: I integer :: M integer :: K double precision :: H double precision :: TJD Contents None","tags":"","loc":"proc/juldat.html"},{"title":"CALDAT â€“ slsqp","text":"subroutine CALDAT(TJD, I, M, K, H) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: I integer :: M integer :: K double precision :: H Contents None","tags":"","loc":"proc/caldat.html"},{"title":"ASTCON â€“ slsqp","text":"subroutine ASTCON(NAME, FACTOR, CONST) Arguments Type Intent Optional Attributes Name character :: NAME *(*) double precision :: FACTOR double precision :: CONST Called by proc~~astcon~~CalledByGraph proc~astcon ASTCON proc~grvdef GRVDEF proc~grvdef->proc~astcon proc~grvd GRVD proc~grvdef->proc~grvd proc~geocen GEOCEN proc~grvdef->proc~geocen proc~dlight DLIGHT proc~grvdef->proc~dlight proc~limang LIMANG proc~limang->proc~astcon proc~place PLACE proc~place->proc~astcon proc~place->proc~grvdef proc~place->proc~limang proc~place->proc~geocen proc~place->proc~dlight proc~radvl RADVL proc~place->proc~radvl proc~geopos GEOPOS proc~place->proc~geopos proc~aberat ABERAT proc~place->proc~aberat proc~littim LITTIM proc~place->proc~littim proc~grvd->proc~astcon proc~geocen->proc~astcon proc~terra TERRA proc~terra->proc~astcon proc~dlight->proc~astcon proc~radvl->proc~astcon proc~geopos->proc~astcon proc~catran CATRAN proc~catran->proc~astcon proc~vectrs VECTRS proc~vectrs->proc~astcon proc~aberat->proc~astcon proc~littim->proc~geocen proc~mpstar MPSTAR proc~mpstar->proc~place proc~mpstar->proc~vectrs proc~gethip GETHIP proc~gethip->proc~catran proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/astcon.html"},{"title":"NOD â€“ slsqp","text":"subroutine NOD(T, DPSI, DEPS) Arguments Type Intent Optional Attributes Name double precision :: T double precision :: DPSI double precision :: DEPS Calls proc~~nod~~CallsGraph proc~nod NOD proc~nu2000a NU2000A proc~nod->proc~nu2000a proc~nu2000k NU2000K proc~nod->proc~nu2000k getmod getmod proc~nod->getmod proc~funarg FUNARG proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~nod~~CalledByGraph proc~nod NOD proc~etilt ETILT proc~etilt->proc~nod proc~eceq ECEQ proc~eceq->proc~etilt proc~eqxra EQXRA proc~eqxra->proc~etilt proc~geopos GEOPOS proc~geopos->proc~etilt proc~sidtim SIDTIM proc~geopos->proc~sidtim proc~nutate NUTATE proc~geopos->proc~nutate proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~sidtim->proc~nutate proc~ciobas CIOBAS proc~sidtim->proc~ciobas proc~cioloc CIOLOC proc~sidtim->proc~cioloc proc~nutate->proc~etilt proc~eqec EQEC proc~eqec->proc~etilt proc~ciora CIORA proc~ciora->proc~nutate proc~ciora->proc~ciobas proc~ciora->proc~cioloc proc~ciobas->proc~nutate proc~gcrseq GCRSEQ proc~gcrseq->proc~nutate proc~gcrseq->proc~ciobas proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~geopos proc~place->proc~nutate proc~place->proc~ciobas proc~place->proc~cioloc proc~cioloc->proc~eqxra proc~celter CELTER proc~celter->proc~sidtim proc~celter->proc~nutate proc~celter->proc~ciobas proc~celter->proc~cioloc proc~tercel TERCEL proc~tercel->proc~sidtim proc~tercel->proc~nutate proc~tercel->proc~ciobas proc~tercel->proc~cioloc proc~eqecl EQECL proc~eqecl->proc~eqec proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/nod.html"},{"title":"NU2000A â€“ slsqp","text":"subroutine NU2000A(DATE1, DATE2, DPSI, DEPS) Arguments Type Intent Optional Attributes Name double precision :: DATE1 double precision :: DATE2 double precision :: DPSI double precision :: DEPS Called by proc~~nu2000a~~CalledByGraph proc~nu2000a NU2000A proc~nod NOD proc~nod->proc~nu2000a proc~nod~2 NOD proc~nod~2->proc~nu2000a proc~etilt ETILT proc~etilt->proc~nod proc~eceq ECEQ proc~eceq->proc~etilt proc~eqxra EQXRA proc~eqxra->proc~etilt proc~geopos GEOPOS proc~geopos->proc~etilt proc~sidtim SIDTIM proc~geopos->proc~sidtim proc~nutate NUTATE proc~geopos->proc~nutate proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~sidtim->proc~nutate proc~ciobas CIOBAS proc~sidtim->proc~ciobas proc~cioloc CIOLOC proc~sidtim->proc~cioloc proc~nutate->proc~etilt proc~eqec EQEC proc~eqec->proc~etilt proc~ciora CIORA proc~ciora->proc~nutate proc~ciora->proc~ciobas proc~ciora->proc~cioloc proc~ciobas->proc~nutate proc~gcrseq GCRSEQ proc~gcrseq->proc~nutate proc~gcrseq->proc~ciobas proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~geopos proc~place->proc~nutate proc~place->proc~ciobas proc~place->proc~cioloc proc~cioloc->proc~eqxra proc~celter CELTER proc~celter->proc~sidtim proc~celter->proc~nutate proc~celter->proc~ciobas proc~celter->proc~cioloc proc~tercel TERCEL proc~tercel->proc~sidtim proc~tercel->proc~nutate proc~tercel->proc~ciobas proc~tercel->proc~cioloc proc~eqecl EQECL proc~eqecl->proc~eqec proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/nu2000a.html"},{"title":"NU2000K â€“ slsqp","text":"subroutine NU2000K(DATE1, DATE2, DPSI, DEPS) Arguments Type Intent Optional Attributes Name double precision :: DATE1 double precision :: DATE2 double precision :: DPSI double precision :: DEPS Calls proc~~nu2000k~~CallsGraph proc~nu2000k NU2000K proc~funarg FUNARG proc~nu2000k->proc~funarg Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~nu2000k~~CalledByGraph proc~nu2000k NU2000K proc~nod NOD proc~nod->proc~nu2000k proc~etilt ETILT proc~etilt->proc~nod proc~eceq ECEQ proc~eceq->proc~etilt proc~eqxra EQXRA proc~eqxra->proc~etilt proc~geopos GEOPOS proc~geopos->proc~etilt proc~sidtim SIDTIM proc~geopos->proc~sidtim proc~nutate NUTATE proc~geopos->proc~nutate proc~sidtim->proc~etilt proc~sidtim->proc~eqxra proc~sidtim->proc~nutate proc~ciobas CIOBAS proc~sidtim->proc~ciobas proc~cioloc CIOLOC proc~sidtim->proc~cioloc proc~nutate->proc~etilt proc~eqec EQEC proc~eqec->proc~etilt proc~ciora CIORA proc~ciora->proc~nutate proc~ciora->proc~ciobas proc~ciora->proc~cioloc proc~ciobas->proc~nutate proc~gcrseq GCRSEQ proc~gcrseq->proc~nutate proc~gcrseq->proc~ciobas proc~gcrseq->proc~cioloc proc~place PLACE proc~place->proc~geopos proc~place->proc~nutate proc~place->proc~ciobas proc~place->proc~cioloc proc~cioloc->proc~eqxra proc~celter CELTER proc~celter->proc~sidtim proc~celter->proc~nutate proc~celter->proc~ciobas proc~celter->proc~cioloc proc~tercel TERCEL proc~tercel->proc~sidtim proc~tercel->proc~nutate proc~tercel->proc~ciobas proc~tercel->proc~cioloc proc~eqecl EQECL proc~eqecl->proc~eqec proc~zdaz ZDAZ proc~zdaz->proc~tercel proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/nu2000k.html"},{"title":"GRVDEF â€“ slsqp","text":"subroutine GRVDEF(TJD, LOC, POS1, POBS, POS2) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: LOC double precision :: POS1 double precision :: POBS double precision :: POS2 Contents None","tags":"","loc":"proc/grvdef~2.html"},{"title":"NOD â€“ slsqp","text":"subroutine NOD(T, DPSI, DEPS) Arguments Type Intent Optional Attributes Name double precision :: T double precision :: DPSI double precision :: DEPS Calls proc~~nod~2~~CallsGraph proc~nod~2 NOD proc~nu2000a NU2000A proc~nod~2->proc~nu2000a proc~funarg FUNARG proc~nod~2->proc~funarg getmod getmod proc~nod~2->getmod Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/nod~2.html"},{"title":"IDSS â€“ slsqp","text":"function IDSS(NAME) Arguments Type Intent Optional Attributes Name character :: NAME *(*) Return Value integer Calls proc~~idss~~CallsGraph proc~idss IDSS ids ids proc~idss->ids Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~idss~~CalledByGraph proc~idss IDSS proc~littim LITTIM proc~littim->proc~idss proc~solsys SOLSYS proc~solsys->proc~idss proc~grvdef GRVDEF proc~grvdef->proc~idss proc~grvdef->proc~solsys proc~place PLACE proc~place->proc~littim proc~place->proc~solsys proc~place->proc~grvdef proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/idss.html"},{"title":"SOLSYS â€“ slsqp","text":"subroutine SOLSYS(TJD, M, K, POS, VEL, IERR) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: M integer :: K double precision :: POS double precision :: VEL integer :: IERR Calls proc~~solsys~~CallsGraph proc~solsys SOLSYS proc~idss IDSS proc~solsys->proc~idss ids ids proc~idss->ids Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~solsys~~CalledByGraph proc~solsys SOLSYS proc~place PLACE proc~place->proc~solsys proc~grvdef GRVDEF proc~place->proc~grvdef proc~grvdef->proc~solsys proc~mpstar MPSTAR proc~mpstar->proc~place proc~places PLACES proc~places->proc~place Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Common Blocks SSFILE Common Blocks common /SSFILE/ Type Attributes Name Initial integer :: LU integer :: N real :: FILNAM real :: FORMT","tags":"","loc":"proc/solsys.html"},{"title":"FILDEF â€“ slsqp","text":"subroutine FILDEF(LUN, NBOD, FILNM, FMT) Arguments Type Intent Optional Attributes Name integer :: LUN integer :: NBOD character :: FILNM *(*) character :: FMT *(*) Contents Common Blocks SSFILE Common Blocks common /SSFILE/ Type Attributes Name Initial integer :: LU integer :: N real :: FILNAM real :: FORMT","tags":"","loc":"proc/fildef.html"},{"title":"IDSS â€“ slsqp","text":"function IDSS(NAME) Arguments Type Intent Optional Attributes Name character :: NAME *(*) Return Value integer Calls proc~~idss~2~~CallsGraph proc~idss~2 IDSS ids ids proc~idss~2->ids Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/idss~2.html"},{"title":"SOLSYS â€“ slsqp","text":"subroutine SOLSYS(TJD, BODY, ORIGIN, POS, VEL, IERR) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: BODY integer :: ORIGIN double precision :: POS (3) double precision :: VEL (3) integer :: IERR Calls proc~~solsys~2~~CallsGraph proc~solsys~2 SOLSYS proc~auxpos AUXPOS proc~solsys~2->proc~auxpos dpleph dpleph proc~solsys~2->dpleph const const proc~solsys~2->const Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/solsys~2.html"},{"title":"AUXPOS â€“ slsqp","text":"subroutine AUXPOS(TJD, M, K, POS, VEL, JERR) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: M integer :: K double precision :: POS double precision :: VEL integer :: JERR Called by proc~~auxpos~~CalledByGraph proc~auxpos AUXPOS proc~solsys~2 SOLSYS proc~solsys~2->proc~auxpos Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/auxpos.html"},{"title":"IDSS â€“ slsqp","text":"function IDSS(NAME) Arguments Type Intent Optional Attributes Name character :: NAME *(*) Return Value integer Calls proc~~idss~3~~CallsGraph proc~idss~3 IDSS ids ids proc~idss~3->ids Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/idss~3.html"},{"title":"SOLSYS â€“ slsqp","text":"subroutine SOLSYS(TJD, M, K, POS, VEL, IERR) Arguments Type Intent Optional Attributes Name double precision :: TJD integer :: M integer :: K double precision :: POS double precision :: VEL integer :: IERR Calls proc~~solsys~3~~CallsGraph proc~solsys~3 SOLSYS proc~sun SUN proc~solsys~3->proc~sun x x proc~sun->x x2 x2 proc~sun->x2 x4 x4 proc~sun->x4 x3 x3 proc~sun->x3 x1 x1 proc~sun->x1 x5 x5 proc~sun->x5 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/solsys~3.html"},{"title":"SUN â€“ slsqp","text":"subroutine SUN(DJ, EL, C) Arguments Type Intent Optional Attributes Name double precision :: DJ double precision :: EL double precision :: C Calls proc~~sun~~CallsGraph proc~sun SUN x x proc~sun->x x2 x2 proc~sun->x2 x4 x4 proc~sun->x4 x3 x3 proc~sun->x3 x1 x1 proc~sun->x1 x5 x5 proc~sun->x5 Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by proc~~sun~~CalledByGraph proc~sun SUN proc~solsys~3 SOLSYS proc~solsys~3->proc~sun Help Ã— Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents None","tags":"","loc":"proc/sun.html"},{"title":"CIO_FILE â€“ slsqp","text":"Contents Variables TDBJD CIORA INFIL OUTFIL IDEN Source Code CIO_FILE Variables Type Attributes Name Initial double precision :: TDBJD double precision :: CIORA character :: INFIL *24 character :: OUTFIL *24 character :: IDEN *40 Source Code PROGRAM CIO_FILE DOUBLE PRECISION TDBJD , CIORA CHARACTER INFIL * 24 , OUTFIL * 24 , IDEN * 40 1 FORMAT ( A ) 2 FORMAT ( F16 . 6 , F24 . 14 ) * GET FILE IDENTIFIERS INFIL = 'CIO_RA.TXT' OUTFIL = 'CIO_RA.DA' C WRITE ( * , * ) 'ENTER INPUT FILENAME: ' C READ ( * , * ) INFIL C WRITE ( * , * ) 'ENTER OUTPUT FILENAME: ' C READ ( * , * ) OUTFIL * OPEN INPUT FILE OPEN ( UNIT = 18 , FILE = INFIL , FORM = 'FORMATTED' , . ACCESS = 'SEQUENTIAL' , STATUS = 'OLD' ) * OPEN OUTPUT FILE OPEN ( UNIT = 19 , FILE = OUTFIL , FORM = 'UNFORMATTED' , . ACCESS = 'DIRECT' , RECL = 16 , STATUS = 'UNKNOWN' ) * READ INPUT FILE IDENTIFIER READ ( UNIT = 18 , FMT = 1 ) IDEN N = 1 * MAIN READ - WRITE LOOP 50 READ ( UNIT = 18 , FMT = 2 , END = 70 ) TDBJD , CIORA N = N + 1 WRITE ( UNIT = 19 , REC = N ) TDBJD , CIORA IF ( MOD ( N , 1000 ) . EQ . 0 ) THEN IYEAR = NINT ( ( TDBJD - 245154 5.0 ) / 36 5.25D0 + 200 0.D0 ) WRITE ( * , * ) 'DONE THROUGH RECORD ' , N , '      YEAR ' , IYEAR END IF GO TO 50 * WRITE NUMBER OF DATA RECORDS IN FIRST RECORD OF OUTPUT FILE * ALONG WITH FIRST 12 CHARACTERS OF INPUT FILE IDENTIFIER 70 WRITE ( UNIT = 19 , REC = 1 ) N - 1 , IDEN ( 1 : 12 ) * FINISH UP WRITE ( * , * ) N , ' TOTAL RECORDS WRITTEN' CLOSE ( UNIT = 18 ) CLOSE ( UNIT = 19 ) STOP END PROGRAM CIO_FILE","tags":"","loc":"program/cio_file.html"},{"title":"unnamed â€“ slsqp","text":"Contents Common Blocks SSFILE Variables FILNAM FORMT Common Blocks common /SSFILE/ Type Attributes Name Initial integer :: LU integer :: N real :: FILNAM real :: FORMT Variables Type Attributes Name Initial character :: FILNAM *80 character :: FORMT *80","tags":"","loc":"blockdata/ltemgtunnamedltSLASHemgt.html"}]}