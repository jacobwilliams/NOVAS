*  NOVAS FORTRAN VERS F2.0 (1 NOV 98)
*  STANDARD SET OF SUBROUTINES

************************************************************************
*                                                                      *
*                              N O V A S                               *
*           NAVAL OBSERVATORY VECTOR ASTROMETRY SUBROUTINES            *
*                                                                      *
*                            G. H. KAPLAN                              *
*                        U.S. NAVAL OBSERVATORY                        *
*                                                                      *
************************************************************************



      SUBROUTINE APSTAR (TJD,N,RAM,DECM,PMRA,PMDEC,PARLAX,RADVEL,RA,DEC)
C
C     THIS SUBROUTINE COMPUTES THE APPARENT PLACE OF A STAR,
C     GIVEN ITS MEAN PLACE, PROPER MOTION, PARALLAX, AND RADIAL
C     VELOCITY FOR J2000.0.  SEE KAPLAN, ET AL. (1989) ASTRONOMICAL
C     JOURNAL 97, 1197-1210.
C
C          TJD    = TT JULIAN DATE FOR APPARENT PLACE (IN)
C          N      = BODY IDENTIFICATION NUMBER FOR THE EARTH (IN)
C          RAM    = MEAN RIGHT ASCENSION J2000.0 IN HOURS (IN)
C          DECM   = MEAN DECLINATION J2000.0 IN DEGREES (IN)
C          PMRA   = PROPER MOTION IN RA IN TIME SECONDS PER JULIAN
C                   CENTURY (IN)
C          PMDEC  = PROPER MOTION IN DEC IN ARCSECONDS PER JULIAN
C                   CENTURY (IN)
C          PARLAX = PARALLAX IN ARCSECONDS (IN)
C          RADVEL = RADIAL VELOCITY IN KILOMETERS PER SECOND (IN)
C          RA     = APPARENT RIGHT ASCENSION IN HOURS, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (OUT)
C          DEC    = APPARENT DECLINATION IN DEGREES, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (OUT)
C
C
      DOUBLE PRECISION TJD,UJD,RAM,DECM,PMRA,PMDEC,PARLAX,RADVEL,
     .     GLON,GLAT,HT,RA,DEC,T0,T1,TLAST,
     .     X,SECDIF,EQEQ,ST,GAST,RM,DM,PMR,PMD,PI,RV,TLIGHT,R,D,
     .     PEB,VEB,PES,VES,POG,VOG,PB,VB,PS,
     .     POS1,VEL1,POS2,VEL2,POS3,POS4,POS5,POS6,POS7,
     .     DABS,DMOD
      DIMENSION PEB(3), VEB(3), PES(3), VES(3), POG(3), VOG(3),
     .     PB(3), VB(3), PS(3),
     .     POS1(3), VEL1(3), POS2(3), VEL2(3),
     .     POS3(3), POS4(3), POS5(3), POS6(3), POS7(3)
      SAVE
C
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
      DATA TLAST / 0.0D0 /
C
C     COMPUTE T1, THE TDB JULIAN DATE CORRESPONDING TO TJD
      CALL TIMES (TJD,X,SECDIF)
      T1 = TJD + SECDIF / 86400.0D0
      IF (DABS(TJD-TLAST).LT.1.0D-8) GO TO 20
C
C     GET POSITION AND VELOCITY OF THE EARTH WRT BARYCENTER OF
C     SOLAR SYSTEM AND WRT CENTER OF SUN
      CALL SOLSYS (T1,N,0,PEB,VEB,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL SOLSYS (T1,N,1,PES,VES,IERR)
      IF (IERR.NE.0) GO TO 40
      TLAST = TJD
C
   20 DO 22 J=1,3
      PB(J) = PEB(J)
      VB(J) = VEB(J)
      PS(J) = PES(J)
   22 CONTINUE
      RM = RAM
      DM = DECM
      PMR = PMRA
      PMD = PMDEC
      PI = PARLAX
      RV = RADVEL
C
C     COMPUTE APPARENT PLACE
   30 CALL VECTRS (RM,DM,PMR,PMD,PI,RV,POS1,VEL1)
      CALL PROPMO (T0,POS1,VEL1,T1,POS2)
      CALL GEOCEN (POS2,PB,POS3,TLIGHT)
      CALL SUNFLD (POS3,PS,POS4)
      CALL ABERAT (POS4,VB,TLIGHT,POS5)
      CALL PRECES (T0,POS5,T1,POS6)
      CALL NUTATE (T1,POS6,POS7)
      CALL ANGLES (POS7,R,D)
C
      RA = R
      DEC = D
      RETURN
C
   40 RA = 0.0D0
      DEC = 0.0D0
      TLAST = 0.0D0
      RETURN
C
C
      ENTRY TPSTAR (UJD,GLON,GLAT,HT,RA,DEC)
C
C     THIS ENTRY COMPUTES THE TOPOCENTRIC PLACE OF A STAR,
C     GIVEN THE LOCATION OF THE OBSERVER.  THIS ENTRY ASSUMES APSTAR
C     WAS PREVIOUSLY CALLED, AND USES DATA COMPUTED BY APSTAR.
C
C          UJD    = UT1 JULIAN DATE, OR EQUIVALENT GREENWICH APPARENT
C                   SIDEREAL TIME IN HOURS, FOR TOPOCENTRIC PLACE (IN)
C          GLON   = GEODETIC LONGITUDE (EAST +) OF OBSERVER
C                   IN DEGREES (IN)
C          GLAT   = GEODETIC LATITUDE (NORTH +) OF OBSERVER
C                   IN DEGREES (IN)
C          HT     = HEIGHT OF OBSERVER IN METERS (IN)
C          RA     = TOPOCENTRIC RIGHT ASCENSION IN HOURS, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (OUT)
C          DEC    = TOPOCENTRIC DECLINATION IN DEGREES, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (OUT)
C
C
      IF (TLAST.EQ.0.0D0) GO TO 40
C
C     GET POSITION AND VELOCITY OF OBSERVER WRT CENTER OF EARTH
   50 IF (UJD.GT.100.0D0) GO TO 52
      GAST = DMOD(UJD,24.0D0)
      GO TO 55
   52 CALL SIDTIM (UJD,0.0D0,0,ST)
      CALL ETILT (T1,X,X,EQEQ,X,X)
      GAST = ST + EQEQ/3600.0D0
   55 CALL TERRA (GLON,GLAT,HT,GAST,POS1,VEL1)
      CALL NUTATE (-T1,POS1,POS2)
      CALL PRECES (T1,POS2,T0,POG)
      CALL NUTATE (-T1,VEL1,VEL2)
      CALL PRECES (T1,VEL2,T0,VOG)
C
C     COMPUTE POSITION AND VELOCITY OF OBSERVER WRT BARYCENTER OF
C     SOLAR SYSTEM AND POSITION WRT CENTER OF SUN
   60 DO 62 J=1,3
      PB(J) = PEB(J) + POG(J)
      VB(J) = VEB(J) + VOG(J)
      PS(J) = PES(J) + POG(J)
   62 CONTINUE
C
C     RECOMPUTE APPARENT PLACE USING POSITION AND VELOCITY OF OBSERVER
      GO TO 30
C
      END



      SUBROUTINE APPLAN (TJD,L,N,RA,DEC,DIS)
C
C     THIS SUBROUTINE COMPUTES THE APPARENT PLACE OF A PLANET OR OTHER
C     SOLAR SYSTEM BODY.  RECTANGULAR COORDINATES OF SOLAR SYSTEM BODIES
C     ARE OBTAINED FROM SUBROUTINE SOLSYS.  SEE KAPLAN, ET AL. (1989)
C     ASTRONOMICAL JOURNAL 97, 1197-1210.
C
C          TJD    = TT JULIAN DATE FOR APPARENT PLACE (IN)
C          L      = BODY IDENTIFICATION NUMBER FOR DESIRED PLANET (IN)
C          N      = BODY IDENTIFICATION NUMBER FOR THE EARTH (IN)
C          RA     = APPARENT RIGHT ASCENSION IN HOURS, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (OUT)
C          DEC    = APPARENT DECLINATION IN DEGREES, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (OUT)
C          DIS    = TRUE DISTANCE FROM EARTH TO PLANET IN AU (OUT)
C
C
      DOUBLE PRECISION TJD,UJD,GLON,GLAT,HT,RA,DEC,DIS,
     .     T0,T1,T2,T3,TLAST,C,
     .     X,SECDIF,EQEQ,ST,GAST,TLIGHT,R,D,S,
     .     PEB,VEB,PES,VES,POG,VOG,PB,VB,PS,
     .     POS1,VEL1,POS2,VEL2,POS3,POS4,POS5,POS6,
     .     DABS,DMOD
      DIMENSION PEB(3), VEB(3), PES(3), VES(3), POG(3), VOG(3),
     .     PB(3), VB(3), PS(3),
     .     POS1(3), VEL1(3), POS2(3), VEL2(3),
     .     POS3(3), POS4(3), POS5(3), POS6(3)
      SAVE
C
      DATA C / 173.14463348D0 /
C     C = SPEED OF LIGHT IN AU/DAY
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
      DATA TLAST / 0.0D0 /
C
      IF (L.EQ.N) GO TO 40
C
C     COMPUTE T1, THE TDB JULIAN DATE CORRESPONDING TO TJD
      CALL TIMES (TJD,X,SECDIF)
      T1 = TJD + SECDIF / 86400.0D0
      IF (DABS(TJD-TLAST).LT.1.0D-8) GO TO 20
C
C     GET POSITION AND VELOCITY OF THE EARTH WRT BARYCENTER OF
C     SOLAR SYSTEM AND WRT CENTER OF SUN
      CALL SOLSYS (T1,N,0,PEB,VEB,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL SOLSYS (T1,N,1,PES,VES,IERR)
      IF (IERR.NE.0) GO TO 40
      TLAST = TJD
C
   20 DO 22 J=1,3
      PB(J) = PEB(J)
      VB(J) = VEB(J)
      PS(J) = PES(J)
   22 CONTINUE
      LPLAN = L
C
C     GET POSITION OF PLANET WRT BARYCENTER OF SOLAR SYSTEM
   30 CALL SOLSYS (T1,LPLAN,0,POS1,VEL1,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL GEOCEN (POS1,PB,POS2,TLIGHT)
      S = TLIGHT * C
      T2 = T1 - TLIGHT
   33 CALL SOLSYS (T2,LPLAN,0,POS1,VEL1,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL GEOCEN (POS1,PB,POS2,TLIGHT)
      T3 = T1 - TLIGHT
      IF (DABS(T3-T2).LT.1.0D-8) GO TO 35
      T2 = T3
      GO TO 33
C
C     FINISH APPARENT PLACE COMPUTATION
   35 CONTINUE
      CALL SUNFLD (POS2,PS,POS3)
      CALL ABERAT (POS3,VB,TLIGHT,POS4)
      CALL PRECES (T0,POS4,T1,POS5)
      CALL NUTATE (T1,POS5,POS6)
      CALL ANGLES (POS6,R,D)
      RA = R
      DEC = D
      DIS = S
      RETURN
C
   40 RA = 0.0D0
      DEC = 0.0D0
      DIS = 0.0D0
      TLAST = 0.0D0
      RETURN
C
C
      ENTRY TPPLAN (UJD,GLON,GLAT,HT,RA,DEC,DIS)
C
C     THIS ENTRY COMPUTES THE TOPOCENTRIC PLACE OF A PLANET,
C     GIVEN THE LOCATION OF THE OBSERVER.  THIS ENTRY ASSUMES APPLAN
C     WAS PREVIOUSLY CALLED, AND USES DATA COMPUTED BY APPLAN.
C
C          UJD    = UT1 JULIAN DATE, OR EQUIVALENT GREENWICH APPARENT
C                   SIDEREAL TIME IN HOURS, FOR TOPOCENTRIC PLACE (IN)
C          GLON   = GEODETIC LONGITUDE (EAST +) OF OBSERVER
C                   IN DEGREES (IN)
C          GLAT   = GEODETIC LATITUDE (NORTH +) OF OBSERVER
C                   IN DEGREES (IN)
C          HT     = HEIGHT OF OBSERVER IN METERS (IN)
C          RA     = TOPOCENTRIC RIGHT ASCENSION IN HOURS, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (OUT)
C          DEC    = TOPOCENTRIC DECLINATION IN DEGREES, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (OUT)
C          DIS    = TRUE DISTANCE FROM OBSERVER TO PLANET IN AU (OUT)
C
C
      IF (TLAST.EQ.0.0D0) GO TO 40
C
C     GET POSITION AND VELOCITY OF OBSERVER WRT CENTER OF EARTH
   50 IF (UJD.GT.100.0D0) GO TO 52
      GAST = DMOD(UJD,24.0D0)
      GO TO 55
   52 CALL SIDTIM (UJD,0.0D0,0,ST)
      CALL ETILT (T1,X,X,EQEQ,X,X)
      GAST = ST + EQEQ/3600.0D0
   55 CALL TERRA (GLON,GLAT,HT,GAST,POS1,VEL1)
      CALL NUTATE (-T1,POS1,POS2)
      CALL PRECES (T1,POS2,T0,POG)
      CALL NUTATE (-T1,VEL1,VEL2)
      CALL PRECES (T1,VEL2,T0,VOG)
C
C     COMPUTE POSITION AND VELOCITY OF OBSERVER WRT BARYCENTER OF
C     SOLAR SYSTEM AND POSITION WRT CENTER OF SUN
   60 DO 62 J=1,3
      PB(J) = PEB(J) + POG(J)
      VB(J) = VEB(J) + VOG(J)
      PS(J) = PES(J) + POG(J)
   62 CONTINUE
C
C     RECOMPUTE APPARENT PLACE USING POSITION AND VELOCITY OF OBSERVER
      GO TO 30
C
      END



      SUBROUTINE VPSTAR (TJD,N,RAM,DECM,PMRA,PMDEC,PARLAX,RADVEL,RA,DEC)
C
C     THIS SUBROUTINE COMPUTES THE VIRTUAL PLACE OF A STAR,
C     GIVEN ITS MEAN PLACE, PROPER MOTION, PARALLAX, AND RADIAL
C     VELOCITY FOR J2000.0.  SEE KAPLAN, ET AL. (1989) ASTRONOMICAL
C     JOURNAL 97, 1197-1210.
C
C          TJD    = TT JULIAN DATE FOR VIRTUAL PLACE (IN)
C          N      = BODY IDENTIFICATION NUMBER FOR THE EARTH (IN)
C          RAM    = MEAN RIGHT ASCENSION J2000.0 IN HOURS (IN)
C          DECM   = MEAN DECLINATION J2000.0 IN DEGREES (IN)
C          PMRA   = PROPER MOTION IN RA IN TIME SECONDS PER JULIAN
C                   CENTURY (IN)
C          PMDEC  = PROPER MOTION IN DEC IN ARCSECONDS PER JULIAN
C                   CENTURY (IN)
C          PARLAX = PARALLAX IN ARCSECONDS (IN)
C          RADVEL = RADIAL VELOCITY IN KILOMETERS PER SECOND (IN)
C          RA     = VIRTUAL RIGHT ASCENSION IN HOURS, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DEC    = VIRTUAL DECLINATION IN DEGREES, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C
C
      DOUBLE PRECISION TJD,UJD,RAM,DECM,PMRA,PMDEC,PARLAX,RADVEL,
     .     GLON,GLAT,HT,RA,DEC,T0,T1,TLAST,
     .     X,SECDIF,EQEQ,ST,GAST,RM,DM,PMR,PMD,PI,RV,TLIGHT,R,D,
     .     PEB,VEB,PES,VES,POG,VOG,PB,VB,PS,
     .     POS1,VEL1,POS2,VEL2,POS3,POS4,POS5,
     .     DABS,DMOD
      DIMENSION PEB(3), VEB(3), PES(3), VES(3), POG(3), VOG(3),
     .     PB(3), VB(3), PS(3),
     .     POS1(3), VEL1(3), POS2(3), VEL2(3),
     .     POS3(3), POS4(3), POS5(3)
      SAVE
C
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
      DATA TLAST/ 0.0D0 /
C
C     COMPUTE T1, THE TDB JULIAN DATE CORRESPONDING TO TJD
      CALL TIMES (TJD,X,SECDIF)
      T1 = TJD + SECDIF / 86400.0D0
      IF (DABS(TJD-TLAST).LT.1.0D-8) GO TO 20
C
C     GET POSITION AND VELOCITY OF THE EARTH WRT BARYCENTER OF
C     SOLAR SYSTEM AND WRT CENTER OF SUN
      CALL SOLSYS (T1,N,0,PEB,VEB,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL SOLSYS (T1,N,1,PES,VES,IERR)
      IF (IERR.NE.0) GO TO 40
      TLAST = TJD
C
   20 DO 22 J=1,3
      PB(J) = PEB(J)
      VB(J) = VEB(J)
      PS(J) = PES(J)
   22 CONTINUE
      RM = RAM
      DM = DECM
      PMR = PMRA
      PMD = PMDEC
      PI = PARLAX
      RV = RADVEL
C
C     COMPUTE VIRTUAL PLACE
   30 CALL VECTRS (RM,DM,PMR,PMD,PI,RV,POS1,VEL1)
      CALL PROPMO (T0,POS1,VEL1,T1,POS2)
      CALL GEOCEN (POS2,PB,POS3,TLIGHT)
      CALL SUNFLD (POS3,PS,POS4)
      CALL ABERAT (POS4,VB,TLIGHT,POS5)
      CALL ANGLES (POS5,R,D)
C
      RA = R
      DEC = D
      RETURN
C
   40 RA = 0.0D0
      DEC = 0.0D0
      TLAST = 0.0D0
      RETURN
C
C
      ENTRY LPSTAR (UJD,GLON,GLAT,HT,RA,DEC)
C
C     THIS ENTRY COMPUTES THE LOCAL PLACE OF A STAR,
C     GIVEN THE LOCATION OF THE OBSERVER.  THIS ENTRY ASSUMES VPSTAR
C     WAS PREVIOUSLY CALLED, AND USES DATA COMPUTED BY VPSTAR.
C
C          UJD    = UT1 JULIAN DATE, OR EQUIVALENT GREENWICH APPARENT
C                   SIDEREAL TIME IN HOURS, FOR LOCAL PLACE (IN)
C          GLON   = GEODETIC LONGITUDE (EAST +) OF OBSERVER
C                   IN DEGREES (IN)
C          GLAT   = GEODETIC LATITUDE (NORTH +) OF OBSERVER
C                   IN DEGREES (IN)
C          HT     = HEIGHT OF OBSERVER IN METERS (IN)
C          RA     = LOCAL RIGHT ASCENSION IN HOURS, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DEC    = LOCAL DECLINATION IN DEGREES, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C
C
      IF (TLAST.EQ.0.0D0) GO TO 40
C
C     GET POSITION AND VELOCITY OF OBSERVER WRT CENTER OF EARTH
   50 IF (UJD.GT.100.0D0) GO TO 52
      GAST = DMOD(UJD,24.0D0)
      GO TO 55
   52 CALL SIDTIM (UJD,0.0D0,0,ST)
      CALL ETILT (T1,X,X,EQEQ,X,X)
      GAST = ST + EQEQ/3600.0D0
   55 CALL TERRA (GLON,GLAT,HT,GAST,POS1,VEL1)
      CALL NUTATE (-T1,POS1,POS2)
      CALL PRECES (T1,POS2,T0,POG)
      CALL NUTATE (-T1,VEL1,VEL2)
      CALL PRECES (T1,VEL2,T0,VOG)
C
C     COMPUTE POSITION AND VELOCITY OF OBSERVER WRT BARYCENTER OF
C     SOLAR SYSTEM AND WRT CENTER OF SUN
   60 DO 62 J=1,3
      PB(J) = PEB(J) + POG(J)
      VB(J) = VEB(J) + VOG(J)
      PS(J) = PES(J) + POG(J)
   62 CONTINUE
C
C     RECOMPUTE VIRTUAL PLACE USING POSITION AND VELOCITY OF OBSERVER
      GO TO 30
C
      END



      SUBROUTINE VPPLAN (TJD,L,N,RA,DEC,DIS)
C
C     THIS SUBROUTINE COMPUTES THE VIRTUAL PLACE OF A PLANET OR OTHER
C     SOLAR SYSTEM BODY.  RECTANGULAR COORDINATES OF SOLAR SYSTEM BODIES
C     ARE OBTAINED FROM SUBROUTINE SOLSYS.  SEE KAPLAN, ET AL. (1989)
C     ASTRONOMICAL JOURNAL 97, 1197-1210.
C
C          TJD    = TT JULIAN DATE FOR VIRTUAL PLACE (IN)
C          L      = BODY IDENTIFICATION NUMBER FOR DESIRED PLANET (IN)
C          N      = BODY IDENTIFICATION NUMBER FOR THE EARTH (IN)
C          RA     = VIRTUAL RIGHT ASCENSION IN HOURS, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DEC    = VIRTUAL DECLINATION IN DEGREES, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DIS    = TRUE DISTANCE FROM EARTH TO PLANET IN AU (OUT)
C
C
      DOUBLE PRECISION TJD,UJD,GLON,GLAT,HT,RA,DEC,DIS,
     .     T0,T1,T2,T3,TLAST,C,
     .     X,SECDIF,EQEQ,ST,GAST,TLIGHT,R,D,S,
     .     PEB,VEB,PES,VES,POG,VOG,PB,VB,PS,
     .     POS1,VEL1,POS2,VEL2,POS3,POS4,
     .     DABS,DMOD
      DIMENSION PEB(3), VEB(3), PES(3), VES(3), POG(3), VOG(3),
     .     PB(3), VB(3), PS(3),
     .     POS1(3), VEL1(3), POS2(3), VEL2(3),
     .     POS3(3), POS4(3)
      SAVE
C
      DATA C / 173.14463348D0 /
C     C = SPEED OF LIGHT IN AU/DAY
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
      DATA TLAST / 0.0D0 /
C
      IF (L.EQ.N) GO TO 40
C
C     COMPUTE T1, THE TDB JULIAN DATE CORRESPONDING TO TJD
      CALL TIMES (TJD,X,SECDIF)
      T1 = TJD + SECDIF / 86400.0D0
      IF (DABS(TJD-TLAST).LT.1.0D-8) GO TO 20
C
C     GET POSITION AND VELOCITY OF THE EARTH WRT BARYCENTER OF
C     SOLAR SYSTEM AND WRT CENTER OF SUN
      CALL SOLSYS (T1,N,0,PEB,VEB,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL SOLSYS (T1,N,1,PES,VES,IERR)
      IF (IERR.NE.0) GO TO 40
      TLAST = TJD
C
   20 DO 22 J=1,3
      PB(J) = PEB(J)
      VB(J) = VEB(J)
      PS(J) = PES(J)
   22 CONTINUE
      LPLAN = L
C
C     GET POSITION OF PLANET WRT BARYCENTER OF SOLAR SYSTEM
   30 CALL SOLSYS (T1,LPLAN,0,POS1,VEL1,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL GEOCEN (POS1,PB,POS2,TLIGHT)
      S = TLIGHT * C
      T2 = T1 - TLIGHT
   33 CALL SOLSYS (T2,LPLAN,0,POS1,VEL1,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL GEOCEN (POS1,PB,POS2,TLIGHT)
      T3 = T1 - TLIGHT
      IF (DABS(T3-T2).LT.1.0D-8) GO TO 35
      T2 = T3
      GO TO 33
C
C     FINISH VIRTUAL PLACE COMPUTATION
   35 CONTINUE
      CALL SUNFLD (POS2,PS,POS3)
      CALL ABERAT (POS3,VB,TLIGHT,POS4)
      CALL ANGLES (POS4,R,D)
      RA = R
      DEC = D
      DIS = S
      RETURN
C
   40 RA = 0.0D0
      DEC = 0.0D0
      DIS = 0.0D0
      TLAST = 0.0D0
      RETURN
C
C
      ENTRY LPPLAN (UJD,GLON,GLAT,HT,RA,DEC,DIS)
C
C     THIS ENTRY COMPUTES THE LOCAL PLACE OF A PLANET, GIVEN
C     THE LOCATION OF THE OBSERVER.  THIS ENTRY ASSUMES VPPLAN WAS
C     PREVIOUSLY CALLED, AND USES DATA COMPUTED BY VPPLAN.
C
C          UJD    = UT1 JULIAN DATE, OR EQUIVALENT GREENWICH APPARENT
C                   SIDEREAL TIME IN HOURS, FOR LOCAL PLACE (IN)
C          GLON   = GEODETIC LONGITUDE (EAST +) OF OBSERVER
C                   IN DEGREES (IN)
C          GLAT   = GEODETIC LATITUDE (NORTH +) OF OBSERVER
C                   IN DEGREES (IN)
C          HT     = HEIGHT OF OBSERVER IN METERS (IN)
C          RA     = LOCAL RIGHT ASCENSION IN HOURS, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DEC    = LOCAL DECLINATION IN DEGREES, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DIS    = TRUE DISTANCE FROM OBSERVER TO PLANET IN AU (OUT)
C
C
      IF (TLAST.EQ.0.0D0) GO TO 40
C
C     GET POSITION AND VELOCITY OF OBSERVER WRT CENTER OF EARTH
   50 IF (UJD.GT.100.0D0) GO TO 52
      GAST = DMOD(UJD,24.0D0)
      GO TO 55
   52 CALL SIDTIM (UJD,0.0D0,0,ST)
      CALL ETILT (T1,X,X,EQEQ,X,X)
      GAST = ST + EQEQ/3600.0D0
   55 CALL TERRA (GLON,GLAT,HT,GAST,POS1,VEL1)
      CALL NUTATE (-T1,POS1,POS2)
      CALL PRECES (T1,POS2,T0,POG)
      CALL NUTATE (-T1,VEL1,VEL2)
      CALL PRECES (T1,VEL2,T0,VOG)
C
C     COMPUTE POSITION AND VELOCITY OF OBSERVER WRT BARYCENTER OF
C     SOLAR SYSTEM AND WRT CENTER OF SUN
   60 DO 62 J=1,3
      PB(J) = PEB(J) + POG(J)
      VB(J) = VEB(J) + VOG(J)
      PS(J) = PES(J) + POG(J)
   62 CONTINUE
C
C     RECOMPUTE VIRTUAL PLACE USING POSITION AND VELOCITY OF OBSERVER
      GO TO 30
C
      END



      SUBROUTINE ASSTAR (TJD,N,RAM,DECM,PMRA,PMDEC,PARLAX,RADVEL,RA,DEC)
C
C     THIS SUBROUTINE COMPUTES THE ASTROMETRIC PLACE OF A STAR,
C     GIVEN ITS MEAN PLACE, PROPER MOTION, PARALLAX, AND RADIAL
C     VELOCITY FOR J2000.0.   SEE KAPLAN, ET AL. (1989) ASTRONOMICAL
C     JOURNAL 97, 1197-1210.
C
C          TJD    = TT JULIAN DATE FOR ASTROMETRIC PLACE (IN)
C          N      = BODY IDENTIFICATION NUMBER FOR THE EARTH (IN)
C          RAM    = MEAN RIGHT ASCENSION J2000.0 IN HOURS (IN)
C          DECM   = MEAN DECLINATION J2000.0 IN DEGREES (IN)
C          PMRA   = PROPER MOTION IN RA IN TIME SECONDS PER JULIAN
C                   CENTURY (IN)
C          PMDEC  = PROPER MOTION IN DEC IN ARCSECONDS PER JULIAN
C                   CENTURY (IN)
C          PARLAX = PARALLAX IN ARCSECONDS (IN)
C          RADVEL = RADIAL VELOCITY IN KILOMETERS PER SECOND (IN)
C          RA     = ASTROMETRIC RIGHT ASCENSION IN HOURS, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DEC    = ASTROMETRIC DECLINATION IN DEGREES, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C
C
      DOUBLE PRECISION TJD,RAM,DECM,PMRA,PMDEC,PARLAX,RADVEL,RA,DEC,
     .     T0,T1,TLAST,X,SECDIF,RM,DM,PMR,PMD,PI,RV,TLIGHT,R,D,
     .     PEB,VEB,PB,POS1,VEL1,POS2,POS3,DABS
      DIMENSION PEB(3), VEB(3), PB(3),
     .     POS1(3), VEL1(3), POS2(3), POS3(3)
      SAVE
C
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
      DATA TLAST / 0.0D0 /
C
C     COMPUTE T1, THE TDB JULIAN DATE CORRESPONDING TO TJD
      CALL TIMES (TJD,X,SECDIF)
      T1 = TJD + SECDIF / 86400.0D0
      IF (DABS(TJD-TLAST).LT.1.0D-8) GO TO 20
C
C     GET POSITION AND VELOCITY OF THE EARTH WRT BARYCENTER OF
C     SOLAR SYSTEM
      CALL SOLSYS (T1,N,0,PEB,VEB,IERR)
      IF (IERR.NE.0) GO TO 40
      TLAST = TJD
C
   20 DO 22 J=1,3
      PB(J) = PEB(J)
   22 CONTINUE
      RM = RAM
      DM = DECM
      PMR = PMRA
      PMD = PMDEC
      PI = PARLAX
      RV = RADVEL
C
C     COMPUTE ASTROMETRIC PLACE
   30 CALL VECTRS (RM,DM,PMR,PMD,PI,RV,POS1,VEL1)
      CALL PROPMO (T0,POS1,VEL1,T1,POS2)
      CALL GEOCEN (POS2,PB,POS3,TLIGHT)
      CALL ANGLES (POS3,R,D)
      RA = R
      DEC = D
      RETURN
C
   40 RA = 0.0D0
      DEC = 0.0D0
      TLAST = 0.0D0
      RETURN
C
      END



      SUBROUTINE ASPLAN (TJD,L,N,RA,DEC,DIS)
C
C     THIS SUBROUTINE COMPUTES THE ASTROMETRIC PLACE OF A PLANET OR
C     OTHER SOLAR SYSTEM BODY.   RECTANGULAR COORDINATES OF SOLAR SYSTEM
C     BODIES ARE OBTAINED FROM SUBROUTINE SOLSYS.  SEE KAPLAN, ET AL.
C     ASTRONOMICAL JOURNAL 97, 1197-1210.
C
C          TJD    = TT JULIAN DATE FOR ASTROMETRIC PLACE (IN)
C          L      = BODY IDENTIFICATION NUMBER FOR DESIRED PLANET (IN)
C          N      = BODY IDENTIFICATION NUMBER FOR THE EARTH (IN)
C          RA     = ASTROMETRIC RIGHT ASCENSION IN HOURS, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DEC    = ASTROMETRIC DECLINATION IN DEGREES, REFERRED TO
C                   MEAN EQUATOR AND EQUINOX OF J2000.0 (OUT)
C          DIS    = TRUE DISTANCE FROM EARTH TO PLANET IN AU (OUT)
C
C
      DOUBLE PRECISION TJD,RA,DEC,DIS,T1,T2,T3,TLAST,X,SECDIF,
     .     C,TLIGHT,R,D,S,
     .     PEB,VEB,PB,POS1,VEL1,POS2,DABS
      DIMENSION PEB(3), VEB(3), PB(3),
     .     POS1(3), VEL1(3), POS2(3)
      SAVE
C
      DATA C / 173.14463348D0 /
C     C = SPEED OF LIGHT IN AU/DAY
      DATA TLAST / 0.0D0 /
C
      IF (L.EQ.N) GO TO 40
C
C     COMPUTE T1, THE TDB JULIAN DATE CORRESPONDING TO TJD
      CALL TIMES (TJD,X,SECDIF)
      T1 = TJD + SECDIF / 86400.0D0
      IF (DABS(TJD-TLAST).LT.1.0D-8) GO TO 20
C
C     GET POSITION AND VELOCITY OF THE EARTH WRT BARYCENTER OF
C     SOLAR SYSTEM
      CALL SOLSYS (T1,N,0,PEB,VEB,IERR)
      IF (IERR.NE.0) GO TO 40
      TLAST = TJD
C
   20 DO 22 J=1,3
      PB(J) = PEB(J)
   22 CONTINUE
      LPLAN = L
C
C     GET POSITION OF PLANET WRT BARYCENTER OF SOLAR SYSTEM
   30 CALL SOLSYS (T1,LPLAN,0,POS1,VEL1,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL GEOCEN (POS1,PB,POS2,TLIGHT)
      S = TLIGHT * C
      T2 = T1 - TLIGHT
   33 CALL SOLSYS (T2,LPLAN,0,POS1,VEL1,IERR)
      IF (IERR.NE.0) GO TO 40
      CALL GEOCEN (POS1,PB,POS2,TLIGHT)
      T3 = T1 - TLIGHT
      IF (DABS(T3-T2).LT.1.0D-8) GO TO 35
      T2 = T3
      GO TO 33
C
C     FINISH ASTROMETRIC PLACE COMPUTATION
   35 CONTINUE
      CALL ANGLES (POS2,R,D)
      RA = R
      DEC = D
      DIS = S
      RETURN
C
   40 RA = 0.0D0
      DEC = 0.0D0
      DIS = 0.0D0
      TLAST = 0.0D0
      RETURN
C
      END



      SUBROUTINE MPSTAR (TJD,N,RA,DEC,RAM,DECM)
C
C     THIS SUBROUTINE COMPUTES THE MEAN PLACE OF A STAR FOR J2000.0,
C     GIVEN ITS APPARENT PLACE AT DATE TJD.  PROPER MOTION, PARALLAX,
C     AND RADIAL VELOCITY ARE ASSUMED TO BE ZERO.
C
C          TJD    = TT JULIAN DATE OF APPARENT PLACE (IN)
C          N      = BODY IDENTIFICATION NUMBER FOR THE EARTH (IN)
C          RA     = APPARENT RIGHT ASCENSION IN HOURS, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (IN)
C          DEC    = APPARENT DECLINATION IN DEGREES, REFERRED TO
C                   TRUE EQUATOR AND EQUINOX OF DATE (IN)
C          RAM    = MEAN RIGHT ASCENSION J2000.0 IN HOURS (OUT)
C          DECM   = MEAN DECLINATION J2000.0 IN DEGREES (OUT)
C
C
      DOUBLE PRECISION TJD,RA,DEC,RAM,DECM,T1,RAMNEW,DCMNEW,
     .     RAMOLD,DCMOLD,R,D,DELRA,DELDEC,DABS,DMOD
C
      T1 = TJD
      RAMNEW = DMOD(RA,24.0D0)
      IF (RAMNEW.LT.0.0D0) RAMNEW = RAMNEW + 24.0D0
      DCMNEW = DEC
      ITER = 0
C
   20 ITER = ITER + 1
      RAMOLD = RAMNEW
      DCMOLD = DCMNEW
      R = RAMOLD
      D = DCMOLD
      CALL APSTAR (T1,N,R,D,0.0D0,0.0D0,0.0D0,0.0D0,R,D)
      DELRA = R - RAMOLD
      DELDEC = D - DCMOLD
      IF (DELRA.LT.-12.0D0) DELRA = DELRA + 24.0D0
      IF (DELRA.GT.+12.0D0) DELRA = DELRA - 24.0D0
      RAMNEW = RA - DELRA
      DCMNEW = DEC - DELDEC
      IF (ITER.GT.20) GO TO 40
      IF (DABS(RAMNEW-RAMOLD).GT.1.0D-10) GO TO 20
      IF (DABS(DCMNEW-DCMOLD).GT.1.0D-09) GO TO 20
C
      RAM = RAMNEW
      DECM = DCMNEW
      IF (RAM.LT. 0.0D0) RAM = RAM + 24.0D0
      IF (RAM.GE.24.0D0) RAM = RAM - 24.0D0
      RETURN
C
   40 RAM = 0.0D0
      DECM = 0.0D0
      RETURN
C
      END



      SUBROUTINE SIDTIM (TJDH,TJDL,K,GST)
C
C     THIS SUBROUTINE COMPUTES THE GREENWICH SIDEREAL TIME
C     (EITHER MEAN OR APPARENT) AT JULIAN DATE TJDH + TJDL.
C     SEE AOKI, ET AL. (1982) ASTRONOMY AND ASTROPYSICS 105, 359-361.
C
C          TJDH   = JULIAN DATE, HIGH-ORDER PART (IN)
C          TJDL   = JULIAN DATE, LOW-ORDER PART (IN)
C                   JULIAN DATE MAY BE SPLIT AT ANY POINT, BUT
C                   FOR HIGHEST PRECISION, SET TJDH TO BE THE INTEGRAL
C                   PART OF THE JULIAN DATE, AND SET TJDL TO BE THE
C                   FRACTIONAL PART
C          K      = TIME SELECTION CODE (IN)
C                   SET K=0 FOR GREENWICH MEAN SIDEREAL TIME
C                   SET K=1 FOR GREENWICH APPARENT SIDEREAL TIME
C          GST    = GREENWICH (MEAN OR APPARENT) SIDEREAL TIME
C                   IN HOURS (OUT)
C
C     NOTE:  FOR MOST APPLICATIONS, BASIS FOR INPUT JULIAN DATE SHOULD
C     BE UT1, WHICH RESULTS IN ORDINARY SIDEREAL TIME OUTPUT IN GST.
C     USE OF INPUT JULIAN DATE BASED ON TDB RESULTS IN 'DYNAMICAL
C     SIDEREAL TIME'.
C
C
      DOUBLE PRECISION TJDH,TJDL,TJD,TH,TL,T0,T,T2,T3,GST,
     .     X,EQEQ,ST,DMOD
C
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
C
      TJD = TJDH + TJDL
      TH = (TJDH - T0) / 36525.0D0
      TL =  TJDL       / 36525.0D0
      T = TH + TL
      T2 = T * T
      T3 = T2 * T
C
C     FOR APPARENT SIDEREAL TIME, OBTAIN EQUATION OF THE EQUINOXES
      EQEQ = 0.0D0
      IF (K.EQ.1) CALL ETILT (TJD,X,X,EQEQ,X,X)
C
      ST = EQEQ - 6.2D-6*T3 + 0.093104D0*T2 + 67310.54841D0
     .     + 8640184.812866D0 *TL
     .     + 3155760000.0D0   *TL
     .     + 8640184.812866D0 *TH
     .     + 3155760000.0D0   *TH
C
      GST = DMOD (ST / 3600.0D0, 24.0D0)
      IF (GST.LT.0.0D0) GST = GST + 24.0D0
      RETURN
C
      END



      SUBROUTINE PNSW (TJD,GAST,X,Y,VECE,VECS)
C
C     TRANSFORMS A VECTOR FROM EARTH-FIXED SYSTEM TO SPACE-FIXED SYSTEM
C     BY APPLYING ROTATIONS FOR WOBBLE, SPIN, NUTATION, AND PRECESSION.
C     (COMBINED ROTATION IS SYMBOLIZED  P N S W .)   SPECIFICALLY,
C     IT TRANSFORMS A VECTOR FROM EARTH-FIXED GEOGRAPHIC SYSTEM TO
C     SPACE-FIXED SYSTEM BASED ON MEAN EQUATOR AND EQUINOX OF J2000.0.
C
C          TJD    = TT JULIAN DATE (IN)
C          GAST   = GREENWICH APPARENT SIDEREAL TIME, IN HOURS (IN)
C          X      = CONVENTIONALLY-DEFINED X COORDINATE OF CELESTIAL
C                   EPHEMERIS POLE WITH RESPECT TO IERS REFERENCE
C                   POLE, IN ARCSECONDS (IN)
C          Y      = CONVENTIONALLY-DEFINED Y COORDINATE OF CELESTIAL
C                   EPHEMERIS POLE WITH RESPECT TO IERS REFERENCE
C                   POLE, IN ARCSECONDS (IN)
C          VECE   = VECTOR IN GEOCENTRIC RECTANGULAR
C                   EARTH-FIXED SYSTEM, REFERRED TO GEOGRAPHIC
C                   EQUATOR AND GREENWICH MERIDIAN (IN)
C          VECS   = VECTOR IN GEOCENTRIC RECTANGULAR
C                   SPACE-FIXED SYSTEM, REFERRED TO MEAN EQUATOR
C                   AND EQUINOX OF J2000.0 (OUT)
C
C     NOTE:  TJD=0.D0 MEANS NO PRECESSION/NUTATION TRANSFORMATION,
C     GAST=0.D0 MEANS NO SPIN TRANSFORMATION, X=Y=0.D0 MEANS NO
C     WOBBLE TRANSFORMATION.
C
C
      DOUBLE PRECISION TJD,GAST,X,Y,VECE,VECS,T0,T1,Z,SECDIF,
     .     V1,V2,V3
      DIMENSION VECE(3), VECS(3), V1(3), V2(3), V3(3)
C
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
C
C     COMPUTE T1, THE TDB JULIAN DATE CORRESPONDING TO TJD
      IF (TJD.EQ.0.0D0) GO TO 20
      CALL TIMES (TJD,Z,SECDIF)
      T1 = TJD + SECDIF / 86400.0D0
C
   20 IF (X.EQ.0.0D0 .AND. Y.EQ.0.0D0) GO TO 25
      CALL WOBBLE (X,Y,VECE,V1)
      GO TO 30
   25 DO 28 J=1,3
   28 V1(J) = VECE(J)
C
   30 IF (GAST.EQ.0.0D0) GO TO 35
      CALL SPIN (GAST,V1,V2)
      GO TO 40
   35 DO 38 J=1,3
   38 V2(J) = V1(J)
C
   40 IF (TJD.EQ.0.0D0) GO TO 45
      CALL NUTATE (-T1,V2,V3)
      CALL PRECES (T1,V3,T0,VECS)
      GO TO 50
   45 DO 48 J=1,3
   48 VECS(J) = V2(J)
C
   50 RETURN
C
      END



      SUBROUTINE GETHIP (RAH,DECH,PMRAH,PMDECH,PARXH,RVH,
     .                   RA2,DEC2,PMRA2,PMDEC2,PARX2,RV2)
C
C     THIS SUBROUTINE CONVERTS HIPPARCOS DATA AT EPOCH J1991.25
C     TO EPOCH J2000.0 AND FK5-STYLE UNITS.  TO BE USED ONLY FOR
C     HIPPARCOS OR TYCHO STARS WITH LINEAR SPACE MOTION.
C
C          RAH    = HIPPARCOS RIGHT ASCENSION IN DEGREES (IN)
C          DECH   = HIPPARCOS DECLINATION IN DEGREES (IN)
C          PMRAH  = HIPPARCOS PROPER MOTION IN RA * COS(DECH)
C                   IN MILLIARCSECONDS PER YEAR (IN)
C          PMDECH = HIPPARCOS PROPER MOTION IN DEC
C                   IN MILLIARCSECONDS PER YEAR (IN)
C          PARXH  = HIPPARCOS PARALLAX IN MILLIARCSECONDS (IN)
C          RVH    = RADIAL VELOCITY AT HIPPARCOS EPOCH
C                   IN KILOMETERS PER SECOND (IN)
C          RA2    = RIGHT ASCENSION AT J2000.0 IN HOURS (OUT)
C          DEC2   = DECLINATION AT J2000.0 IN DEGREES (OUT)
C          PMRA2  = PROPER MOTION IN RA AT J2000.0
C                   IN TIME SECONDS PER JULIAN CENTURY (OUT)
C          PMDEC2 = PROPER MOTION IN DEC AT J2000.0
C                   IN ARCSECONDS PER JULIAN CENTURY (OUT)
C          PARX2  = PARALLAX AT J2000.0 IN ARCSECONDS (OUT)
C          RV2    = RADIAL VELOCITY AT J2000.0 IN KILOMETERS
C                   PER SECOND (OUT)
C
C
      DOUBLE PRECISION RAH,DECH,PMRAH,PMDECH,PARXH,RVH,
     .     RA2,DEC2,PMRA2,PMDEC2,PARX2,RV2,
     .     RADCON,EPOCH1,EPOCH2,
     .     RA1,DEC1,PMRA1,PMDEC1,PARX1,RV1,DCOS
C
      DATA RADCON / 0.0174532925199433D0 /,
     .     EPOCH1, EPOCH2 / 2448349.0625D0, 2451545.0000D0 /
C
      RA1 = RAH / 15.D0
      DEC1 = DECH
      PMRA1 = PMRAH / ( 150.D0 * DCOS ( DEC1 * RADCON ) )
      PMDEC1 = PMDECH / 10.D0
      PARX1 = PARXH / 1000.D0
      RV1 = RVH
C
      CALL CATRAN ( 1,EPOCH1,RA1,DEC1,PMRA1,PMDEC1,PARX1,RV1,
     .                EPOCH2,RA2,DEC2,PMRA2,PMDEC2,PARX2,RV2 )
C
      RETURN
C
      END



      SUBROUTINE CATRAN (IT,DATE1,RA1,DEC1,PMRA1,PMDEC1,PARX1,RV1,
     .                      DATE2,RA2,DEC2,PMRA2,PMDEC2,PARX2,RV2)
C
C     THIS SUBROUTINE TRANSFORMS A STAR'S CATALOG QUANTITIES FOR
C     A CHANGE OF EPOCH AND/OR EQUATOR AND EQUINOX.
C
C          IT     = TRANSFORMATION OPTION (IN)
C                   SET IT=1 TO CHANGE EPOCH (SAME EQUATOR AND EQUINOX)
C                   SET IT=2 TO CHANGE EQUATOR AND EQUINOX (SAME EPOCH)
C                   SET IT=3 TO CHANGE EQUATOR AND EQUINOX AND EPOCH
C          DATE1  = TT JULIAN DATE, OR YEAR, OF ORIGINAL CATALOG
C                   DATA (THE FOLLOWING SIX ARGUMENTS) (IN)
C          RA1    = ORIGINAL MEAN RIGHT ASCENSION IN HOURS (IN)
C          DEC1   = ORIGINAL MEAN DECLINATION IN DEGREES (IN)
C          PMRA1  = ORIGINAL PROPER MOTION IN RA
C                   IN TIME SECONDS PER JULIAN CENTURY (IN)
C          PMDEC1 = ORIGINAL PROPER MOTION IN DEC
C                   IN ARCSECONDS PER JULIAN CENTURY (IN)
C          PARX1  = ORIGINAL PARALLAX IN ARCSECONDS (IN)
C          RV1    = ORIGINAL RADIAL VELOCITY IN KILOMETERS
C                   PER SECOND (OUT)
C          DATE2  = TT JULIAN DATE, OR YEAR, FOR TRANSFORMED
C                   OUTPUT DATA (THE FOLLOWING SIX ARGUMENTS) (IN)
C          RA2    = TRANSFORMED MEAN RIGHT ASCENSION IN HOURS (OUT)
C          DEC2   = TRANSFORMED MEAN DECLINATION IN DEGREES (OUT)
C          PMRA2  = TRANSFORMED PROPER MOTION IN RA
C                   IN TIME SECONDS PER JULIAN CENTURY (OUT)
C          PMDEC2 = TRANSFORMED PROPER MOTION IN DEC
C                   IN ARCSECONDS PER JULIAN CENTURY (OUT)
C          PARX2  = TRANSFORMED PARALLAX IN ARCSECONDS (OUT)
C          RV2    = TRANSFORMED RADIAL VELOCITY IN KILOMETERS
C                   PER SECOND (OUT)
C
C     NOTE 1:  DATE1 AND DATE2 MAY BE SPECIFIED EITHER AS A JULIAN
C     DATE (E.G., 2433282.5D0) OR A JULIAN YEAR AND FRACTION
C     (E.G., 1950.0D0).  VALUES LESS THAN 10000 ARE ASSUMED TO
C     BE YEARS.
C
C     NOTE 2:  IT=1 UPDATES THE STAR'S DATA TO ACCOUNT FOR
C     THE STAR'S SPACE MOTION BETWEEN THE FIRST AND SECOND DATES,
C     WITHIN A FIXED REFERENCE FRAME.  IT=2 APPLIES A ROTATION
C     OF THE REFERENCE FRAME CORRESPONDING TO PRECESSION BETWEEN
C     THE FIRST AND SECOND DATES, BUT LEAVES THE STAR FIXED IN SPACE.
C     IT=3 PROVIDES BOTH TRANSFORMATIONS.
C
C     NOTE 3:  THIS SUBROUTINE CANNOT BE PROPERLY USED TO BRING DATA
C     FROM OLD (PRE-FK5) STAR CATALOGS INTO THE MODERN SYSTEM, BECAUSE
C     OLD CATALOGS WERE COMPILED USING A SET OF CONSTANTS THAT ARE
C     INCOMPATIBLE WITH THE IAU (1976) SYSTEM.
C
C
      DOUBLE PRECISION DATE1,RA1,DEC1,PMRA1,PMDEC1,PARX1,RV1,
     .     DATE2,RA2,DEC2,PMRA2,PMDEC2,PARX2,RV2,
     .     SECCON,KMAU,TJD1,POS1,VEL1,TJD2,POS2,VEL2,
     .     PARALX,DIST,R,D,CRA,SRA,CDC,SDC,PMR,PMD,RVL,
     .     XYPROJ,DCOS,DSIN,DATAN2
      INTEGER IT,J
C
      DIMENSION POS1(3), VEL1(3), POS2(3), VEL2(3)
C
      DATA SECCON / 206264.8062470964D0 /,   KMAU / 1.49597870D8 /
C
C --- IF NECESSARY, COMPUTE JULIAN DATES -----------------------------
C
C     SUBROUTINE USES TDB JULIAN DATES INTERNALLY, BUT NO
C     DISTINCTION BETWEEN TDB AND TT IS NECESSARY
C
      IF ( DATE1 .LT. 10000.D0 ) THEN
           TJD1 = 2451545.0D0 + ( DATE1 - 2000.D0 ) * 365.25D0
      ELSE
           TJD1 = DATE1
      END IF
      IF ( DATE2 .LT. 10000.D0 ) THEN
           TJD2 = 2451545.0D0 + ( DATE2 - 2000.D0 ) * 365.25D0
      ELSE
           TJD2 = DATE2
      END IF
C
C --- CONVERT INPUT ANGULAR COMPONENTS TO VECTORS --------------------
C
C     IF PARALLAX IS UNKNOWN, UNDETERMINED, OR ZERO, SET IT TO 1E-7
C     ARCSECOND, CORRESPONDING TO A DISTANCE OF 10 MEGAPARSECS
      PARALX = PARX1
      IF ( PARALX .LE. 0.D0 ) PARALX = 1.D-7
C
C     CONVERT RIGHT ASCENSION, DECLINATION, AND PARALLAX TO POSITION
C     VECTOR IN EQUATORIAL SYSTEM WITH UNITS OF AU
      DIST = SECCON / PARALX
      R = RA1 * 54000.D0 / SECCON
      D = DEC1 * 3600.D0 / SECCON
      CRA = DCOS(R)
      SRA = DSIN(R)
      CDC = DCOS(D)
      SDC = DSIN(D)
      POS1(1) = DIST * CDC * CRA
      POS1(2) = DIST * CDC * SRA
      POS1(3) = DIST * SDC
C
C     CONVERT PROPER MOTION AND RADIAL VELOCITY TO ORTHOGONAL
C     COMPONENTS OF MOTION, IN SPHERICAL POLAR SYSTEM AT STAR'S
C     ORIGINAL POSITION, WITH UNITS OF AU/DAY
      PMR = PMRA1 * 15.D0 * CDC / ( PARALX * 36525.D0 )
      PMD = PMDEC1              / ( PARALX * 36525.D0 )
      RVL = RV1 * 86400.D0 / KMAU
C
C     TRANSFORM MOTION VECTOR TO EQUATORIAL SYSTEM
      VEL1(1) = - PMR * SRA - PMD * SDC * CRA + RVL * CDC * CRA
      VEL1(2) =   PMR * CRA - PMD * SDC * SRA + RVL * CDC * SRA
      VEL1(3) =               PMD * CDC       + RVL * SDC
C
C --- UPDATE STAR'S POSITION VECTOR FOR SPACE MOTION -----------------
C     (ONLY IF IT=1 OR IT=3)
C
      IF ( IT .EQ. 1 .OR. IT .EQ. 3 ) THEN
          DO 22 J=1,3
              POS2(J) = POS1(J) + VEL1(J) * ( TJD2 - TJD1 )
              VEL2(J) = VEL1(J)
   22     CONTINUE
      ELSE
          DO 24 J=1,3
              POS2(J) = POS1(J)
              VEL2(J) = VEL1(J)
   24     CONTINUE
      END IF
C
C --- PRECESS POSITION AND VELOCITY VECTORS --------------------------
C     (ONLY IF IT=2 OR IT=3)
C
      IF ( IT .EQ. 2 .OR. IT .EQ. 3 ) THEN
          DO 32 J=1,3
              POS1(J) = POS2(J)
              VEL1(J) = VEL2(J)
   32     CONTINUE
          CALL PRECES ( TJD1, POS1, TJD2,    POS2 )
          CALL PRECES ( TJD1, VEL1, TJD2,    VEL2 )
      END IF
C
C --- CONVERT VECTORS BACK TO ANGULAR COMPONENTS FOR OUTPUT ----------
C
C     FROM UPDATED POSITION VECTOR, OBTAIN STAR'S NEW POSITION
C     EXPRESSED AS ANGULAR QUANTITIES
      XYPROJ = DSQRT ( POS2(1)**2 + POS2(2)**2 )
      R = 0.D0
      IF ( XYPROJ .GT. 0.D0 ) R = DATAN2 ( POS2(2), POS2(1) )
      RA2 = R * SECCON / 54000.D0
      IF ( RA2 .LT.  0.D0 ) RA2 = RA2 + 24.D0
      IF ( RA2 .GE. 24.D0 ) RA2 = RA2 - 24.D0
      D = DATAN2 ( POS2(3), XYPROJ  )
      DEC2 = D * SECCON / 3600.D0
      DIST = DSQRT ( POS2(1)**2 + POS2(2)**2 + POS2(3)**2 )
      PARALX = SECCON / DIST
      PARX2 = PARALX
C
C     TRANSFORM MOTION VECTOR BACK TO SPHERICAL POLAR SYSTEM AT STAR'S
C     NEW POSITION
      CRA = DCOS(R)
      SRA = DSIN(R)
      CDC = DCOS(D)
      SDC = DSIN(D)
      PMR = - VEL2(1) * SRA       + VEL2(2) * CRA
      PMD = - VEL2(1) * CRA * SDC - VEL2(2) * SRA * SDC + VEL2(3) * CDC
      RVL =   VEL2(1) * CRA * CDC + VEL2(2) * SRA * CDC + VEL2(3) * SDC
C
C     CONVERT COMPONENTS OF MOTION TO FROM AU/DAY TO NORMAL
C     CATALOG UNITS
      PMRA2  = PMR * PARALX * 36525.D0 / ( 15.D0 * CDC )
      PMDEC2 = PMD * PARALX * 36525.D0
      RV2    = RVL * KMAU / 86400.D0
C
C     TAKE CARE OF ZERO-PARALLAX CASE
      IF ( PARX2 .LE. 1.01D-7 ) THEN
          PARX2 = 0.D0
          RV2 = RV1
      END IF
C
      RETURN
C
      END



      SUBROUTINE ZDAZ (UJD,X,Y,GLON,GLAT,HT,RA,DEC,IREFR,
     .                 ZD,AZ,RAR,DECR)
C
C     THIS SUBROUTINE TRANSFORMS TOPOCENTRIC RIGHT ASCENSION AND
C     DECLINATION TO ZENITH DISTANCE AND AZIMUTH.  THIS ROUTINE USES
C     A METHOD THAT PROPERLY ACCOUNTS FOR POLAR MOTION, WHICH IS
C     SIGNIFICANT AT THE SUB-ARCSECOND LEVEL.  THIS SUBROUTINE
C     CAN ALSO ADJUST COORDINATES FOR ATMOSPHERIC REFRACTION.
C
C          UJD    = UT1 JULIAN DATE, OR EQUIVALENT GREENWICH APPARENT
C                   SIDEREAL TIME IN HOURS (IN)
C          X      = CONVENTIONALLY-DEFINED X COORDINATE OF CELESTIAL
C                   EPHEMERIS POLE WITH RESPECT TO IERS REFERENCE
C                   POLE, IN ARCSECONDS (IN)
C          Y      = CONVENTIONALLY-DEFINED Y COORDINATE OF CELESTIAL
C                   EPHEMERIS POLE WITH RESPECT TO IERS REFERENCE
C                   POLE, IN ARCSECONDS (IN)
C          GLON   = GEODETIC LONGITUDE (EAST +) OF OBSERVER
C                   IN DEGREES (IN)
C          GLAT   = GEODETIC LATITUDE (NORTH +) OF OBSERVER
C                   IN DEGREES (IN)
C          HT     = HEIGHT OF OBSERVER IN METERS (IN)
C          RA     = TOPOCENTRIC RIGHT ASCENSION OF OBJECT OF INTEREST,
C                   IN HOURS, REFERRED TO TRUE EQUATOR AND EQUINOX
C                   OF DATE (IN)
C          DEC    = TOPOCENTRIC DECLINATION OF OBJECT OF INTEREST,
C                   IN DEGREES, REFERRED TO TRUE EQUATOR AND EQUINOX
C                   OF DATE (IN)
C          IREFR  = ATMOSPHERIC REFRACTION OPTION (IN):
C                   SET IREFR=0  FOR NO REFRACTION
C                   SET IREFR=1  TO INCLUDE REFRACTION
C          ZD     = TOPOCENTRIC ZENITH DISTANCE IN DEGREES,
C                   AFFECTED BY REFRACTION IF IREFR=1 (OUT)
C          AZ     = TOPOCENTRIC AZIMUTH (MEASURED EAST FROM NORTH)
C                   IN DEGREES (OUT)
C          RAR    = TOPOCENTRIC RIGHT ASCENSION OF OBJECT OF INTEREST,
C                   IN HOURS, REFERRED TO TRUE EQUATOR AND EQUINOX
C                   OF DATE, AFFECTED BY REFRACTION IF IREFR=1 (OUT)
C          DECR   = TOPOCENTRIC DECLINATION OF OBJECT OF INTEREST,
C                   IN DEGREES, REFERRED TO TRUE EQUATOR AND EQUINOX
C                   OF DATE, AFFECTED BY REFRACTION IF IREFR=1 (OUT)
C
C     NOTE 1:  UJD MAY BE SPECIFIED EITHER AS A UT1 JULIAN DATE
C     (E.G., 2451251.823D0) OR AN HOUR AND FRACTION OF GREENWICH
C     APPARENT SIDEREAL TIME (E.G., 19.1846D0).  X AND Y CAN BE
C     SET TO ZERO IF SUB-ARCSECOND ACCURACY IS NOT NEEDED.
C     HT IS USED ONLY FOR REFRACTION, IF IREFR=1.  RA AND DEC CAN
C     BE OBTAINED FROM TPSTAR OR TPPLAN.
C
C     NOTE 2:  THE DIRECTONS ZD=0 (ZENITH) AND AZ=0 (NORTH) ARE
C     HERE CONSIDERED FIXED IN THE TERRESTRIAL FRAME.  SPECIFICALLY,
C     THE ZENITH IS ALONG THE GEODETIC NORMAL, AND NORTH IS TOWARD
C     THE IERS REFERENCE POLE.
C
C     NOTE 3:  IF IREFR=0, THEN RAR=RA AND DECR=DEC.
C
C
      DOUBLE PRECISION UJD,X,Y,GLON,GLAT,HT,RA,DEC,ZD,AZ,RAR,DECR,
     .     PI,DEGRAD,RADDEG,GAST,
     .     SINLAT,COSLAT,SINLON,COSLON,SINDC,COSDC,SINRA,COSRA,
     .     UZE,UNE,UWE,UZ,UN,UW,P,PR,PZ,PN,PW,PROJ,
     .     ZD0,ZD1,REFR,COSR,PRLEN,RLEN,
     .     DSIN,DCOS,DSQRT,DATAN2
      DIMENSION UZE(3), UNE(3), UWE(3), UZ(3), UN(3), UW(3),
     .     P(3), PR(3)
C
      DATA PI / 3.141592653589793D0 /
C
      DEGRAD = PI / 180.D0
      RADDEG = 180.D0 / PI
C
      IF ( UJD .GT. 100.D0 ) THEN
          CALL SIDTIM ( UJD, 0.0D0, 1,   GAST )
      ELSE
          GAST = DMOD ( UJD, 24.0D0 )
      END IF
C
      RAR    = RA
      DECR   = DEC
      SINLAT = DSIN ( GLAT * DEGRAD )
      COSLAT = DCOS ( GLAT * DEGRAD )
      SINLON = DSIN ( GLON * DEGRAD )
      COSLON = DCOS ( GLON * DEGRAD )
      SINDC  = DSIN ( DEC * DEGRAD )
      COSDC  = DCOS ( DEC * DEGRAD )
      SINRA  = DSIN ( RA * 15.0D0 * DEGRAD )
      COSRA  = DCOS ( RA * 15.0D0 * DEGRAD )
C
C --- SET UP ORTHONORMAL BASIS VECTORS IN LOCAL EARTH-FIXED SYSTEM ----
C
C     DEFINE VECTOR TOWARD LOCAL ZENITH IN EARTH-FIXED SYSTEM (Z AXIS)
      UZE(1) =  COSLAT * COSLON
      UZE(2) =  COSLAT * SINLON
      UZE(3) =  SINLAT
C
C     DEFINE VECTOR TOWARD LOCAL NORTH IN EARTH-FIXED SYSTEM (X AXIS)
      UNE(1) = -SINLAT * COSLON
      UNE(2) = -SINLAT * SINLON
      UNE(3) =  COSLAT
C
C     DEFINE VECTOR TOWARD LOCAL WEST IN EARTH-FIXED SYSTEM (Y AXIS)
      UWE(1) =  SINLON
      UWE(2) = -COSLON
      UWE(3) =  0.D0
C
C --- OBTAIN VECTORS IN CELESTIAL SYSTEM ------------------------------
C
C     ROTATE EARTH-FIXED ORTHONORMAL BASIS VECTORS TO CELESTIAL SYSTEM
C     (WRT EQUATOR AND EQUINOX OF DATE)
      CALL PNSW ( 0.D0, GAST, X, Y, UZE,   UZ )
      CALL PNSW ( 0.D0, GAST, X, Y, UNE,   UN )
      CALL PNSW ( 0.D0, GAST, X, Y, UWE,   UW )
C
C     DEFINE UNIT VECTOR P TOWARD OBJECT IN CELESTIAL SYSTEM
C     (WRT EQUATOR AND EQUINOX OF DATE)
      P(1) = COSDC * COSRA
      P(2) = COSDC * SINRA
      P(3) = SINDC
C
C --- COMPUTE COORDINATES OF OBJECT WRT ORTHONORMAL BASIS -------------
C
C     COMPUTE COMPONENTS OF P -- PROJECTIONS OF P ONTO ROTATED
C     EARTH-FIXED BASIS VECTORS
      PZ = P(1) * UZ(1) + P(2) * UZ(2) + P(3) * UZ(3)
      PN = P(1) * UN(1) + P(2) * UN(2) + P(3) * UN(3)
      PW = P(1) * UW(1) + P(2) * UW(2) + P(3) * UW(3)
C
C     COMPUTE AZIMUTH AND ZENITH DISTANCE
      PROJ = DSQRT ( PN**2 + PW**2 )
      AZ = 0.D0
      IF ( PROJ .GT. 0.D0 ) AZ = -DATAN2 ( PW, PN ) * RADDEG
      IF ( AZ .LT.   0.D0 ) AZ = AZ + 360.D0
      IF ( AZ .GE. 360.D0 ) AZ = AZ - 360.D0
      ZD = DATAN2 ( PROJ, PZ ) * RADDEG
C
C --- APPLY ATMOSPHERIC REFRACTION IF REQUESTED -----------------------
C
      IF ( IREFR .EQ. 1 ) THEN
C
C         GET REFRACTION IN ZENITH DISTANCE
C         ITERATIVE PROCESS REQUIRED BECAUSE REFRACTION ALGORITHMS ARE
C         ALWAYS A FUNCTION OF OBSERVED (NOT COMPUTED) ZENITH DISTANCE
          ZD0 = ZD
  40      ZD1 = ZD
          CALL REFRAC ( HT, ZD,   REFR )
          ZD = ZD0 - REFR
C         REQUIRE CONVERGENCE TO 0.2 ARCSEC (ACTUAL ACCURACY LESS)
          IF ( DABS ( ZD - ZD1 ) .GT. 5.D-5 ) GO TO 40
C
C         APPLY REFRACTION TO CELESTIAL COORDINATES OF OBJECT
          IF ( REFR .GT. 0.D0 .AND. ZD .GT. 0.01D0 ) THEN
C
C             SHIFT POSITION VECTOR OF OBJECT IN CELESTIAL SYSTEM
C             TO ACCOUNT FOR FOR REFRACTION (SEE USNO/AA TECHNICAL
C             NOTE 9)
              COSR  = DCOS ( REFR * DEGRAD )
              PRLEN = DSIN ( ZD0 * DEGRAD ) / DSIN ( ZD * DEGRAD )
              RLEN  = DSQRT ( 1.D0 + PRLEN**2 - 2.D0 * PRLEN * COSR )
C             ADD SMALL REFRACTION DISPLACEMENT VECTOR TO P
              DO 50 J = 1, 3
  50          PR(J) = ( P(J) + RLEN * UZ(J) ) / PRLEN
C
C             COMPUTE REFRACTED RIGHT ASCENSION AND DECLINATION
              PROJ = DSQRT ( PR(1)**2 + PR(2)**2 )
              RAR = 0.D0
              IF ( PROJ .GT. 0.D0 ) RAR = DATAN2 ( PR(2), PR(1) )
     .                                    * RADDEG / 15.D0
              IF ( RAR .LT.  0.D0 ) RAR = RAR + 24.D0
              IF ( RAR .GE. 24.D0 ) RAR = RAR - 24.D0
              DECR = DATAN2 ( PR(3), PROJ ) * RADDEG
C
          END IF
C
      END IF
C
C ---------------------------------------------------------------------
C
      RETURN
C
      END



      SUBROUTINE VECTRS (RA,DEC,PMRA,PMDEC,PARLLX,RV,POS,VEL)
C
C     THIS SUBROUTINE CONVERTS ANGULAR QUANTITIES TO VECTORS.
C
C          RA     = RIGHT ASCENSION IN HOURS (IN)
C          DEC    = DECLINATION IN DEGREES (IN)
C          PMRA   = PROPER MOTION IN RA IN TIME SECONDS PER
C                   JULIAN CENTURY (IN)
C          PMDEC  = PROPER MOTION IN DEC IN ARCSECONDS PER
C                   JULIAN CENTURY (IN)
C          PARLLX = PARALLAX IN ARCSECONDS (IN)
C          RV     = RADIAL VELOCITY IN KILOMETERS PER SECOND (IN)
C          POS    = POSITION VECTOR, EQUATORIAL RECTANGULAR COORDINATES,
C                   COMPONENTS IN AU (OUT)
C          VEL    = VELOCITY VECTOR, EQUATORIAL RECTANGULAR COORDINATES,
C                   COMPONENTS IN AU/DAY (OUT)
C
C
      DOUBLE PRECISION RA,DEC,PMRA,PMDEC,PARLLX,RV,POS,VEL,
     .     SECCON,KMAU,PARALX,DIST,R,D,CRA,SRA,CDC,SDC,PMR,PMD,RVL,
     .     DCOS,DSIN
      DIMENSION POS(3), VEL(3)
C
      DATA SECCON / 206264.8062470964D0 /,     KMAU / 1.49597870D8 /
C
C     IF PARALLAX IS UNKNOWN, UNDETERMINED, OR ZERO, SET IT TO 1E-7
C     ARCSECOND, CORRESPONDING TO A DISTANCE OF 10 MEGAPARSECS
      PARALX = PARLLX
      IF (PARALX.LE.0.0D0) PARALX = 1.0D-7
C
C     CONVERT RIGHT ASCENSION, DECLINATION, AND PARALLAX TO POSITION
C     VECTOR IN EQUATORIAL SYSTEM WITH UNITS OF AU
      DIST = SECCON / PARALX
      R = RA * 54000.0D0 / SECCON
      D = DEC * 3600.0D0 / SECCON
      CRA = DCOS(R)
      SRA = DSIN(R)
      CDC = DCOS(D)
      SDC = DSIN(D)
      POS(1) = DIST * CDC * CRA
      POS(2) = DIST * CDC * SRA
      POS(3) = DIST * SDC
C
C     CONVERT PROPER MOTION AND RADIAL VELOCITY TO ORTHOGONAL COMPONENTS
C     OF MOTION WITH UNITS OF AU/DAY
      PMR = PMRA * 15.0D0 * CDC / (PARALX * 36525.0D0)
      PMD = PMDEC / (PARALX * 36525.0D0)
      RVL = RV * 86400.0D0 / KMAU
C
C     TRANSFORM MOTION VECTOR TO EQUATORIAL SYSTEM
      VEL(1) = - PMR * SRA   - PMD * SDC * CRA   + RVL * CDC * CRA
      VEL(2) =   PMR * CRA   - PMD * SDC * SRA   + RVL * CDC * SRA
      VEL(3) =                 PMD * CDC         + RVL * SDC
C
      RETURN
C
      END



      SUBROUTINE ANGLES (POS,RA,DEC)
C
C     THIS SUBROUTINE CONVERTS A VECTOR TO ANGULAR QUANTITIES.
C
C          POS = POSITION VECTOR, EQUATORIAL RECTANGULAR
C                COORDINATES (IN)
C          RA  = RIGHT ASCENSION IN HOURS (OUT)
C          DEC = DECLINATION IN DEGREES (OUT)
C
C
      DOUBLE PRECISION POS,RA,DEC,SECCON,XYPROJ,R,D,DSQRT,DATAN2
      DIMENSION POS(3)
C
      DATA SECCON / 206264.8062470964D0 /
C
      XYPROJ = DSQRT(POS(1)**2 + POS(2)**2)
      R = 0.D0
      IF (XYPROJ.GT.0.D0) R = DATAN2(POS(2),POS(1))
      RA = R * SECCON / 54000.0D0
      IF (RA.LT. 0.0D0) RA = RA + 24.0D0
      IF (RA.GE.24.0D0) RA = RA - 24.0D0
      D = DATAN2(POS(3),XYPROJ)
      DEC = D * SECCON / 3600.0D0
      RETURN
C
      END



      SUBROUTINE PROPMO (TJD1,POS1,VEL1,TJD2,POS2)
C
C     THIS SUBROUTINE APPLIES PROPER MOTION, INCLUDING FORESHORTENING
C     EFFECTS, TO A STAR'S POSITION.
C
C          TJD1 = TDB JULIAN DATE OF FIRST EPOCH (IN)
C          POS1 = POSITION VECTOR AT FIRST EPOCH (IN)
C          VEL1 = VELOCITY VECTOR AT FIRST EPOCH (IN)
C          TJD2 = TDB JULIAN DATE OF SECOND EPOCH (IN)
C          POS2 = POSITION VECTOR AT SECOND EPOCH (OUT)
C
C
      DOUBLE PRECISION TJD1,POS1,VEL1,TJD2,POS2
      DIMENSION POS1(3), VEL1(3), POS2(3)
C
      DO 20 J=1,3
   20 POS2(J) = POS1(J) + VEL1(J) * (TJD2 - TJD1)
      RETURN
C
      END



      SUBROUTINE GEOCEN (POS1,PE,POS2,TLIGHT)
C
C     THIS SUBROUTINE MOVES THE ORIGIN OF COORDINATES FROM THE
C     BARYCENTER OF THE SOLAR SYSTEM TO THE CENTER OF MASS OF THE
C     EARTH, I.E., THIS SUBROUTINE CORRECTS FOR PARALLAX.
C
C          POS1   = POSITION VECTOR, REFERRED TO ORIGIN AT SOLAR SYSTEM
C                   BARYCENTER, COMPONENTS IN AU (IN)
C          PE     = POSITION VECTOR OF CENTER OF MASS OF THE EARTH,
C                   REFERRED TO ORIGIN AT SOLAR SYSTEM BARYCENTER,
C                   COMPONENTS IN AU (IN)
C          POS2   = POSITION VECTOR, REFERRED TO ORIGIN AT CENTER OF
C                   MASS OF THE EARTH, COMPONENTS IN AU (OUT)
C          TLIGHT = LIGHT TIME FROM BODY TO EARTH IN DAYS (OUT)
C
C
      DOUBLE PRECISION POS1,PE,POS2,TLIGHT,C,DSQRT
      DIMENSION POS1(3), PE(3), POS2(3)
C
      DATA C / 173.14463348D0 /
C     C = SPEED OF LIGHT IN AU/DAY
C
      DO 20 J=1,3
   20 POS2(J) = POS1(J) - PE(J)
      TLIGHT = DSQRT(POS2(1)**2 + POS2(2)**2 + POS2(3)**2) / C
      RETURN
C
      END



      SUBROUTINE SUNFLD (POS1,PE,POS2)
C
C     SUBROUTINE SUNFLD VERSION 1.
C     THIS SUBROUTINE CORRECTS POSITION VECTOR FOR THE DEFLECTION
C     OF LIGHT IN THE GRAVITATIONAL FIELD OF THE SUN.  SEE MISNER,
C     THORNE, AND WHEELER (1973), GRAVITATION, PP. 184-185.  THIS
C     SUBROUTINE VALID FOR BODIES WITHIN THE SOLAR SYSTEM AS WELL AS
C     FOR STARS.
C
C          POS1 = POSITION VECTOR, REFERRED TO ORIGIN AT CENTER OF MASS
C                 OF THE EARTH, COMPONENTS IN AU (IN)
C          PE   = POSITION VECTOR OF CENTER OF MASS OF THE EARTH,
C                 REFERRED TO ORIGIN AT CENTER OF MASS OF
C                 THE SUN, COMPONENTS IN AU (IN)
C          POS2 = POSITION VECTOR, REFERRED TO ORIGIN AT CENTER OF MASS
C                 OF THE EARTH, CORRECTED FOR GRAVITATIONAL DEFLEC-
C                 TION, COMPONENTS IN AU (OUT)
C
C
      DOUBLE PRECISION POS1,PE,POS2,P1HAT,PEHAT,P1MAG,PEMAG,MAU,GS,C,F,
     .     COSD,SIND,B,BM,PQMAG,ZFINL,ZINIT,XIFINL,XIINIT,
     .     DELPHI,DELPHP,DELP,DABS,DSQRT
      DIMENSION POS1(3), PE(3), POS2(3), P1HAT(3), PEHAT(3)
C
      DATA MAU / 1.49597870D11 /
C     MAU = NUMBER OF METERS PER AU
      DATA GS / 1.32712438D20 /
C     GS = HELIOCENTRIC GRAVITATIONAL CONSTANT
      DATA C / 299792458.0D0 /
C     C = SPEED OF LIGHT
C
      F = 0.0D0
C
C     COMPUTE VECTOR MAGNITUDES AND UNIT VECTORS
      P1MAG = DSQRT (POS1(1)**2 + POS1(2)**2 + POS1(3)**2)
      PEMAG = DSQRT (  PE(1)**2 +   PE(2)**2 +   PE(3)**2)
      DO 20 J=1,3
      P1HAT(J) = POS1(J) / P1MAG
   20 PEHAT(J) =   PE(J) / PEMAG
C
C     COMPUTE GEOMETRICAL QUANTITIES
C     COSD AND SIND ARE COSINE AND SINE OF D, THE ANGULAR SEPARATION
C     OF THE BODY FROM THE SUN AS VIEWED FROM THE EARTH
      COSD = - PEHAT(1)*P1HAT(1) - PEHAT(2)*P1HAT(2) - PEHAT(3)*P1HAT(3)
      IF (DABS(COSD).GT.0.9999999999D0) GO TO 40
      SIND = DSQRT (1.0D0 - COSD**2)
C     B IS THE IMPACT PARAMETER FOR THE RAY
      B = PEMAG * SIND
      BM = B * MAU
C     PQMAG IS THE DISTANCE OF THE BODY FROM THE SUN
      PQMAG = DSQRT (P1MAG**2 + PEMAG**2 - 2.0D0 * P1MAG * PEMAG * COSD)
C
C     COMPUTE DELPHI, THE ANGLE OF DEFLECTION OF THE RAY
      ZFINL = PEMAG * COSD
      ZINIT = -P1MAG + ZFINL
      XIFINL = ZFINL / B
      XIINIT = ZINIT / B
      DELPHI = 2.0D0*GS/(BM*C*C) * (XIFINL / DSQRT (1.0D0 + XIFINL**2)
     .                            - XIINIT / DSQRT (1.0D0 + XIINIT**2))
C
C     COMPUTE DELPHP, THE CHANGE IN ANGLE AS SEEN AT THE EARTH
      DELPHP = DELPHI / (1.0D0 + (PEMAG / PQMAG))
C
C     FIX UP POSITION VECTOR
C     POS2 IS POS1 ROTATED THROUGH ANGLE DELPHP IN PLANE DEFINED
C     BY POS1 AND PE
      F = DELPHP * P1MAG / SIND
   40 DO 50 J=1,3
      DELP = F * (COSD * P1HAT(J) + PEHAT(J))
   50 POS2(J) = POS1(J) + DELP
C
      RETURN
C
      END



      SUBROUTINE ABERAT (POS1,VE,TLIGHT,POS2)
C
C     THIS SUBROUTINE CORRECTS POSITION VECTOR FOR ABERRATION OF LIGHT.
C     ALGORITHM INCLUDES RELATIVISTIC TERMS.  SEE MURRAY (1981)
C     MON. NOTICES ROYAL AST. SOCIETY 195, 639-648.
C
C          POS1   = POSITION VECTOR, REFERRED TO ORIGIN AT CENTER OF
C                   MASS OF THE EARTH, COMPONENTS IN AU (IN)
C          VE     = VELOCITY VECTOR OF CENTER OF MASS OF THE EARTH,
C                   REFERRED TO ORIGIN AT SOLAR SYSTEM BARYCENTER,
C                   COMPONENTS IN AU/DAY (IN)
C          TLIGHT = LIGHT TIME FROM BODY TO EARTH IN DAYS (IN)
C                   IF TLIGHT = 0.0D0, THIS SUBROUTINE WILL COMPUTE
C          POS2   = POSITION VECTOR, REFERRED TO ORIGIN AT CENTER OF
C                   MASS OF THE EARTH, CORRECTED FOR ABERRATION,
C                   COMPONENTS IN AU (OUT)
C
C
      DOUBLE PRECISION POS1,VE,TLIGHT,POS2,C,TL,P1MAG,VEMAG,
     .     BETA,DOT,COSD,GAMMAI,P,Q,R,DSQRT
      DIMENSION POS1(3), VE(3), POS2(3)
C
      DATA C / 173.14463348D0 /
C     C = SPEED OF LIGHT IN AU/DAY
C
      TL = TLIGHT
      P1MAG = TL * C
      IF (TL.NE.0.0D0) GO TO 20
      P1MAG = DSQRT(POS1(1)**2 + POS1(2)**2 + POS1(3)**2)
      TL = P1MAG / C
   20 VEMAG = DSQRT(VE(1)**2 + VE(2)**2 + VE(3)**2)
      BETA = VEMAG / C
      DOT = POS1(1)*VE(1) + POS1(2)*VE(2) + POS1(3)*VE(3)
      COSD = DOT / (P1MAG * VEMAG)
      GAMMAI = DSQRT(1.0D0 - BETA**2)
      P = BETA * COSD
      Q = (1.0D0 + P / (1.0D0 + GAMMAI)) * TL
      R = 1.0D0 + P
C
      DO 30 J=1,3
   30 POS2(J) = (GAMMAI * POS1(J) + Q * VE(J)) / R
      RETURN
C
      END



      SUBROUTINE PRECES (TJD1,POS1,TJD2,POS2)
C
C     THIS SUBROUTINE PRECESSES EQUATORIAL RECTANGULAR COORDINATES FROM
C     ONE EPOCH TO ANOTHER.  THE COORDINATES ARE REFERRED TO THE MEAN
C     EQUATOR AND EQUINOX OF THE TWO RESPECTIVE EPOCHS.  SEE
C     EXPLANATORY SUPPLEMENT TO THE ASTRONOMICAL ALMANAC, PP. 103-104,
C     LIESKE, ET AL. (1977) ASTRONOMY AND ASTROPHYSICS 58, 1-16, AND
C     LIESKE (1979) ASTRONOMY AND ASTROPHYSICS 73, 282-284.
C
C          TJD1 = TDB JULIAN DATE OF FIRST EPOCH (IN)
C          POS1 = POSITION VECTOR, GEOCENTRIC EQUATORIAL RECTANGULAR
C                 COORDINATES, REFERRED TO MEAN EQUATOR AND EQUINOX OF
C                 FIRST EPOCH (IN)
C          TJD2 = TDB JULIAN DATE OF SECOND EPOCH (IN)
C          POS2 = POSITION VECTOR, GEOCENTRIC EQUATORIAL RECTANGULAR
C                 COORDINATES, REFERRED TO MEAN EQUATOR AND EQUINOX OF
C                 SECOND EPOCH (OUT)
C
C
      DOUBLE PRECISION TJD1,TJD2,T0,T,T02,T2,T3,POS1,POS2,SECCON,
     .     ZETA0,ZEE,THETA,CZETA0,SZETA0,CZEE,SZEE,CTHETA,STHETA,
     .     XX,YX,ZX,XY,YY,ZY,XZ,YZ,ZZ,T1LAST,T2LAST,DABS,DCOS,DSIN
      DIMENSION POS1(3), POS2(3)
      SAVE
C
      DATA SECCON / 206264.8062470964D0 /
      DATA T1LAST,T2LAST / 0.0D0,0.0D0 /
C
      IF (DABS(TJD1-T1LAST).LT.1.0D-8.AND.DABS(TJD2-T2LAST).LT.1.0D-8)
     .     GO TO 20
      IF (DABS(TJD1-T2LAST).LT.1.0D-8.AND.DABS(TJD2-T1LAST).LT.1.0D-8)
     .     GO TO 30
C
C     T0 AND T BELOW CORRESPOND TO LIESKE'S BIG T AND LITTLE T
C     TIME SCALE IS ASSUMED TO BE TDB
      T0 = (TJD1 - 2451545.00000000D0) / 36525.0D0
      T = (TJD2 - TJD1) / 36525.0D0
      T02 = T0 * T0
      T2 = T * T
      T3 = T2 * T
C     ZETA0, ZEE, AND THETA BELOW CORRESPOND TO LIESKE'S ZETA-SUB-A,
C     Z-SUB-A, AND THETA-SUB-A
      ZETA0 = (2306.2181D0 + 1.39656D0*T0 - 0.000139D0*T02) * T
     .      + (0.30188D0 - 0.000344D0*T0) * T2
     .      +  0.017998D0 * T3
      ZEE   = (2306.2181D0 + 1.39656D0*T0 - 0.000139D0*T02) * T
     .      + (1.09468D0 + 0.000066D0*T0) * T2
     .      +  0.018203D0 * T3
      THETA = (2004.3109D0 - 0.85330D0*T0 - 0.000217D0*T02) * T
     .      + (-0.42665D0 - 0.000217D0*T0) * T2
     .      -  0.041833D0 * T3
      ZETA0 = ZETA0 / SECCON
      ZEE = ZEE / SECCON
      THETA = THETA / SECCON
      CZETA0 = DCOS(ZETA0)
      SZETA0 = DSIN(ZETA0)
      CZEE = DCOS(ZEE)
      SZEE = DSIN(ZEE)
      CTHETA = DCOS(THETA)
      STHETA = DSIN(THETA)
C
C     PRECESSION ROTATION MATRIX FOLLOWS
      XX = CZETA0*CTHETA*CZEE - SZETA0*SZEE
      YX = -SZETA0*CTHETA*CZEE - CZETA0*SZEE
      ZX = -STHETA*CZEE
      XY = CZETA0*CTHETA*SZEE + SZETA0*CZEE
      YY = -SZETA0*CTHETA*SZEE + CZETA0*CZEE
      ZY = -STHETA*SZEE
      XZ = CZETA0*STHETA
      YZ = -SZETA0*STHETA
      ZZ = CTHETA
      T1LAST = TJD1
      T2LAST = TJD2
C
C     PERFORM ROTATION
   20 POS2(1) = XX*POS1(1) + YX*POS1(2) + ZX*POS1(3)
      POS2(2) = XY*POS1(1) + YY*POS1(2) + ZY*POS1(3)
      POS2(3) = XZ*POS1(1) + YZ*POS1(2) + ZZ*POS1(3)
      GO TO 50
C
C     PERFORM INVERSE ROTATION
   30 POS2(1) = XX*POS1(1) + XY*POS1(2) + XZ*POS1(3)
      POS2(2) = YX*POS1(1) + YY*POS1(2) + YZ*POS1(3)
      POS2(3) = ZX*POS1(1) + ZY*POS1(2) + ZZ*POS1(3)
C
   50 RETURN
C
      END



      SUBROUTINE NUTATE (TJD,POS1,POS2)
C
C     THIS SUBROUTINE NUTATES EQUATORIAL RECTANGULAR COORDINATES FROM
C     MEAN EQUATOR AND EQUINOX OF EPOCH TO TRUE EQUATOR AND EQUINOX OF
C     EPOCH.  SEE EXPLANATORY SUPPLEMENT TO THE ASTRONOMICAL ALMANAC,
C     PP. 114-115.
C
C          TJD    = TDB JULIAN DATE OF EPOCH (IN)
C          POS1   = POSITION VECTOR, GEOCENTRIC EQUATORIAL RECTANGULAR
C                   COORDINATES, REFERRED TO MEAN EQUATOR AND EQUINOX
C                   OF EPOCH (IN)
C          POS2   = POSITION VECTOR, GEOCENTRIC EQUATORIAL RECTANGULAR
C                   COORDINATES, REFERRED TO TRUE EQUATOR AND EQUINOX
C                   OF EPOCH (OUT)
C
C     NOTE:  IF TJD IS NEGATIVE, INVERSE NUTATION (TRUE TO MEAN)
C     IS APPLIED.
C
C
      DOUBLE PRECISION TJD,POS1,POS2,TJD1,SECCON,OBLM,OBLT,EQEQ,
     .     DPSI,DEPS,COBM,SOBM,COBT,SOBT,CPSI,SPSI,
     .     XX,YX,ZX,XY,YY,ZY,XZ,YZ,ZZ,DABS,DCOS,DSIN
      DIMENSION POS1(3), POS2(3)
C
      DATA SECCON / 206264.8062470964D0 /
C
      TJD1 = DABS(TJD)
C
      CALL ETILT (TJD1,OBLM,OBLT,EQEQ,DPSI,DEPS)
      OBLM = OBLM * 3600.0D0 / SECCON
      OBLT = OBLT * 3600.0D0 / SECCON
      DPSI = DPSI / SECCON
      DEPS = DEPS / SECCON
      COBM = DCOS(OBLM)
      SOBM = DSIN(OBLM)
      COBT = DCOS(OBLT)
      SOBT = DSIN(OBLT)
      CPSI = DCOS(DPSI)
      SPSI = DSIN(DPSI)
C
C     NUTATION ROTATION MATRIX FOLLOWS
      XX = CPSI
      YX = -SPSI*COBM
      ZX = -SPSI*SOBM
      XY = SPSI*COBT
      YY = CPSI*COBM*COBT + SOBM*SOBT
      ZY = CPSI*SOBM*COBT - COBM*SOBT
      XZ = SPSI*SOBT
      YZ = CPSI*COBM*SOBT - SOBM*COBT
      ZZ = CPSI*SOBM*SOBT + COBM*COBT
   10 IF (TJD.LT.0.0D0) GO TO 30
C
C     PERFORM ROTATION
   20 POS2(1) = XX*POS1(1) + YX*POS1(2) + ZX*POS1(3)
      POS2(2) = XY*POS1(1) + YY*POS1(2) + ZY*POS1(3)
      POS2(3) = XZ*POS1(1) + YZ*POS1(2) + ZZ*POS1(3)
      GO TO 50
C
C     PERFORM INVERSE ROTATION
   30 POS2(1) = XX*POS1(1) + XY*POS1(2) + XZ*POS1(3)
      POS2(2) = YX*POS1(1) + YY*POS1(2) + YZ*POS1(3)
      POS2(3) = ZX*POS1(1) + ZY*POS1(2) + ZZ*POS1(3)
C
   50 RETURN
C
      END



      SUBROUTINE SPIN (ST,POS1,POS2)
C
C     THIS SUBROUTINE TRANSFORMS GEOCENTRIC RECTANGULAR COORDINATES
C     FROM ROTATING SYSTEM BASED ON ROTATIONAL EQUATOR AND ORTHOGONAL
C     REFERENCE MERIDIAN TO NON-ROTATING SYSTEM BASED ON TRUE EQUATOR
C     AND EQUINOX OF DATE.
C
C          ST     = LOCAL APPARENT SIDEREAL TIME AT REFERENCE MERIDIAN
C                   IN HOURS (IN)
C          POS1   = VECTOR IN GEOCENTRIC RECTANGULAR
C                   ROTATING SYSTEM, REFERRED TO ROTATIONAL EQUATOR
C                   AND ORTHOGONAL REFERENCE MERIDIAN (IN)
C          POS2   = VECTOR IN GEOCENTRIC RECTANGULAR
C                   NON-ROTATING SYSTEM, REFERRED TO TRUE EQUATOR
C                   AND EQUINOX OF DATE (OUT)
C
C
      DOUBLE PRECISION ST,POS1,POS2,SECCON,TLAST,STR,COSST,SINST,
     .     XX,YX,ZX,XY,YY,ZY,XZ,YZ,ZZ,DABS,DCOS,DSIN
      DIMENSION POS1(3), POS2(3)
      SAVE
C
      DATA SECCON / 206264.8062470964D0 /
      DATA TLAST / -999.0D0 /
C
      IF (DABS(ST-TLAST).LT.1.0D-12) GO TO 10
C
      STR   = ST * 15.0D0 * 3600.0D0 / SECCON
      COSST = DCOS(STR)
      SINST = DSIN(STR)
C
C     SIDEREAL TIME ROTATION MATRIX FOLLOWS
      XX =  COSST
      YX = -SINST
      ZX =  0.0D0
      XY =  SINST
      YY =  COSST
      ZY =  0.0D0
      XZ =  0.0D0
      YZ =  0.0D0
      ZZ =  1.0D0
      TLAST = ST
   10 CONTINUE
C
C     PERFORM ROTATION
   20 POS2(1) = XX*POS1(1) + YX*POS1(2) + ZX*POS1(3)
      POS2(2) = XY*POS1(1) + YY*POS1(2) + ZY*POS1(3)
      POS2(3) = XZ*POS1(1) + YZ*POS1(2) + ZZ*POS1(3)
C
   50 RETURN
C
      END



      SUBROUTINE WOBBLE (X,Y,POS1,POS2)
C
C     THIS SUBROUTINE CORRECTS EARTH-FIXED GEOCENTRIC RECTANGULAR
C     COORDINATES FOR POLAR MOTION.  IT TRANSFORMS A VECTOR FROM
C     EARTH-FIXED GEOGRAPHIC SYSTEM TO ROTATING SYSTEM BASED ON
C     ROTATIONAL EQUATOR AND ORTHOGONAL GREENWICH MERIDIAN THROUGH
C     AXIS OF ROTATION.
C
C          X      = CONVENTIONALLY-DEFINED X COORDINATE OF CELESTIAL
C                   EPHEMERIS POLE WITH RESPECT TO IERS REFERENCE
C                   POLE, IN ARCSECONDS (IN)
C          Y      = CONVENTIONALLY-DEFINED Y COORDINATE OF CELESTIAL
C                   EPHEMERIS POLE WITH RESPECT TO IERS REFERENCE
C                   POLE, IN ARCSECONDS (IN)
C          POS1   = VECTOR IN GEOCENTRIC RECTANGULAR
C                   EARTH-FIXED SYSTEM, REFERRED TO GEOGRAPHIC
C                   EQUATOR AND GREENWICH MERIDIAN (IN)
C          POS2   = VECTOR IN GEOCENTRIC RECTANGULAR
C                   ROTATING SYSTEM, REFERRED TO ROTATIONAL EQUATOR
C                   AND ORTHOGONAL GREENWICH MERIDIAN (OUT)
C
C
      DOUBLE PRECISION X,Y,POS1,POS2,SECCON,XPOLE,YPOLE,
     .     XX,YX,ZX,XY,YY,ZY,XZ,YZ,ZZ
      DIMENSION POS1(3), POS2(3)
C
      DATA SECCON / 206264.8062470964D0 /
C
      XPOLE = X / SECCON
      YPOLE = Y / SECCON
C
C     WOBBLE ROTATION MATRIX FOLLOWS
      XX =  1.0D0
      YX =  0.0D0
      ZX = -XPOLE
      XY =  0.0D0
      YY =  1.0D0
      ZY =  YPOLE
      XZ =  XPOLE
      YZ = -YPOLE
      ZZ =  1.0D0
   10 CONTINUE
C
C     PERFORM ROTATION
   20 POS2(1) = XX*POS1(1) + YX*POS1(2) + ZX*POS1(3)
      POS2(2) = XY*POS1(1) + YY*POS1(2) + ZY*POS1(3)
      POS2(3) = XZ*POS1(1) + YZ*POS1(2) + ZZ*POS1(3)
C
   50 RETURN
C
      END



      SUBROUTINE TERRA (GLON,GLAT,HT,ST,POS,VEL)
C
C     THIS SUBROUTINE COMPUTES THE POSITION AND VELOCITY VECTORS OF
C     A TERRESTRIAL OBSERVER WITH RESPECT TO THE CENTER OF THE EARTH.
C
C          GLON   = LONGITUDE OF OBSERVER WITH RESPECT TO REFERENCE
C                   MERIDIAN (EAST +) IN DEGREES (IN)
C          GLAT   = GEODETIC LATITUDE (NORTH +) OF OBSERVER
C                   IN DEGREES (IN)
C          HT     = HEIGHT OF OBSERVER IN METERS (IN)
C          ST     = LOCAL APPARENT SIDEREAL TIME AT REFERENCE MERIDIAN
C                   IN HOURS (IN)
C          POS    = POSITION VECTOR OF OBSERVER WITH RESPECT TO CENTER
C                   OF EARTH, EQUATORIAL RECTANGULAR COORDINATES,
C                   REFERRED TO TRUE EQUATOR AND EQUINOX OF DATE,
C                   COMPONENTS IN AU (OUT)
C          VEL    = VELOCITY VECTOR OF OBSERVER WITH RESPECT TO CENTER
C                   OF EARTH, EQUATORIAL RECTANGULAR COORDINATES,
C                   REFERRED TO TRUE EQUATOR AND EQUINOX OF DATE,
C                   COMPONENTS IN AU/DAY (OUT)
C
C     NOTE:  IF REFERENCE MERIDIAN IS GREENWICH AND ST=0.D0, POS
C     IS EFFECTIVELY REFERRED TO EQUATOR AND GREENWICH.
C
C
      DOUBLE PRECISION GLON,GLAT,HT,ST,POS,VEL,SECCON,ERAD,F,OMEGA,
     .     KMAU,DF2,PHI,SINPHI,COSPHI,C,S,ACH,ASH,STLOCL,SINST,COSST,
     .     DSQRT,DCOS,DSIN
      DIMENSION POS(3), VEL(3)
C
      DATA SECCON / 206264.8062470964D0 /
C
      DATA ERAD / 6378.140D0 /,   F / 0.00335281D0 /
C     ERAD = RADIUS OF EARTH IN KM, F = EARTH ELLIPSOID FLATTENING
      DATA OMEGA / 7.292115D-5 /
C     OMEGA = ROTATIONAL ANGULAR VELOCITY OF EARTH IN RADIANS/SEC
      DATA KMAU / 1.49597870D8 /
C     KMAU = KILOMETERS PER ASTRONOMICAL UNIT
C
C     COMPUTE PARAMETERS RELATING TO GEODETIC TO GEOCENTRIC CONVERSION
      DF2 = (1.0D0 - F)**2
      PHI = GLAT * 3600.0D0 / SECCON
      SINPHI = DSIN(PHI)
      COSPHI = DCOS(PHI)
      C = 1.0D0 / DSQRT ( COSPHI**2 + DF2 * SINPHI**2 )
      S = DF2 * C
      ACH = ERAD * C + HT/1000.0D0
      ASH = ERAD * S + HT/1000.0D0
C
C     COMPUTE LOCAL SIDEREAL TIME FACTORS
      STLOCL = (ST * 54000.0D0 + GLON * 3600.0D0) / SECCON
      SINST = DSIN(STLOCL)
      COSST = DCOS(STLOCL)
C
C     COMPUTE POSITION VECTOR COMPONENTS IN KM
      POS(1) = ACH * COSPHI * COSST
      POS(2) = ACH * COSPHI * SINST
      POS(3) = ASH * SINPHI
C
C     COMPUTE VELOCITY VECTOR COMPONENTS IN KM/SEC
      VEL(1) = -OMEGA * ACH * COSPHI * SINST
      VEL(2) =  OMEGA * ACH * COSPHI * COSST
      VEL(3) =  0.0D0
C
C     CONVERT POSITION AND VELOCITY COMPONENTS TO AU AND AU/DAY
      DO 20 J=1,3
      POS(J) = POS(J) / KMAU
      VEL(J) = VEL(J) / KMAU * 86400.0D0
   20 CONTINUE
C
      RETURN
C
      END



      SUBROUTINE TIMES (TDBJD,TTJD,SECDIF)
C
C     THIS SUBROUTINE COMPUTES THE TERRESTRIAL TIME (TT) JULIAN DATE
C     CORRESPONDING TO A BARYCENTRIC DYNAMICAL TIME (TDB) JULIAN DATE.
C     EXPRESSIONS USED IN THIS VERSION ARE APPROXIMATIONS RESULTING
C     IN ACCURACIES OF ABOUT 20 MICROSECONDS.  SEE EXPLANATORY
C     SUPPLEMENT TO THE ASTRONOMICAL ALMANAC, PP. 42-44 AND 316.
C
C          TDBJD  = TDB JULIAN DATE (IN)
C          TTJD   = TT JULIAN DATE (OUT)
C          SECDIF = DIFFERENCE TDBJD-TTJD, IN SECONDS (OUT)
C
C
      DOUBLE PRECISION TDBJD,TTJD,SECDIF,SECCON,REV,T0,ECC,
     .     TDAYS,M,L,LJ,E,DSIN
C
      DATA SECCON / 206264.8062470964D0 /,   REV / 1296000.D0 /
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
      DATA ECC / 0.01671022D0 /
C     ECC = ECCENTRICITY OF EARTH-MOON BARYCENTER ORBIT
C
      TDAYS = TDBJD - T0
      M  = ( 357.51716D0 + 0.985599987D0 * TDAYS ) * 3600.D0
      L  = ( 280.46435D0 + 0.985609100D0 * TDAYS ) * 3600.D0
      LJ = (  34.40438D0 + 0.083086762D0 * TDAYS ) * 3600.D0
      M  = DMOD (  M, REV ) / SECCON
      L  = DMOD (  L, REV ) / SECCON
      LJ = DMOD ( LJ, REV ) / SECCON
      E  = M + ECC * DSIN ( M ) + 0.5D0 * ECC**2 * DSIN ( 2.D0 * M )
      SECDIF =   1.658D-3 * DSIN ( E )
     .         + 20.73D-6 * DSIN ( L - LJ )
      TTJD = TDBJD - SECDIF / 86400.D0
C
      RETURN
C
      END



      SUBROUTINE ETILT (TJD,OBLM,OBLT,EQEQ,DPSI,DEPS)
C
C     THIS SUBROUTINE COMPUTES QUANTITIES RELATED TO THE ORIENTATION
C     OF THE EARTH'S ROTATION AXIS AT JULIAN DATE TJD.
C     IMPLEMENTS EQUATION OF THE EQUINOXES DEFINITION AS PER
C     IAU RESOLUTION C7 OF 1994.
C
C          TJD    = TDB JULIAN DATE FOR ORIENTATION PARAMETERS (IN)
C          OBLM   = MEAN OBLIQUITY OF THE ECLIPTIC IN DEGREES AT
C                   DATE TJD (OUT)
C          OBLT   = TRUE OBLIQUITY OF THE ECLIPTIC IN DEGREES AT
C                   DATE TJD (OUT)
C          EQEQ   = EQUATION OF THE EQUINOXES IN TIME SECONDS AT
C                   DATE TJD (OUT)
C          DPSI   = NUTATION IN LONGITUDE IN ARCSECONDS AT
C                   DATE TJD (OUT)
C          DEPS   = NUTATION IN OBLIQUITY IN ARCSECONDS AT
C                   DATE TJD (OUT)
C
C
      DOUBLE PRECISION TJD,T0,T,T2,T3,TLAST,OBLM,OBLT,EQEQ,DPSI,DEPS,
     .     SECCON,OBM,OBT,EE,DELPSI,DELEPS,PSI,EPS,X,OMEGA,
     .     DDPSI,DDEPS,PSICOR,EPSCOR,DABS,DCOS
      SAVE
C
      DATA T0 / 2451545.00000000D0 /
C     T0 = TDB JULIAN DATE OF EPOCH J2000.0
      DATA SECCON / 206264.8062470964D0 /
      DATA TLAST / 0.0D0 /,   PSICOR,EPSCOR / 0.0D0,0.0D0 /
C
      T = (TJD - T0) / 36525.0D0
      T2 = T * T
      T3 = T2 * T
C
C     OBTAIN NUTATION PARAMETERS IN ARCSECONDS
      IF (DABS(TJD-TLAST).LT.1.0D-8) GO TO 20
      CALL FUNARG (T,X,X,X,X,OMEGA)
      CALL NOD (T,DELPSI,DELEPS)
      TLAST = TJD
   20 PSI = DELPSI + PSICOR
      EPS = DELEPS + EPSCOR
C
C     COMPUTE MEAN OBLIQUITY OF THE ECLIPTIC IN ARCSECONDS
      OBM = 84381.4480D0 - 46.8150D0*T - 0.00059D0*T2
     .    + 0.001813D0*T3
C
C     COMPUTE TRUE OBLIQUITY OF THE ECLIPTIC IN ARCSECONDS
      OBT = OBM + EPS
C
C     COMPUTE EQUATION OF THE EQUINOXES IN ARCSECONDS, TIME SECONDS
C     (IAU 1994 AND IERS 1996 DEFINITION)
      EE = PSI * DCOS (OBM/SECCON)
     .     + 0.00264D0 * DSIN(OMEGA) + 0.000063D0 * DSIN(2.D0*OMEGA)
      EE = EE / 15.D0
C
C     CONVERT OBLIQUITY VALUES TO DEGREES
      OBM = OBM / 3600.0D0
      OBT = OBT / 3600.0D0
C
      OBLM = OBM
      OBLT = OBT
      EQEQ = EE
      DPSI = PSI
      DEPS = EPS
C
      RETURN
C
C
      ENTRY CELPOL (DDPSI,DDEPS)
C
C     THIS ENTRY ALLOWS FOR THE SPECIFICATION OF CELESTIAL POLE
C     OFFSETS FOR HIGH-PRECISION APPLICATIONS.  THESE ARE ADDED
C     TO THE NUTATION PARAMETERS DELTA PSI AND DELTA EPSILON.
C     DAILY VALUES OF THE OFFSETS ARE PUBLISHED, FOR EXAMPLE,
C     IN IERS BULLETINS A AND B.  THIS ENTRY, IF USED, SHOULD
C     BE CALLED BEFORE ANY OTHER ROUTINES FOR A GIVEN DATE.
C     VALUES OF THE POLE OFFSETS SPECIFIED VIA A CALL TO THIS
C     ENTRY WILL BE USED UNTIL EXPLICITLY CHANGED.
C
C          DDPSI  = VALUE OF OFFSET IN DELTA PSI (DPSI)
C                   IN ARCSECONDS (IN)
C          DDEPS  = VALUE OF OFFSET IN DELTA EPSILON (DEPS)
C                   IN ARCSECONDS (IN)
C
C
      PSICOR = DDPSI
      EPSCOR = DDEPS
      RETURN
C
      END



      SUBROUTINE FUNARG (T,EL,ELPRIM,F,D,OMEGA)
C
C     THIS SUBROUTINE COMPUTES FUNDAMENTAL ARGUMENTS (MEAN ELEMENTS)
C     OF THE SUN AND MOON.  SEE SEIDELMANN (1982) CELESTIAL
C     MECHANICS 27, 79-106 (1980 IAU THEORY OF NUTATION).
C
C          T      = TDB TIME IN JULIAN CENTURIES SINCE J2000.0 (IN)
C          EL     = MEAN ANOMALY OF THE MOON IN RADIANS
C                   AT DATE TJD (OUT)
C          ELPRIM = MEAN ANOMALY OF THE SUN IN RADIANS
C                   AT DATE TJD (OUT)
C          F      = MEAN LONGITUDE OF THE MOON MINUS MEAN LONGITUDE
C                   OF THE MOON'S ASCENDING NODE IN RADIANS
C                   AT DATE TJD (OUT)
C          D      = MEAN ELONGATION OF THE MOON FROM THE SUN IN
C                   RADIANS AT DATE TJD (OUT)
C          OMEGA  = MEAN LONGITUDE OF THE MOON'S ASCENDING NODE
C                   IN RADIANS AT DATE TJD (OUT)
C
C
      DOUBLE PRECISION T,TLAST,EL,ELPRIM,F,D,OMEGA,ARG,SECCON,REV,DMOD
      DIMENSION ARG(5)
      SAVE
C
      DATA SECCON / 206264.8062470964D0 /,   REV / 1296000.D0 /
      DATA TLAST / 0.0D0 /
C
      IF (DABS(T-TLAST).LT.1.0D-12) GO TO 40
C
C     COMPUTE FUNDAMENTAL ARGUMENTS IN ARCSECONDS
C
      ARG(1) = ((+0.064D0 * T + 31.310D0) * T + 715922.633D0) * T
     .     + 485866.733D0 + DMOD(1325.0D0*T,1.0D0) * REV
      ARG(1) = DMOD(ARG(1),REV)
C
      ARG(2) = ((-0.012D0 * T - 0.577D0) * T + 1292581.224D0) * T
     .     + 1287099.804D00 + DMOD(99.0D0*T,1.0D0) * REV
      ARG(2) = DMOD(ARG(2),REV)
C
      ARG(3) = ((+0.011D0 * T - 13.257D0) * T + 295263.137D0) * T
     .     + 335778.877D0 + DMOD(1342.0D0*T,1.0D0) * REV
      ARG(3) = DMOD(ARG(3),REV)
C
      ARG(4) = ((+0.019D0 * T - 6.891D0) * T + 1105601.328D0) * T
     .     + 1072261.307D0 + DMOD(1236.0D0*T,1.0D0) * REV
      ARG(4) = DMOD(ARG(4),REV)
C
      ARG(5) = ((0.008D0 * T + 7.455D0) * T - 482890.539D0) * T
     .     + 450160.280D0  - DMOD(5.0D0*T,1.0D0) * REV
      ARG(5) = DMOD(ARG(5),REV)
C
C     CONVERT ARGUMENTS TO RADIANS
      DO 30 I=1,5
      ARG(I) = DMOD(ARG(I),REV)
      IF (ARG(I).LT.0.D0) ARG(I) = ARG(I) + REV
      ARG(I) = ARG(I) / SECCON
   30 CONTINUE
      TLAST = T
C
   40 EL     = ARG(1)
      ELPRIM = ARG(2)
      F      = ARG(3)
      D      = ARG(4)
      OMEGA  = ARG(5)
C
      RETURN
C
      END



      SUBROUTINE REFRAC (HEIGHT,ZDOBS,REFR)
C
C     THIS SUBROUTINE COMPUTES ATMOSPHERIC REFRACTION IN ZENITH
C     DISTANCE.  THIS VERSION COMPUTES APPROXIMATE REFRACTION FOR
C     OPTICAL WAVELENGTHS.  IT CAN BE USED FOR PLANNING OBSERVATIONS
C     OR TELESCOPE POINTING, BUT SHOULD NOT BE USED FOR THE REDUCTION
C     OF PRECISE OBSERVATIONS.  BASIC ALGORITHM IS DESCRIBED IN THE
C     EXPLANATORY SUPPLEMENT TO THE ASTRONOMICAL ALMANAC, P. 144,
C     AND IS AN ADAPTATION OF A FORMULA IN BENNETT (1982), JOURNAL
C     OF NAVIGATION (ROYAL INSTITUTE) 35, 255-259.
C
C          HEIGHT = HEIGHT OF OBSERVER IN METERS (IN)
C          ZDOBS  = OBSERVED ZENITH DISTANCE IN DEGREES (IN)
C          REFR   = ATMOSPHERIC REFRACTION IN DEGREES (OUT)
C
C     NOTE:  HEIGHT IS NOT USED IF ENTRY REFDAT HAS BEEN CALLED
C     TO SPECIFY ATMOSPHERIC PRESSURE.
C
C
      DOUBLE PRECISION HEIGHT,ZDOBS,REFR,PI,S,DEGRAD,
     .     POBS,TOBS,DOBS,WLOBS,OBSP,OBST,OBSD,OBSWL,P,T,D,WL,H,R,
     .     DEXP,DTAN
      SAVE
C
      DATA PI / 3.141592653589793D0 /
      DATA POBS, TOBS, DOBS, WLOBS / 4 * -999.D0 /
      DATA S / 9.1D3 /
C     S IS APPROXIMATE SCALE HEIGHT OF ATMOSPHERE IN METERS
C
      DEGRAD = PI / 180.D0
C
C     COMPUTE REFRACTION ONLY FOR ZENITH DISTANCES
C     BETWEEN 0.1 AND 91 DEGREES
      IF ( ZDOBS .LT. 0.1D0 .OR. ZDOBS .GT. 91.D0 ) THEN
          REFR = 0.D0
          GO TO 77
      END IF
C
C     IF OBSERVED WEATHER DATA ARE AVAILABLE, USE THEM
C     OTHERWISE, USE CRUDE ESTIMATES OF AVERAGE CONDITIONS
      IF ( POBS .GE. 1.D0 .AND. TOBS .GT. -100.D0 ) THEN
          P  = POBS
          T  = TOBS
          D  = DOBS
          WL = WLOBS
      ELSE
          P  = 1010.D0 * DEXP ( -HEIGHT / S )
          T  = 10.D0
          D  =  0.D0
          WL =  0.5D0
      END IF
C     D AND WL NOT USED IN THIS VERSION
C
      H = 90.D0 - ZDOBS
      R = 0.016667D0 / DTAN ( ( H +  7.31D0 / ( H + 4.4D0 ) ) * DEGRAD )
      REFR = R * ( 0.28D0 * P / ( T + 273.D0 ) )
C
  77  RETURN
C
C
      ENTRY REFDAT (OBSP,OBST,OBSD,OBSWL)
C
C     THIS ENTRY ALLOWS FOR THE SPECIFICATION OF WEATHER OBSERVATIONS
C     AND OTHER DATA TO BE USED IN THE ATMOSPHERIC REFRACTION
C     CALCULATION.  THIS ENTRY, IF USED, SHOULD BE CALLED BEFORE
C     SUBROUTINE REFRAC OR ZDAZ FOR A GIVEN DATE/TIME.  DATA SPECIFIED
C     VIA A CALL TO THIS ENTRY WILL BE USED UNTIL EXPLICITLY CHANGED.
C
C          OBSP   = OBSERVED ATMOSPHERIC PRESSURE IN MILLIBARS (IN)
C          OBST   = OBSERVED TEMPERATURE IN DEGREES CELSIUS (IN)
C          OBSD   = OBSERVED DEW POINT IN DEGREES CELSIUS (IN)
C          OBSWL  = OBSERVING WAVELENGTH IN MICRONS (IN)
C
C     NOTE:  OBSD AND OBSWL ARE NOT USED IN THIS VERSION'S REFRACTION
C     ALGORITHM, AND CAN BE SET TO ANY VALUE.
C
C
      POBS  = OBSP
      TOBS  = OBST
      DOBS  = OBSD
      WLOBS = OBSWL
      RETURN
C
      END



      SUBROUTINE JULDAT (I,M,K,H,TJD)
C
C     THIS SUBROUTINE COMPUTES JULIAN DATE, GIVEN CALENDAR DATE AND
C     TIME.  INPUT CALENDAR DATE MUST BE GREGORIAN.  INPUT TIME VALUE
C     CAN BE IN ANY UT-LIKE TIME SCALE (UTC, UT1, TT, ETC.) - OUTPUT
C     JULIAN DATE WILL HAVE SAME BASIS.  ALGORITHM BY FLIEGEL AND
C     VAN FLANDERN.
C
C          I      = YEAR (IN)
C          M      = MONTH NUMBER (IN)
C          K      = DAY OF MONTH (IN)
C          H      = UT HOURS (IN)
C          TJD    = JULIAN DATE (OUT)
C
C
      DOUBLE PRECISION H,TJD
C
C     JD=JULIAN DAY NO FOR DAY BEGINNING AT GREENWICH NOON ON GIVEN DATE
      JD = K-32075+1461*(I+4800+(M-14)/12)/4+367*(M-2-(M-14)/12*12)/12
     .     -3*((I+4900+(M-14)/12)/100)/4
      TJD = JD - 0.5D0 + H/24.D0
C
      RETURN
      END



      SUBROUTINE CALDAT (TJD,I,M,K,H)
C
C     THIS SUBROUTINE COMPUTES CALENDAR DATE AND TIME, GIVEN JULIAN
C     DATE.  INPUT JULIAN DATE CAN BE BASED ON ANY UT-LIKE TIME SCALE
C     (UTC, UT1, TT, ETC.) - OUTPUT TIME VALUE WILL HAVE SAME BASIS.
C     OUTPUT CALENDAR DATE WILL BE GREGORIAN.  ALGORITHM BY FLIEGEL AND
C     VAN FLANDERN.
C
C          TJD    = JULIAN DATE (IN)
C          I      = YEAR (OUT)
C          M      = MONTH NUMBER (OUT)
C          K      = DAY OF MONTH (OUT)
C          H      = UT HOURS (OUT)
C
C
      DOUBLE PRECISION TJD,H,DJD,DMOD
C
      DJD = TJD + 0.5D0
      JD = DJD
      H = DMOD (DJD,1.D0) * 24.D0
C     JD=JULIAN DAY NO FOR DAY BEGINNING AT GREENWICH NOON ON GIVEN DATE
      L = JD + 68569
      N = 4*L/146097
      L = L - (146097*N+3)/4
C     I=YEAR, M=MONTH, K=DAY
      I = 4000*(L+1)/1461001
      L = L - 1461*I/4 + 31
      M = 80*L/2447
      K = L - 2447*M/80
      L = M / 11
      M = M + 2 - 12*L
      I = 100*(N-49) + I + L
C
      RETURN
      END



      SUBROUTINE NOD (T,DPSI,DEPS)
C
C     SUBROUTINE NOD VERSION 1.
C     THIS SUBROUTINE EVALUATES THE NUTATION SERIES AND RETURNS THE
C     VALUES FOR NUTATION IN LONGITUDE AND NUTATION IN OBLIQUITY.
C     WAHR NUTATION SERIES FOR AXIS B FOR GILBERT & DZIEWONSKI EARTH
C     MODEL 1066A.  SEE SEIDELMANN (1982) CELESTIAL MECHANICS 27,
C     79-106.  1980 IAU THEORY OF NUTATION.
C
C          T    = TDB TIME IN JULIAN CENTURIES SINCE J2000.0 (IN)
C          DPSI = NUTATION IN LONGITUDE IN ARCSECONDS (OUT)
C          DEPS = NUTATION IN OBLIQUITY IN ARCSECONDS (OUT)
C
C
      DOUBLE PRECISION T,DPSI,DEPS,L,LP,F,D,OM,ARG,DBLE,DSIN,DCOS
      DIMENSION X(9,106),X1(90),X2(90),X3(90),X4(90),X5(90),X6(90),
     .     X7(90),X8(90),X9(90),XA(90),XB(54)
      EQUIVALENCE(X(1,  1),X1(1))
      EQUIVALENCE(X(1, 11),X2(1))
      EQUIVALENCE(X(1, 21),X3(1))
      EQUIVALENCE(X(1, 31),X4(1))
      EQUIVALENCE(X(1, 41),X5(1))
      EQUIVALENCE(X(1, 51),X6(1))
      EQUIVALENCE(X(1, 61),X7(1))
      EQUIVALENCE(X(1, 71),X8(1))
      EQUIVALENCE(X(1, 81),X9(1))
      EQUIVALENCE(X(1, 91),XA(1))
      EQUIVALENCE(X(1,101),XB(1))
C
C***********************************************************************
C
C
C     TABLE OF MULTIPLES OF ARGUMENTS AND COEFFICIENTS
C
C                   MULTIPLE OF            LONGITUDE        OBLIQUITY
C              L    L'   F    D  OMEGA   COEFF. OF SIN    COEFF. OF COS
      DATA X1/ 0.,  0.,  0.,  0.,  1., -171996., -174.2,  92025.,  8.9,
     .         0.,  0.,  2., -2.,  2.,  -13187.,   -1.6,   5736., -3.1,
     .         0.,  0.,  2.,  0.,  2.,   -2274.,   -0.2,    977., -0.5,
     .         0.,  0.,  0.,  0.,  2.,    2062.,    0.2,   -895.,  0.5,
     .         0.,  1.,  0.,  0.,  0.,    1426.,   -3.4,     54., -0.1,
     .         1.,  0.,  0.,  0.,  0.,     712.,    0.1,     -7.,  0.0,
     .         0.,  1.,  2., -2.,  2.,    -517.,    1.2,    224., -0.6,
     .         0.,  0.,  2.,  0.,  1.,    -386.,   -0.4,    200.,  0.0,
     .         1.,  0.,  2.,  0.,  2.,    -301.,    0.0,    129., -0.1,
     .         0., -1.,  2., -2.,  2.,     217.,   -0.5,    -95.,  0.3/
      DATA X2/ 1.,  0.,  0., -2.,  0.,    -158.,    0.0,     -1.,  0.0,
     .         0.,  0.,  2., -2.,  1.,     129.,    0.1,    -70.,  0.0,
     .        -1.,  0.,  2.,  0.,  2.,     123.,    0.0,    -53.,  0.0,
     .         1.,  0.,  0.,  0.,  1.,      63.,    0.1,    -33.,  0.0,
     .         0.,  0.,  0.,  2.,  0.,      63.,    0.0,     -2.,  0.0,
     .        -1.,  0.,  2.,  2.,  2.,     -59.,    0.0,     26.,  0.0,
     .        -1.,  0.,  0.,  0.,  1.,     -58.,   -0.1,     32.,  0.0,
     .         1.,  0.,  2.,  0.,  1.,     -51.,    0.0,     27.,  0.0,
     .         2.,  0.,  0., -2.,  0.,      48.,    0.0,      1.,  0.0,
     .        -2.,  0.,  2.,  0.,  1.,      46.,    0.0,    -24.,  0.0/
      DATA X3/ 0.,  0.,  2.,  2.,  2.,     -38.,    0.0,     16.,  0.0,
     .         2.,  0.,  2.,  0.,  2.,     -31.,    0.0,     13.,  0.0,
     .         2.,  0.,  0.,  0.,  0.,      29.,    0.0,     -1.,  0.0,
     .         1.,  0.,  2., -2.,  2.,      29.,    0.0,    -12.,  0.0,
     .         0.,  0.,  2.,  0.,  0.,      26.,    0.0,     -1.,  0.0,
     .         0.,  0.,  2., -2.,  0.,     -22.,    0.0,      0.,  0.0,
     .        -1.,  0.,  2.,  0.,  1.,      21.,    0.0,    -10.,  0.0,
     .         0.,  2.,  0.,  0.,  0.,      17.,   -0.1,      0.,  0.0,
     .         0.,  2.,  2., -2.,  2.,     -16.,    0.1,      7.,  0.0,
     .        -1.,  0.,  0.,  2.,  1.,      16.,    0.0,     -8.,  0.0/
      DATA X4/ 0.,  1.,  0.,  0.,  1.,     -15.,    0.0,      9.,  0.0,
     .         1.,  0.,  0., -2.,  1.,     -13.,    0.0,      7.,  0.0,
     .         0., -1.,  0.,  0.,  1.,     -12.,    0.0,      6.,  0.0,
     .         2.,  0., -2.,  0.,  0.,      11.,    0.0,      0.,  0.0,
     .        -1.,  0.,  2.,  2.,  1.,     -10.,    0.0,      5.,  0.0,
     .         1.,  0.,  2.,  2.,  2.,      -8.,    0.0,      3.,  0.0,
     .         0., -1.,  2.,  0.,  2.,      -7.,    0.0,      3.,  0.0,
     .         0.,  0.,  2.,  2.,  1.,      -7.,    0.0,      3.,  0.0,
     .         1.,  1.,  0., -2.,  0.,      -7.,    0.0,      0.,  0.0,
     .         0.,  1.,  2.,  0.,  2.,       7.,    0.0,     -3.,  0.0/
      DATA X5/-2.,  0.,  0.,  2.,  1.,      -6.,    0.0,      3.,  0.0,
     .         0.,  0.,  0.,  2.,  1.,      -6.,    0.0,      3.,  0.0,
     .         2.,  0.,  2., -2.,  2.,       6.,    0.0,     -3.,  0.0,
     .         1.,  0.,  0.,  2.,  0.,       6.,    0.0,      0.,  0.0,
     .         1.,  0.,  2., -2.,  1.,       6.,    0.0,     -3.,  0.0,
     .         0.,  0.,  0., -2.,  1.,      -5.,    0.0,      3.,  0.0,
     .         0., -1.,  2., -2.,  1.,      -5.,    0.0,      3.,  0.0,
     .         2.,  0.,  2.,  0.,  1.,      -5.,    0.0,      3.,  0.0,
     .         1., -1.,  0.,  0.,  0.,       5.,    0.0,      0.,  0.0,
     .         1.,  0.,  0., -1.,  0.,      -4.,    0.0,      0.,  0.0/
      DATA X6/ 0.,  0.,  0.,  1.,  0.,      -4.,    0.0,      0.,  0.0,
     .         0.,  1.,  0., -2.,  0.,      -4.,    0.0,      0.,  0.0,
     .         1.,  0., -2.,  0.,  0.,       4.,    0.0,      0.,  0.0,
     .         2.,  0.,  0., -2.,  1.,       4.,    0.0,     -2.,  0.0,
     .         0.,  1.,  2., -2.,  1.,       4.,    0.0,     -2.,  0.0,
     .         1.,  1.,  0.,  0.,  0.,      -3.,    0.0,      0.,  0.0,
     .         1., -1.,  0., -1.,  0.,      -3.,    0.0,      0.,  0.0,
     .        -1., -1.,  2.,  2.,  2.,      -3.,    0.0,      1.,  0.0,
     .         0., -1.,  2.,  2.,  2.,      -3.,    0.0,      1.,  0.0,
     .         1., -1.,  2.,  0.,  2.,      -3.,    0.0,      1.,  0.0/
      DATA X7/ 3.,  0.,  2.,  0.,  2.,      -3.,    0.0,      1.,  0.0,
     .        -2.,  0.,  2.,  0.,  2.,      -3.,    0.0,      1.,  0.0,
     .         1.,  0.,  2.,  0.,  0.,       3.,    0.0,      0.,  0.0,
     .        -1.,  0.,  2.,  4.,  2.,      -2.,    0.0,      1.,  0.0,
     .         1.,  0.,  0.,  0.,  2.,      -2.,    0.0,      1.,  0.0,
     .        -1.,  0.,  2., -2.,  1.,      -2.,    0.0,      1.,  0.0,
     .         0., -2.,  2., -2.,  1.,      -2.,    0.0,      1.,  0.0,
     .        -2.,  0.,  0.,  0.,  1.,      -2.,    0.0,      1.,  0.0,
     .         2.,  0.,  0.,  0.,  1.,       2.,    0.0,     -1.,  0.0,
     .         3.,  0.,  0.,  0.,  0.,       2.,    0.0,      0.,  0.0/
      DATA X8/ 1.,  1.,  2.,  0.,  2.,       2.,    0.0,     -1.,  0.0,
     .         0.,  0.,  2.,  1.,  2.,       2.,    0.0,     -1.,  0.0,
     .         1.,  0.,  0.,  2.,  1.,      -1.,    0.0,      0.,  0.0,
     .         1.,  0.,  2.,  2.,  1.,      -1.,    0.0,      1.,  0.0,
     .         1.,  1.,  0., -2.,  1.,      -1.,    0.0,      0.,  0.0,
     .         0.,  1.,  0.,  2.,  0.,      -1.,    0.0,      0.,  0.0,
     .         0.,  1.,  2., -2.,  0.,      -1.,    0.0,      0.,  0.0,
     .         0.,  1., -2.,  2.,  0.,      -1.,    0.0,      0.,  0.0,
     .         1.,  0., -2.,  2.,  0.,      -1.,    0.0,      0.,  0.0,
     .         1.,  0., -2., -2.,  0.,      -1.,    0.0,      0.,  0.0/
      DATA X9/ 1.,  0.,  2., -2.,  0.,      -1.,    0.0,      0.,  0.0,
     .         1.,  0.,  0., -4.,  0.,      -1.,    0.0,      0.,  0.0,
     .         2.,  0.,  0., -4.,  0.,      -1.,    0.0,      0.,  0.0,
     .         0.,  0.,  2.,  4.,  2.,      -1.,    0.0,      0.,  0.0,
     .         0.,  0.,  2., -1.,  2.,      -1.,    0.0,      0.,  0.0,
     .        -2.,  0.,  2.,  4.,  2.,      -1.,    0.0,      1.,  0.0,
     .         2.,  0.,  2.,  2.,  2.,      -1.,    0.0,      0.,  0.0,
     .         0., -1.,  2.,  0.,  1.,      -1.,    0.0,      0.,  0.0,
     .         0.,  0., -2.,  0.,  1.,      -1.,    0.0,      0.,  0.0,
     .         0.,  0.,  4., -2.,  2.,       1.,    0.0,      0.,  0.0/
      DATA XA/ 0.,  1.,  0.,  0.,  2.,       1.,    0.0,      0.,  0.0,
     .         1.,  1.,  2., -2.,  2.,       1.,    0.0,     -1.,  0.0,
     .         3.,  0.,  2., -2.,  2.,       1.,    0.0,      0.,  0.0,
     .        -2.,  0.,  2.,  2.,  2.,       1.,    0.0,     -1.,  0.0,
     .        -1.,  0.,  0.,  0.,  2.,       1.,    0.0,     -1.,  0.0,
     .         0.,  0., -2.,  2.,  1.,       1.,    0.0,      0.,  0.0,
     .         0.,  1.,  2.,  0.,  1.,       1.,    0.0,      0.,  0.0,
     .        -1.,  0.,  4.,  0.,  2.,       1.,    0.0,      0.,  0.0,
     .         2.,  1.,  0., -2.,  0.,       1.,    0.0,      0.,  0.0,
     .         2.,  0.,  0.,  2.,  0.,       1.,    0.0,      0.,  0.0/
      DATA XB/ 2.,  0.,  2., -2.,  1.,       1.,    0.0,     -1.,  0.0,
     .         2.,  0., -2.,  0.,  1.,       1.,    0.0,      0.,  0.0,
     .         1., -1.,  0., -2.,  0.,       1.,    0.0,      0.,  0.0,
     .        -1.,  0.,  0.,  1.,  1.,       1.,    0.0,      0.,  0.0,
     .        -1., -1.,  0.,  2.,  1.,       1.,    0.0,      0.,  0.0,
     .         0.,  1.,  0.,  1.,  0.,       1.,    0.0,      0.,  0.0/
C
C***********************************************************************
C
C
C     GET FUNDAMENTAL ARGUMENTS
C
      CALL FUNARG (T,L,LP,F,D,OM)
C
C***********************************************************************
C
C
C     SUM NUTATION SERIES TERMS, FROM SMALLEST TO LARGEST
C
      DPSI = 0.D0
      DEPS = 0.D0
C
      DO 10 J=1,106
      I = 107 - J
C     FORMATION OF MULTIPLES OF ARGUMENTS
      ARG = DBLE(X(1,I)) * L
     .    + DBLE(X(2,I)) * LP
     .    + DBLE(X(3,I)) * F
     .    + DBLE(X(4,I)) * D
     .    + DBLE(X(5,I)) * OM
C     EVALUATE NUTATION
      DPSI = (DBLE(X(6,I)) + DBLE(X(7,I))*T) * DSIN(ARG) + DPSI
      DEPS = (DBLE(X(8,I)) + DBLE(X(9,I))*T) * DCOS(ARG) + DEPS
   10 CONTINUE
C
C
      DPSI = DPSI * 1.0D-4
      DEPS = DEPS * 1.0D-4
C
C***********************************************************************
C
C
      RETURN
C
      END



      SUBROUTINE SOLSYS (TJD,BODY,ORIGIN, POS,VEL,IERR)
C
C     SUBROUTINE SOLSYS VERSION 2.
C
C-----------------------------------------------------------------------
C
C---PURPOSE: THIS IS SOLSYS VERSION 2.  IT IS INTENDED TO PROVIDE
C            AN INTERFACE BETWEEN THE JPL BINARY DIRECT-ACCESS SOLAR
C            SYSTEM EPHEMERIDES AND THE 'NOVAS' ASTROMETRIC SUBROUTINE
C            LIBRARY.
C
C---REFERENCE:  DOCUMENTATION BY E. M. STANDISH ON CD-ROM
C            'JPL PLANETARY AND LUNAR EPHEMERIDES' (C)1997 BY JPL
C            AND PUBLISHED BY WILLMANN-BELL, INC., RICHMOND, VA, USA.
C
C---INPUT ARGUMENTS:     TJD = JULIAN DATE OF THE DESIRED TIME, ON
C                              THE TDB TIME SCALE (DOUBLE PRECISION).
C                       BODY = BODY IDENTIFICATION NUMBER FOR THE
C                              SOLAR SYSTEM OBJECT OF INTEREST;
C                              MERCURY= 1,...,PLUTO= 9, SUN= 10,
C                              MOON= 11 (INTEGER).
C                     ORIGIN = ORIGIN CODE; SOLAR SYSTEM BARYCENTER= 0,
C                              CENTER OF MASS OF THE SUN= 1 (INTEGER).
C
C---OUTPUT ARGUMENTS:    POS = POSITION VECTOR OF 'BODY' AT TJD;
C                              EQUATORIAL RECTANGULAR COORDINATES IN
C                              AU REFERRED TO THE MEAN EQUATOR AND
C                              EQUINOX OF J2000.0 (DOUBLE PRECISION).
C                        VEL = VELOCITY VECTOR OF 'BODY' AT TJD;
C                              EQUATORIAL RECTANGULAR SYSTEM REFERRED
C                              TO THE MEAN EQUATOR AND EQUINOX OF
C                              J2000.0, IN AU/DAY (DOUBLE PRECISION).
C                       IERR = 0 ... EVERYTHING OK
C                            = 1 ... 'TJD' BEFORE FIRST EPHEMERIS DATE
C                            = 2 ... 'TJD' AFTER LAST EPHEMERIS DATE
C                            = 3 ... INVALID VALUE OF 'BODY' OR
C                                    'ORIGIN' (INTEGER).
C
C---COMMON BLOCKS: NONE.
C
C---SUBROUTINES CALLED: SUBROUTINE CONST   (JPL)
C                       SUBROUTINE PLEPH   (JPL)
C                       SUBROUTINE AUXPOS  (SUPPLIED)
C
C---VERSION/DATE/PROGRAMMER: V1/02-90/JAB
C                            V2/07-91/GHK
C                            V3/05-98/GHK
C
C---NOTES: 1. SUBROUTINE PLEPH IS A JPL-SUPPLIED ROUTINE THAT CALLS
C             A VARIETY OF OTHER JPL SUBROUTINES.
C          2. THIS ROUTINE IS FOR USE WITH 1997 VERSION OF JPL
C             EPHEMERIS SOFTWARE, E.G., AS DISTRIBUTED ON CD-ROM
C             'JPL PLANETARY AND LUNAR EPHEMERIDES' (C)1997 BY JPL.
C             IT MAY NOT WORK PROPERLY WITH PREVIOUS VERSIONS OF THE
C             JPL SOFTWARE.
C          3. FOR BODY IDENTIFICATION NUMBERS OUTSIDE THE RANGE 1-11,
C             SUBROUTINE 'AUXPOS' WILL BE CALLED TO SUPPLY POSITIONS
C             AND VELOCITIES FROM SOURCES EXTERNAL TO THE JPL
C             EPHEMERIDES.  A DUMMY VERSION OF THIS ROUTINE IS
C             PROVIDED, WHICH CAN BE REPLACED BY THE USER.
C
C-----------------------------------------------------------------------
C
      INTEGER BODY,ORIGIN,IERR,TARG,CENT,I,N
C
      DOUBLE PRECISION TJD,POS(3),VEL(3),POSVEL(6),VALUES(500),SSS(3),
     .     BEGJD,ENDJD
C
      CHARACTER NAMES(500)*6
C
      LOGICAL FIRST
C
      SAVE FIRST, BEGJD, ENDJD
C
      DATA FIRST / .TRUE. /
C
C---ON FIRST CALL, CALL JPL ROUTINE 'CONST' TO OBTAIN BEGINNING
C   AND ENDING JULIAN DATES OF EPHEMERIS
      IF ( FIRST ) THEN
          CALL CONST ( NAMES, VALUES, SSS, N )
          BEGJD = SSS(1)
          ENDJD = SSS(2)
          FIRST = .FALSE.
      END IF
C
C---INITIALIZE OUTPUT ARGUMENTS
      POS(1) =  0.D0
      POS(2) =  0.D0
      POS(3) = 99.D0
      VEL(1) =  0.D0
      VEL(2) =  0.D0
      VEL(3) =  0.D0
      IERR = 0
C
C---PERFORM SANITY CHECKS ON THE INPUT BODY AND ORIGIN.
      IF ( ( ORIGIN .LT. 0 ) .OR. ( ORIGIN .GT. 1 ) ) THEN
          IERR = 3
          GO TO 99
      ELSE IF ( ( BODY .LT. 1 ) .OR. ( BODY .GT. 11 ) ) THEN
C         CALL AUXPOS FOR AUXILIARY BODIES (IF ANY)
          CALL AUXPOS ( TJD, BODY, ORIGIN,   POS, VEL, JERR )
          IERR = JERR
          GO TO 99
      ENDIF
C
C---CHECK THAT REQUESTED JULIAN DATE IS WITHIN RANGE OF EPHEMERIS.
      IF ( TJD .LT. BEGJD ) THEN
          IERR = 1
          GO TO 99
      ELSE IF ( TJD .GT. ENDJD ) THEN
          IERR = 2
          GO TO 99
      ENDIF
C
C---SELECT 'TARG' ACCORDING TO VALUE OF 'BODY'.
      IF ( BODY .EQ. 10 ) THEN
          TARG = 11
      ELSE IF ( BODY .EQ. 11 ) THEN
          TARG = 10
      ELSE
          TARG = BODY
      ENDIF
C
C---SELECT 'CENT' ACCORDING TO THE VALUE OF 'ORIGIN'.
      IF ( ORIGIN .EQ. 0 ) THEN
          CENT = 12
      ELSE IF ( ORIGIN .EQ. 1 ) THEN
          CENT = 11
      ENDIF
C
C---CALL JPL ROUTINE 'PLEPH' TO OBTAIN POSITION AND VELOCITY ARRAY
C   'POSVEL'.
      CALL PLEPH ( TJD, TARG, CENT,   POSVEL )
C
C---DECOMPOSE 'POSVEL' INTO POSITION 'POS' AND VELOCITY 'VEL'.
      DO 10 I = 1, 3
          POS(I) = POSVEL(I)
          VEL(I) = POSVEL(I+3)
   10 CONTINUE
C
   99 CONTINUE
      RETURN
C
      END



      SUBROUTINE AUXPOS (TJD,M,K, POS,VEL,JERR)
C
C     FOR USE WITH SUBROUTINE SOLSYS VERSION 2.
C     THIS SUBROUTINE PROVIDES THE POSITION AND VELOCITY OF
C     AN AUXILIARY SOLAR SYSTEM BODY AT TIME TJD.  IT IS CALLED
C     FROM SOLSYS VERSION 2 (JPL EPHEMERIS ACCESS) WHEN THE BODY
C     IDENTIFICATION NUMBER IS OUTSIDE THE RANGE 1-11.  ITS
C     INTENDED USE IS TO SUPPLY EPHEMERIS DATA FROM NON-STANDARD
C     SOURCES.
C
C          TJD  = TDB JULIAN DATE OF DESIRED EPOCH (IN)
C          M    = BODY IDENTIFICATION NUMBER (IN)
C          K    = ORIGIN SELECTION CODE (IN)
C                 SET K=0 FOR ORIGIN AT SOLAR SYSTEM BARYCENTER
C                 SET K=1 FOR ORIGIN AT CENTER OF SUN
C          POS  = POSITION VECTOR, EQUATORIAL RECTANGULAR
C                 COORDINATES, REFERRED TO MEAN EQUATOR AND EQUINOX
C                 OF J2000.0, COMPONENTS IN AU (OUT)
C          VEL  = VELOCITY VECTOR, EQUATORIAL RECTANGULAR
C                 COORDINATES, REFERRED TO MEAN EQUATOR AND EQUINOX
C                 OF J2000.0, COMPONENTS IN AU/DAY (OUT)
C          JERR = ERROR INDICATOR (OUT)
C                 JERR=0 MEANS EVERYTHING OK
C                 JERR=1 MEANS TJD BEFORE FIRST VALID DATE
C                 JERR=2 MEANS TJD AFTER LAST VALID DATE
C                 JERR=3 MEANS INVALID VALUE OF M OR K
C
C
C----------------------------------------------------------------------
C
C     THIS IS A DUMMY VERSION OF SUBROUTINE AUXPOS.  IT SIMPLY
C     RETURNS AN ERROR CODE, SINCE IT CANNOT SUPPLY POSITIONS
C     OR VELOCITIES.  FOR NORMAL (CORRECT) ACCESS TO THE JPL
C     EPHEMERIDES VIA SOLSYS VERSION 2, THIS ROUTINE WILL NEVER
C     BE CALLED.
C
C     A WORKING VERSION MUST BE SUPPLIED BY THE USER ONLY IF THE
C     POSITIONS/VELOCITIES OF AUXILIARY SOLAR SYSTEM BODIES (E.G.,
C     ASTEROIDS) ARE OF INTEREST.  SUCH DATA COULD BE OBTAINED FROM
C     EPHEMERIS FILES OR CLOSED-FORM SERIES APPROXIMATIONS.  THE
C     BODY IDENTIFICATION NUMBERS USED FOR SUCH OBJECTS MUST BE
C     OUTSIDE THE RANGE 1-11 USED FOR MAJOR SOLAR SYSTEM BODIES.
C
C     GENERALLY, IN SUCH CASES IT WOULD BE NECESSARY FOR THIS ROUTINE
C     TO PROVIDE ONLY BARYCENTRIC POSITIONS FOR THE INPUT JD.
C     APPARENT PLACE ROUTINES SUCH AS APPLAN NEED VELOCITIES AND
C     HELIOCENTRIC POSITIONS ONLY FOR THE EARTH (WHICH WILL BE
C     OBTAINED FROM THE JPL EPHEMERIS).  ALSO, DO NOT USE FORTRAN
C     I/O UNIT NUMBER 12, WHICH IS USED BY THE JPL ROUTINES.
C
C----------------------------------------------------------------------
C
      DOUBLE PRECISION TJD,POS,VEL
      DIMENSION POS(3), VEL(3)
C
      POS(1) =  0.D0
      POS(2) =  0.D0
      POS(3) = 99.D0
      VEL(1) =  0.D0
      VEL(2) =  0.D0
      VEL(3) =  0.D0
      JERR = 3
      RETURN
C
      END
